;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_Frame_Count2
	.export		_index
	.export		_index4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Vert_scroll
	.export		_Vert_scroll2
	.export		_X_speed
	.export		_Y_speed
	.export		_collision
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_song
	.export		_Game_Mode
	.export		_Wait
	.export		_Wait2
	.export		_Score1
	.export		_Score2
	.export		_Score3
	.export		_Score4
	.export		_Lives
	.export		_Sprite_Index
	.export		_bullet_Wait
	.export		_objectA_x
	.export		_objectA_y
	.export		_objectA_width
	.export		_objectA_height
	.export		_objectB_x
	.export		_objectB_y
	.export		_objectB_width
	.export		_objectB_height
	.export		_injury_Timer
	.export		_invincible
	.export		_Death_Flag
	.export		_Init_Wave_Flag
	.export		_Wave
	.export		_Pattern
	.export		_Master_Delay
	.export		_p_Wave_Data
	.export		_Current_Move
	.export		_Current_Type
	.export		_Save_Game_Mode
	.export		_Big_Math
	.export		_BOSS_health
	.export		_BOSS_health_test
	.export		_BOSS_eyes
	.export		_Shake_Timer_1
	.export		_Shake_Timer_2
	.export		_Selection
	.export		_Flag_Blink_Boss
	.export		_X_compare
	.export		_ENEMY_X
	.export		_ENEMY_Y
	.export		_Enemy_Pointer
	.export		_SPRITES
	.export		_dummy
	.export		_hero_ship
	.export		_ENEMY1
	.export		_ENEMY2
	.export		_ENEMY3
	.export		_ENEMY4
	.export		_ENEMY5
	.export		_ENEMY6
	.export		_ENEMY7
	.export		_ENEMY8
	.export		_BOSS
	.export		_LASER1
	.export		_LASER2
	.export		_LASER3
	.export		_LASER4
	.export		_Explode1
	.export		_Explode2
	.export		_Explode3
	.export		_Explode4
	.export		_hero_bullet1
	.export		_hero_bullet2
	.export		_hero_bullet3
	.export		_hero_bullet4
	.export		_hero_bullet5
	.export		_hero_bullet6
	.export		_hero_bullet7
	.export		_hero_bullet8
	.export		_enemy_bullet1
	.export		_enemy_bullet2
	.export		_enemy_bullet3
	.export		_enemy_bullet4
	.export		_enemy_bullet5
	.export		_enemy_bullet6
	.export		_enemy_bullet7
	.export		_enemy_bullet8
	.export		_Title
	.export		_Stars
	.export		_Keep
	.export		_PALETTE
	.export		_HUD
	.export		_HUD2
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Rotate_Palette
	.export		_Load_Palette
	.export		_Draw_Hero
	.export		_move_logic
	.export		_Draw_Title
	.export		_Draw_Background
	.export		_Turn_On_Pause_Sprites
	.export		_Turn_On_Game_Over_Sprites
	.export		_Turn_On_Victory_Sprites
	.export		_Set_Sprite_Zero
	.export		_shooting
	.export		_spawn_bullets
	.export		_Draw_Bullets
	.export		_Move_Enemies
	.export		_Draw_Enemies2
	.export		_collision_Test
	.export		_collision_Test2
	.export		_Adjust_Scoreboard
	.export		_Draw_Explosion
	.export		_Check_Wave_Over
	.export		_Init_New_Wave
	.export		_Clear_Enemies
	.export		_Spawn_Bullet_E
	.export		_Init_Boss_Level
	.export		_collision_Test3
	.export		_collision_Test4
	.export		_Move_Boss
	.export		_Check_Injury
	.export		_Spawn_Lasers
	.export		_Move_Lasers
	.export		_SHAKE_AND_BLINK
	.export		_Keep_Loop
	.export		_Randomly_Shoot
	.import		_Reset
	.import		_Blank_sprite
	.import		_Play_Fx
	.import		_Reset_Music
	.import		_Play_Music
	.import		_Music_Update
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.import		_Draw_Sprites
	.import		_move_bullets
	.import		_move_bullets2
	.import		_draw_enemies
	.import		_Hitbox
	.import		_Circle_Math
	.import		_Reset_Keep_Score
	.import		_memcpy
	.export		_main
	.export		_Palette_Fade
	.export		_Spawn_Explosion
	.export		_All_Enemies
	.export		_Wave0
	.export		_Wave1
	.export		_Wave2
	.export		_Wave3
	.export		_Wave4
	.export		_Wave5
	.export		_Wave6
	.export		_Wave7
	.export		_Wave8
	.export		_Wave9
	.export		_Wave10
	.export		_All_Wave_Addresses
	.export		_Wave_to_Pattern
	.export		_CIRCLE_X
	.export		_CIRCLE_Y
	.export		_CIRCLE_D
	.export		_CIRCLE_A
	.export		_BOSS_BLINK

.segment	"RODATA"

_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C7
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$AF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$00
	.byte	$44
	.byte	$6F
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$46
	.byte	$72
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$20
	.byte	$55
	.byte	$70
	.byte	$64
	.byte	$61
	.byte	$74
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$41
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$00
	.byte	$01
	.byte	$A9
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$01
	.byte	$00
_Stars:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$39
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$01
	.byte	$00
_Keep:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$4B
	.byte	$65
	.byte	$65
	.byte	$70
	.byte	$00
	.byte	$50
	.byte	$6C
	.byte	$61
	.byte	$79
	.byte	$69
	.byte	$6E
	.byte	$67
	.byte	$3F
	.byte	$00
	.byte	$01
	.byte	$55
	.byte	$59
	.byte	$65
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$4E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$01
	.byte	$00
_PALETTE:
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$01
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$16
	.byte	$27
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$33
	.byte	$00
	.byte	$17
	.byte	$1A
	.byte	$39
_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_Palette_Fade:
	.byte	$24
	.byte	$14
	.byte	$04
	.byte	$14
_Wave0:
	.byte	$06
	.byte	$00
	.byte	$20
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$30
	.byte	$FF
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$FF
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$50
	.byte	$FF
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$60
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$70
	.byte	$FF
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$80
	.byte	$FF
	.byte	$60
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$90
	.byte	$FF
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
_Wave1:
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$50
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Wave2:
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$50
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Wave3:
	.byte	$06
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$20
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$00
_Wave4:
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$FF
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
_Wave5:
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$A0
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
_Wave6:
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$30
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$00
_Wave7:
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
_Wave8:
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$60
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$00
_Wave9:
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$30
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$60
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$FF
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
_Wave10:
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$60
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$D0
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$40
	.byte	$FF
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
_All_Wave_Addresses:
	.addr	_Wave0
	.addr	_Wave3
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave3
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave7
	.addr	_Wave8
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave7
	.addr	_Wave8
	.addr	_Wave6
	.addr	_Wave0
	.addr	_Wave4
	.addr	_Wave5
	.addr	_Wave3
	.addr	_Wave4
	.addr	_Wave5
	.addr	_Wave0
	.addr	_Wave6
	.addr	_Wave6
	.addr	_Wave9
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave9
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave6
	.addr	_Wave6
	.addr	_Wave10
	.addr	_Wave9
	.addr	_Wave9
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave1
	.addr	_Wave2
	.addr	_Wave6
	.addr	_Wave6
	.addr	_Wave7
	.addr	_Wave8
	.addr	_Wave6
	.addr	_Wave10
	.addr	_Wave4
	.addr	_Wave5
	.addr	_Wave10
	.addr	_Wave4
	.addr	_Wave5
	.addr	_Wave9
	.addr	_Wave9
	.addr	_Wave10
	.addr	_Wave10
	.addr	_Wave10
_Wave_to_Pattern:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$07
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
_CIRCLE_X:
	.byte	$E4
	.byte	$E8
	.byte	$EC
	.byte	$F1
	.byte	$F4
	.byte	$F7
	.byte	$FA
	.byte	$FD
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$0F
	.byte	$12
	.byte	$15
	.byte	$18
	.byte	$15
	.byte	$12
	.byte	$0F
	.byte	$0C
	.byte	$09
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$FD
	.byte	$FA
	.byte	$F7
	.byte	$F4
	.byte	$F1
	.byte	$EC
	.byte	$E8
_CIRCLE_Y:
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$0F
	.byte	$12
	.byte	$15
	.byte	$18
	.byte	$15
	.byte	$12
	.byte	$0F
	.byte	$0C
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$FE
	.byte	$FD
	.byte	$FA
	.byte	$F7
	.byte	$F4
	.byte	$F1
	.byte	$EC
	.byte	$E8
	.byte	$E4
	.byte	$E8
	.byte	$ED
	.byte	$F1
	.byte	$F4
	.byte	$F7
	.byte	$FA
	.byte	$FD
_CIRCLE_D:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_CIRCLE_A:
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$0A
_BOSS_BLINK:
	.byte	$02
	.byte	$12
	.byte	$1F
	.byte	$12

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_Frame_Count2:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Vert_scroll:
	.res	1,$00
_Vert_scroll2:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_collision:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_song:
	.res	1,$00
_Game_Mode:
	.res	1,$00
_Wait:
	.res	1,$00
_Wait2:
	.res	1,$00
_Score1:
	.res	1,$00
_Score2:
	.res	1,$00
_Score3:
	.res	1,$00
_Score4:
	.res	1,$00
_Lives:
	.res	1,$00
_Sprite_Index:
	.res	1,$00
_bullet_Wait:
	.res	1,$00
_objectA_x:
	.res	1,$00
_objectA_y:
	.res	1,$00
_objectA_width:
	.res	1,$00
_objectA_height:
	.res	1,$00
_objectB_x:
	.res	1,$00
_objectB_y:
	.res	1,$00
_objectB_width:
	.res	1,$00
_objectB_height:
	.res	1,$00
_injury_Timer:
	.res	1,$00
_invincible:
	.res	1,$00
_Death_Flag:
	.res	1,$00
_Init_Wave_Flag:
	.res	1,$00
_Wave:
	.res	1,$00
_Pattern:
	.res	1,$00
_Master_Delay:
	.res	1,$00
_p_Wave_Data:
	.res	2,$00
_Current_Move:
	.res	1,$00
_Current_Type:
	.res	1,$00
_Save_Game_Mode:
	.res	1,$00
_Big_Math:
	.res	2,$00
_BOSS_health:
	.res	1,$00
_BOSS_health_test:
	.res	1,$00
_BOSS_eyes:
	.res	1,$00
_Shake_Timer_1:
	.res	1,$00
_Shake_Timer_2:
	.res	1,$00
_Selection:
	.res	1,$00
_Flag_Blink_Boss:
	.res	1,$00
_X_compare:
	.res	1,$00
_ENEMY_X:
	.res	1,$00
_ENEMY_Y:
	.res	1,$00
_Enemy_Pointer:
	.res	2,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00
.segment	"BSS"
_dummy:
	.res	8,$00
_hero_ship:
	.res	8,$00
_ENEMY1:
	.res	8,$00
_ENEMY2:
	.res	8,$00
_ENEMY3:
	.res	8,$00
_ENEMY4:
	.res	8,$00
_ENEMY5:
	.res	8,$00
_ENEMY6:
	.res	8,$00
_ENEMY7:
	.res	8,$00
_ENEMY8:
	.res	8,$00
_BOSS:
	.res	8,$00
_LASER1:
	.res	8,$00
_LASER2:
	.res	8,$00
_LASER3:
	.res	8,$00
_LASER4:
	.res	8,$00
_Explode1:
	.res	8,$00
_Explode2:
	.res	8,$00
_Explode3:
	.res	8,$00
_Explode4:
	.res	8,$00
_hero_bullet1:
	.res	8,$00
_hero_bullet2:
	.res	8,$00
_hero_bullet3:
	.res	8,$00
_hero_bullet4:
	.res	8,$00
_hero_bullet5:
	.res	8,$00
_hero_bullet6:
	.res	8,$00
_hero_bullet7:
	.res	8,$00
_hero_bullet8:
	.res	8,$00
_enemy_bullet1:
	.res	8,$00
_enemy_bullet2:
	.res	8,$00
_enemy_bullet3:
	.res	8,$00
_enemy_bullet4:
	.res	8,$00
_enemy_bullet5:
	.res	8,$00
_enemy_bullet6:
	.res	8,$00
_enemy_bullet7:
	.res	8,$00
_enemy_bullet8:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }  
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Rotate_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Rotate_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; PPU_DATA = Palette_Fade[(Frame_Count >> 2) & 0x03];
;
	lda     _Frame_Count
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_Palette_Fade)
	sta     ptr1+1
	ldy     #<(_Palette_Fade)
	lda     (ptr1),y
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L1127:	lda     _index
	cmp     #$20
	bcs     L0391
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L1127
;
; }
;
L0391:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Hero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Hero: near

.segment	"CODE"

;
; if (injury_Timer == 0){
;
	lda     _injury_Timer
	bne     L1129
;
; hero_ship.anime = ship_reg;
;
	sta     _hero_ship
;
; if ((joypad1 & (LEFT)) != 0) hero_ship.anime = ship_left;
;
	lda     _joypad1
	and     #$02
	beq     L1128
	lda     #$01
	sta     _hero_ship
;
; if ((joypad1 & (RIGHT)) != 0) hero_ship.anime = ship_right;
;
L1128:	lda     _joypad1
	and     #$01
	beq     L112D
	lda     #$02
;
; else if (injury_Timer < 10){
;
	jmp     L112E
L1129:	lda     _injury_Timer
	cmp     #$0A
	bcs     L112A
;
; hero_ship.anime = ship_expl_1;
;
	lda     #$03
;
; else if (injury_Timer < 20){
;
	jmp     L112E
L112A:	lda     _injury_Timer
	cmp     #$14
	bcs     L112B
;
; hero_ship.anime = ship_expl_2;
;
	lda     #$04
;
; else if (injury_Timer < 30){
;
	jmp     L112E
L112B:	lda     _injury_Timer
	cmp     #$1E
	bcs     L03AE
;
; hero_ship.anime = ship_expl_3;
;
	lda     #$05
L112E:	sta     _hero_ship
;
; hero_ship.dir = NO_FLIP; // never flipped
;
	lda     #$00
L112D:	sta     _hero_ship+1
;
; Draw_Sprites(&hero_ship);
;
	lda     #<(_hero_ship)
	ldx     #>(_hero_ship)
	jmp     _Draw_Sprites
;
; }
;
L03AE:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & (RIGHT|LEFT)) == 0){ // no L or R
;
	lda     _joypad1
	and     #$03
	bne     L1133
;
; if (X_speed > 7) // if positive, going right
;
	lda     _X_speed
	sec
	sbc     #$08
	bvs     L03DE
	eor     #$80
L03DE:	bpl     L1132
;
; X_speed-=2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
;
; if (X_speed < 6) // going left
;
L1132:	lda     _X_speed
	sec
	sbc     #$06
	bvc     L03E5
	eor     #$80
L03E5:	bpl     L1133
;
; X_speed+=2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & RIGHT) != 0){
;
L1133:	lda     _joypad1
	and     #$01
	beq     L1135
;
; if (X_speed >= 7){ // going right
;
	lda     _X_speed
	sec
	sbc     #$07
	bvs     L03F0
	eor     #$80
L03F0:	bpl     L1134
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L1135
;
; else { // going left
;
	jmp     L1135
;
; X_speed += 4; // double friction
;
L1134:	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) != 0){
;
L1135:	lda     _joypad1
	and     #$02
	beq     L1137
;
; if (X_speed <= 7){ // going left
;
	lda     _X_speed
	sec
	sbc     #$08
	bvc     L03FF
	eor     #$80
L03FF:	bpl     L1136
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L1137
;
; else { // going right
;
	jmp     L1137
;
; X_speed -= 4; // double friction
;
L1136:	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
;
; if (X_speed >= 0){ // going right
;
L1137:	ldx     _X_speed
	bmi     L0407
;
; if (X_speed > 0x34)
;
	lda     _X_speed
	sec
	sbc     #$35
	bvs     L040D
	eor     #$80
L040D:	asl     a
	ldx     #$00
	bcc     L1138
;
; X_speed = 0x34;
;
	lda     #$34
;
; else {
;
	jmp     L1131
;
; if (X_speed < (-0x34))
;
L0407:	lda     _X_speed
	sec
	sbc     #$CC
	bvc     L0415
	eor     #$80
L0415:	asl     a
	ldx     #$00
	bcc     L1138
;
; X_speed = (-0x34); // 0xe0
;
	lda     #$CC
L1131:	sta     _X_speed
;
; hero_ship.X += ((X_speed+8)>>4);
;
L1138:	lda     _X_speed
	bpl     L041D
	dex
L041D:	clc
	adc     #$08
	bcc     L041E
	inx
L041E:	jsr     asrax4
	clc
	adc     _hero_ship+3
	sta     _hero_ship+3
;
; if (hero_ship.X < 0x08){ // too far left
;
	cmp     #$08
	bcs     L1139
;
; hero_ship.X = 0x08;
;
	lda     #$08
	sta     _hero_ship+3
;
; X_speed = 7; // stopped. it was 0, but I was getting a delay on Right presses
;
	lda     #$07
	sta     _X_speed
;
; if (hero_ship.X > 0xe8){ // too far right
;
L1139:	lda     _hero_ship+3
	cmp     #$E9
	bcc     L113A
;
; hero_ship.X = 0xe8;
;
	lda     #$E8
	sta     _hero_ship+3
;
; X_speed = 7; // stopped. it was 0, but I was getting a delay on Right presses
;
	lda     #$07
	sta     _X_speed
;
; --Vert_scroll;
;
L113A:	dec     _Vert_scroll
;
; if (Vert_scroll > 0xef){
;
	lda     _Vert_scroll
	cmp     #$F0
	bcc     L042C
;
; Vert_scroll = 0xef; // screen is only 240 pixels high
;
	lda     #$EF
	sta     _Vert_scroll
;
; }
;
L042C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Title); // uncompresses our data
;
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64; 
;
	lda     #$64
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L113B:	lda     _index
	cmp     #$07
	bcs     L113C
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L113B
;
; PPU_ADDRESS = 0x24;
;
L113C:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L113D:	lda     _index
	cmp     #$07
	bcs     L113E
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L113D
;
; PPU_ADDRESS = 0x27;
;
L113E:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for(index=0;index < 8;++index){
;
	lda     #$00
	sta     _index
L113F:	lda     _index
	cmp     #$08
	bcs     L04C5
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index=0;index < 8;++index){
;
	inc     _index
	jmp     L113F
;
; }
;
L04C5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Stars); // uncompresses our data
;
	lda     #<(_Stars)
	ldx     #>(_Stars)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x3f; // address of BG#0 Palette
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA = 3;
;
	lda     #$03
	sta     $2007
;
; PPU_DATA = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_DATA = 5;
;
	lda     #$05
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Pause_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Pause_Sprites: near

.segment	"CODE"

;
; dummy.anime = Pause_Sprites;
;
	lda     #$0E
	sta     _dummy
;
; dummy.dir = NO_FLIP;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x6c;
;
	lda     #$6C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Game_Over_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Game_Over_Sprites: near

.segment	"CODE"

;
; dummy.anime = Game_O_Sprites;
;
	lda     #$0F
	sta     _dummy
;
; dummy.dir = NO_FLIP;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x5c;
;
	lda     #$5C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Victory_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Victory_Sprites: near

.segment	"CODE"

;
; dummy.anime = Vic_Sprites;
;
	lda     #$10
	sta     _dummy
;
; dummy.dir = NO_FLIP;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x60;
;
	lda     #$60
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

.segment	"CODE"

;
; SPRITES[0] = 0x1d;
;
	lda     #$1D
	sta     _SPRITES
;
; SPRITES[1] = 0xff; // the last tile in the set
;
	lda     #$FF
	sta     _SPRITES+1
;
; SPRITES[2] = 0x20;
;
	lda     #$20
	sta     _SPRITES+2
;
; SPRITES[3] = 0xb9;
;
	lda     #$B9
	sta     _SPRITES+3
;
; Sprite_Index = 4; // so the drawing routine will skip the zero sprite
;
	lda     #$04
	sta     _Sprite_Index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shooting (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shooting: near

.segment	"CODE"

;
; if ((joypad1 & A_B_BUTTON) == 0) bullet_Wait = 0; // allow rapid taps
;
	lda     _joypad1
	and     #$C0
	bne     L1140
	sta     _bullet_Wait
;
; if (bullet_Wait != 0) {
;
L1140:	lda     _bullet_Wait
	beq     L1141
;
; --bullet_Wait;
;
	dec     _bullet_Wait
;
; else {
;
	rts
;
; if ((joypad1 & A_B_BUTTON) != 0) // either A or B
;
L1141:	lda     _joypad1
	and     #$C0
	cmp     #$00
;
; spawn_bullets();
;
	jne     _spawn_bullets
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_bullets: near

.segment	"CODE"

;
; bullet_Wait = 0x10; // return;
;
	lda     #$10
	sta     _bullet_Wait
;
; if (hero_bullet1.Y == 0){
;
	lda     _hero_bullet1
	bne     L1142
;
; hero_bullet1.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet1+4
;
; hero_bullet1.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet1
;
; hero_bullet1.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet1+6
;
; hero_bullet1.tile = 0xe0;
;
	sta     _hero_bullet1+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; if (hero_bullet2.Y == 0){
;
L1142:	lda     _hero_bullet2
	bne     L1143
;
; hero_bullet2.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet2+4
;
; hero_bullet2.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet2
;
; hero_bullet2.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet2+6
;
; hero_bullet2.tile = 0xe0;
;
	sta     _hero_bullet2+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; if (hero_bullet3.Y == 0){
;
L1143:	lda     _hero_bullet3
	bne     L1144
;
; hero_bullet3.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet3+4
;
; hero_bullet3.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet3
;
; hero_bullet3.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet3+6
;
; hero_bullet3.tile = 0xe0;
;
	sta     _hero_bullet3+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; if (hero_bullet4.Y == 0){
;
L1144:	lda     _hero_bullet4
	bne     L1145
;
; hero_bullet4.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet4+4
;
; hero_bullet4.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet4
;
; hero_bullet4.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet4+6
;
; hero_bullet4.tile = 0xe0;
;
	sta     _hero_bullet4+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; if (hero_bullet5.Y == 0){
;
L1145:	lda     _hero_bullet5
	bne     L1146
;
; hero_bullet5.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet5+4
;
; hero_bullet5.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet5
;
; hero_bullet5.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet5+6
;
; hero_bullet5.tile = 0xe0;
;
	sta     _hero_bullet5+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; if (hero_bullet6.Y == 0){
;
L1146:	lda     _hero_bullet6
	bne     L1147
;
; hero_bullet6.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet6+4
;
; hero_bullet6.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet6
;
; hero_bullet6.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet6+6
;
; hero_bullet6.tile = 0xe0;
;
	sta     _hero_bullet6+2
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jmp     _Play_Fx
;
; bullet_Wait = 0x20;
;
L1147:	lda     #$20
	sta     _bullet_Wait
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Bullets: near

.segment	"CODE"

;
; if (hero_bullet1.Y != 0){
;
	lda     _hero_bullet1
	beq     L1148
;
; move_bullets(&hero_bullet1);
;
	lda     #<(_hero_bullet1)
	ldx     #>(_hero_bullet1)
	jsr     _move_bullets
;
; if (hero_bullet2.Y != 0){
;
L1148:	lda     _hero_bullet2
	beq     L1149
;
; move_bullets(&hero_bullet2);
;
	lda     #<(_hero_bullet2)
	ldx     #>(_hero_bullet2)
	jsr     _move_bullets
;
; if (hero_bullet3.Y != 0){
;
L1149:	lda     _hero_bullet3
	beq     L114A
;
; move_bullets(&hero_bullet3);
;
	lda     #<(_hero_bullet3)
	ldx     #>(_hero_bullet3)
	jsr     _move_bullets
;
; if (hero_bullet4.Y != 0){
;
L114A:	lda     _hero_bullet4
	beq     L114B
;
; move_bullets(&hero_bullet4);
;
	lda     #<(_hero_bullet4)
	ldx     #>(_hero_bullet4)
	jsr     _move_bullets
;
; if (hero_bullet5.Y != 0){
;
L114B:	lda     _hero_bullet5
	beq     L114C
;
; move_bullets(&hero_bullet5);
;
	lda     #<(_hero_bullet5)
	ldx     #>(_hero_bullet5)
	jsr     _move_bullets
;
; if (hero_bullet6.Y != 0){
;
L114C:	lda     _hero_bullet6
	beq     L114D
;
; move_bullets(&hero_bullet6);
;
	lda     #<(_hero_bullet6)
	ldx     #>(_hero_bullet6)
	jsr     _move_bullets
;
; if (hero_bullet7.Y != 0){
;
L114D:	lda     _hero_bullet7
	beq     L114E
;
; move_bullets(&hero_bullet7);
;
	lda     #<(_hero_bullet7)
	ldx     #>(_hero_bullet7)
	jsr     _move_bullets
;
; if (hero_bullet8.Y != 0){
;
L114E:	lda     _hero_bullet8
	beq     L114F
;
; move_bullets(&hero_bullet8);
;
	lda     #<(_hero_bullet8)
	ldx     #>(_hero_bullet8)
	jsr     _move_bullets
;
; if (enemy_bullet1.Y != 0){
;
L114F:	lda     _enemy_bullet1
	beq     L1150
;
; move_bullets2(&enemy_bullet1);
;
	lda     #<(_enemy_bullet1)
	ldx     #>(_enemy_bullet1)
	jsr     _move_bullets2
;
; if (enemy_bullet2.Y != 0){
;
L1150:	lda     _enemy_bullet2
	beq     L1151
;
; move_bullets2(&enemy_bullet2);
;
	lda     #<(_enemy_bullet2)
	ldx     #>(_enemy_bullet2)
	jsr     _move_bullets2
;
; if (enemy_bullet3.Y != 0){
;
L1151:	lda     _enemy_bullet3
	beq     L1152
;
; move_bullets2(&enemy_bullet3);
;
	lda     #<(_enemy_bullet3)
	ldx     #>(_enemy_bullet3)
	jsr     _move_bullets2
;
; if (enemy_bullet4.Y != 0){
;
L1152:	lda     _enemy_bullet4
	beq     L1153
;
; move_bullets2(&enemy_bullet4);
;
	lda     #<(_enemy_bullet4)
	ldx     #>(_enemy_bullet4)
	jsr     _move_bullets2
;
; if (enemy_bullet5.Y != 0){
;
L1153:	lda     _enemy_bullet5
	beq     L1154
;
; move_bullets2(&enemy_bullet5);
;
	lda     #<(_enemy_bullet5)
	ldx     #>(_enemy_bullet5)
	jsr     _move_bullets2
;
; if (enemy_bullet6.Y != 0){
;
L1154:	lda     _enemy_bullet6
	beq     L1155
;
; move_bullets2(&enemy_bullet6);
;
	lda     #<(_enemy_bullet6)
	ldx     #>(_enemy_bullet6)
	jsr     _move_bullets2
;
; if (enemy_bullet7.Y != 0){
;
L1155:	lda     _enemy_bullet7
	beq     L1156
;
; move_bullets2(&enemy_bullet7);
;
	lda     #<(_enemy_bullet7)
	ldx     #>(_enemy_bullet7)
	jsr     _move_bullets2
;
; if (enemy_bullet8.Y != 0){
;
L1156:	lda     _enemy_bullet8
	beq     L0554
;
; move_bullets2(&enemy_bullet8);
;
	lda     #<(_enemy_bullet8)
	ldx     #>(_enemy_bullet8)
	jmp     _move_bullets2
;
; }
;
L0554:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Move_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Move_Enemies: near

.segment	"CODE"

;
; Current_Move = Enemy_Pointer->move;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	sta     _Current_Move
;
; switch (Pattern){
;
	lda     _Pattern
;
; }
;
	beq     L1159
	cmp     #$01
	jeq     L115A
	cmp     #$02
	jeq     L115B
	cmp     #$03
	jeq     L115C
	cmp     #$04
	jeq     L115D
	cmp     #$05
	jeq     L115E
	cmp     #$06
	jeq     L115F
	cmp     #$07
	jeq     L1160
	jmp     L0CB8
;
; switch (Current_Move){
;
L1159:	lda     _Current_Move
;
; }
;
	beq     L0CBF
	cmp     #$01
	beq     L0CC9
	cmp     #$02
	jeq     L0CD1
	cmp     #$03
	jeq     L0CDB
	jmp     L0CB8
;
; Enemy_Pointer->X -= 2; // go left
;
L0CBF:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X < 0x10){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$10
	jcs     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; if (Enemy_Pointer->count>0x80){
;
L0CC9:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	cmp     #$81
	jcc     L0CB8
;
; Enemy_Pointer->move = 2;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$02
	dey
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->X += 2; // go right
;
L0CD1:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X > 0xe0){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$E1
	jcc     L0CB8
;
; Enemy_Pointer->move = 3;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; if (Enemy_Pointer->count>0x80){
;
L0CDB:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	cmp     #$81
	jcc     L0CB8
;
; Enemy_Pointer->move = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115A:	lda     _Current_Move
;
; }
;
	beq     L0CE8
	cmp     #$01
	beq     L0CF4
	jmp     L0CB8
;
; Enemy_Pointer->Y += 2; // go down
;
L0CE8:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_D;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$08
	ldy     #$00
	sta     (ptr1),y
;
; if (Enemy_Pointer->count > 0x20){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$21
	jcc     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	dey
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y += 2; // go down
;
L0CF4:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->X += 2; // go right
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_DL;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$09
	ldy     #$00
	sta     (ptr1),y
;
; if (Enemy_Pointer->count > 0x15){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$16
	jcc     L0CB8
;
; Enemy_Pointer->move = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	dey
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115B:	lda     _Current_Move
;
; }
;
	beq     L0D05
	cmp     #$01
	beq     L0D11
	jmp     L0CB8
;
; Enemy_Pointer->Y += 2; // go down
;
L0D05:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_D;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$08
	ldy     #$00
	sta     (ptr1),y
;
; if (Enemy_Pointer->count > 0x20){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$21
	jcc     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	dey
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y += 2; // go down
;
L0D11:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->X -= 2; // go left
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_DL;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$09
	ldy     #$00
	sta     (ptr1),y
;
; if (Enemy_Pointer->count > 0x15){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$16
	jcc     L0CB8
;
; Enemy_Pointer->move = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	dey
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115C:	lda     _Current_Move
;
; }
;
	beq     L0D22
	cmp     #$01
	beq     L0D2C
	cmp     #$02
	jeq     L0D36
	cmp     #$03
	jeq     L0D40
	jmp     L0CB8
;
; Enemy_Pointer->X -= 2; // go left
;
L0D22:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X < 0xd0){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$D0
	jcs     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_U;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0C
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y -= 2; // go up
;
L0D2C:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->Y < 0x30){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$30
	jcs     L0CB8
;
; Enemy_Pointer->move = 2;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_L;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0A
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->X -= 2; // go left
;
L0D36:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X < 0x20){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$20
	jcs     L0CB8
;
; Enemy_Pointer->move = 3;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_D;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$08
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y += 2; // go down
;
L0D40:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115D:	lda     _Current_Move
;
; }
;
	beq     L0D49
	cmp     #$01
	beq     L0D53
	cmp     #$02
	jeq     L0D5D
	cmp     #$03
	jeq     L0D67
	jmp     L0CB8
;
; Enemy_Pointer->X += 2; // go right
;
L0D49:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X > 0x20){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$21
	jcc     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_U;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0C
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y -= 2; // go up
;
L0D53:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->Y < 0x30){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$30
	jcs     L0CB8
;
; Enemy_Pointer->move = 2;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_L;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0A
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->X += 2; // go right
;
L0D5D:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X > 0xe0){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$E1
	jcc     L0CB8
;
; Enemy_Pointer->move = 3;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_D;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$08
	ldy     #$00
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y += 2; // go down
;
L0D67:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115E:	lda     _Current_Move
;
; }
;
	beq     L0D70
	cmp     #$01
	beq     L0D7E
	cmp     #$02
	jeq     L0D84
	cmp     #$03
	jeq     L0D92
	jmp     L0CB8
;
; Enemy_Pointer->X += 2; // go right
;
L0D70:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->Y += 2; // go down
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->Y > 0xd0){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$D1
	jcc     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_UL;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0B
	ldy     #$00
	sta     (ptr1),y
;
; Enemy_Pointer->dir = NO_FLIP;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	tya
	iny
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y -= 2; // go up
;
L0D7E:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->X -= 2; // go left
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
;
; break;
;
	jmp     L1167
;
; Enemy_Pointer->X -= 2; // go left
;
L0D84:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->Y += 2; // go down
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->Y > 0xd0){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$D1
	jcc     L0CB8
;
; Enemy_Pointer->move = 3;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$03
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->anime = FLY_UL;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$0B
	ldy     #$00
	sta     (ptr1),y
;
; Enemy_Pointer->dir = H_FLIP;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$40
	iny
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y -= 2; // go up
;
L0D92:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; Enemy_Pointer->X += 2; // go right
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L115F:	lda     _Current_Move
;
; }
;
	beq     L0D9D
	cmp     #$01
	beq     L0DA7
	jmp     L0CB8
;
; Enemy_Pointer->X -= 2; // go left, from right edge
;
L0D9D:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if (Enemy_Pointer->X < 0x81){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$81
	jcs     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0xff;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$FF
	iny
;
; break;
;
	jmp     L1164
;
; temp = (Enemy_Pointer->count >> 3); // now 0-31
;
L0DA7:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	sta     _temp
;
; temp2 = CIRCLE_Y[temp]; 
;
	ldy     _temp
	lda     _CIRCLE_Y,y
	sta     _temp2
;
; Circle_Math();
;
	jsr     _Circle_Math
;
; Enemy_Pointer->Y += temp3;
;
	lda     _Enemy_Pointer
	ldx     _Enemy_Pointer+1
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     _temp3
	jsr     staspidx
;
; temp2 = CIRCLE_X[temp];
;
	ldy     _temp
	lda     _CIRCLE_X,y
	sta     _temp2
;
; Circle_Math();
;
	jsr     _Circle_Math
;
; Enemy_Pointer->X += temp3;
;
	lda     _Enemy_Pointer
	ldx     _Enemy_Pointer+1
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     _temp3
	jsr     staspidx
;
; Enemy_Pointer->dir = CIRCLE_D[temp];
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     _temp
	lda     _CIRCLE_D,y
	ldy     #$01
	sta     (ptr1),y
;
; Enemy_Pointer->anime = CIRCLE_A[temp];
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     _temp
	lda     _CIRCLE_A,y
	ldy     #$00
	sta     (ptr1),y
;
; if (Enemy_Pointer->count == 0xff) {
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$FF
	jne     L0CB8
;
; Enemy_Pointer->move = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	dey
;
; break;
;
	jmp     L1164
;
; switch (Current_Move){
;
L1160:	lda     _Current_Move
;
; }
;
	beq     L0DCB
	cmp     #$01
	jeq     L0DDD
	cmp     #$02
	jeq     L0DE4
	cmp     #$03
	jeq     L0DEC
	jmp     L0CB8
;
; if (Enemy_Pointer->X > hero_ship.X){
;
L0DCB:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     _hero_ship+3
	bcc     L0DCC
	beq     L0DCC
;
; Enemy_Pointer->X -=1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (Enemy_Pointer->X < hero_ship.X){
;
L0DCC:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     _hero_ship+3
	bcs     L0DD0
;
; Enemy_Pointer->X +=1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; Enemy_Pointer->Y +=1;
;
L0DD0:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if (Enemy_Pointer->Y > 0x90){
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$91
	jcc     L0CB8
;
; Enemy_Pointer->move = 1;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$01
	ldy     #$06
	sta     (ptr1),y
;
; Enemy_Pointer->count = 0;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$00
	iny
;
; break;
;
	jmp     L1164
;
; if (Enemy_Pointer->count == 0x20) {
;
L0DDD:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	cmp     #$20
	bne     L0CB8
;
; Enemy_Pointer->move = 2;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$02
	dey
	sta     (ptr1),y
;
; Spawn_Bullet_E();
;
	jsr     _Spawn_Bullet_E
;
; break;
;
	jmp     L0CB8
;
; Enemy_Pointer->Y -=1; // slow, up
;
L0DE4:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (Enemy_Pointer->count == 0x40) Enemy_Pointer->move = 3;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$40
	bne     L0CB8
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     #$03
	dey
;
; break;
;
	jmp     L1164
;
; Enemy_Pointer->Y -=2; // up and off screen
;
L0DEC:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
L1167:	lda     (ptr1),y
	sec
	sbc     #$02
L1164:	sta     (ptr1),y
;
; ++Enemy_Pointer->count;
;
L0CB8:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; Current_Type = Enemy_Pointer->bullet_type;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	sta     _Current_Type
;
; } 
;
	cmp     #$01
	beq     L0DF6
	cmp     #$02
	beq     L0DFE
	cmp     #$03
	beq     L0E06
	cmp     #$04
	jeq     L0E0E
	cmp     #$05
	jeq     L0E13
	cmp     #$06
	jeq     L0E18
	rts
;
; if ((Enemy_Pointer->X == 0x80)||(Enemy_Pointer->X == 0x81)){
;
L0DF6:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	beq     L1161
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$81
	bne     L0DF7
;
; Spawn_Bullet_E();
;
L1161:	jmp     _Spawn_Bullet_E
;
; break;
;
L0DF7:	rts
;
; if ((Enemy_Pointer->X == 0x40)||(Enemy_Pointer->X == 0x41)){
;
L0DFE:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$40
	beq     L1162
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$41
	bne     L0DFF
;
; Spawn_Bullet_E();
;
L1162:	jmp     _Spawn_Bullet_E
;
; break;
;
L0DFF:	rts
;
; if ((Enemy_Pointer->X == 0xc0)||(Enemy_Pointer->X == 0xc1)){
;
L0E06:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$C0
	beq     L1163
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$C1
	bne     L0E07
;
; Spawn_Bullet_E();
;
L1163:	jmp     _Spawn_Bullet_E
;
; break;
;
L0E07:	rts
;
; if (Enemy_Pointer->Y == 0x41) Spawn_Bullet_E();
;
L0E0E:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$41
	bne     L0DF4
	jmp     _Spawn_Bullet_E
;
; if (Enemy_Pointer->count == 0x40) Spawn_Bullet_E();
;
L0E13:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$40
	bne     L0DF4
	jmp     _Spawn_Bullet_E
;
; if (Enemy_Pointer->count == 0xc0) Spawn_Bullet_E();
;
L0E18:	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	cmp     #$C0
	jeq     _Spawn_Bullet_E
;
; }
;
L0DF4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Enemies2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Enemies2: near

.segment	"CODE"

;
; ++Frame_Count2;
;
	inc     _Frame_Count2
;
; if (ENEMY1.delay != 0) --ENEMY1.delay;
;
	lda     _ENEMY1+4
	beq     L1168
	dec     _ENEMY1+4
;
; if (ENEMY2.delay != 0) --ENEMY2.delay;
;
L1168:	lda     _ENEMY2+4
	beq     L1169
	dec     _ENEMY2+4
;
; if (ENEMY3.delay != 0) --ENEMY3.delay;
;
L1169:	lda     _ENEMY3+4
	beq     L116A
	dec     _ENEMY3+4
;
; if (ENEMY4.delay != 0) --ENEMY4.delay;
;
L116A:	lda     _ENEMY4+4
	beq     L116B
	dec     _ENEMY4+4
;
; if (ENEMY5.delay != 0) --ENEMY5.delay;
;
L116B:	lda     _ENEMY5+4
	beq     L116C
	dec     _ENEMY5+4
;
; if (ENEMY6.delay != 0) --ENEMY6.delay;
;
L116C:	lda     _ENEMY6+4
	beq     L116D
	dec     _ENEMY6+4
;
; if (ENEMY7.delay != 0) --ENEMY7.delay;
;
L116D:	lda     _ENEMY7+4
	beq     L116E
	dec     _ENEMY7+4
;
; if (ENEMY8.delay != 0) --ENEMY8.delay;
;
L116E:	lda     _ENEMY8+4
	beq     L116F
	dec     _ENEMY8+4
;
; if ((Frame_Count2 & 3) == 0){
;
L116F:	lda     _Frame_Count2
	and     #$03
	jne     L118F
;
; Draw_Explosion();
;
	jsr     _Draw_Explosion
;
; if (ENEMY1.Y != 0 && ENEMY1.delay == 0){
;
	lda     _ENEMY1+2
	beq     L1173
	lda     _ENEMY1+4
	bne     L1173
;
; Enemy_Pointer = &ENEMY1;
;
	lda     #<(_ENEMY1)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY1)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY2.Y != 0 && ENEMY2.delay == 0){
;
L1173:	lda     _ENEMY2+2
	beq     L1177
	lda     _ENEMY2+4
	bne     L1177
;
; Enemy_Pointer = &ENEMY2;
;
	lda     #<(_ENEMY2)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY2)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY3.Y != 0 && ENEMY3.delay == 0){
;
L1177:	lda     _ENEMY3+2
	beq     L117B
	lda     _ENEMY3+4
	bne     L117B
;
; Enemy_Pointer = &ENEMY3;
;
	lda     #<(_ENEMY3)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY3)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY4.Y != 0 && ENEMY4.delay == 0){
;
L117B:	lda     _ENEMY4+2
	beq     L117F
	lda     _ENEMY4+4
	bne     L117F
;
; Enemy_Pointer = &ENEMY4;
;
	lda     #<(_ENEMY4)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY4)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY5.Y != 0 && ENEMY5.delay == 0){
;
L117F:	lda     _ENEMY5+2
	beq     L1183
	lda     _ENEMY5+4
	bne     L1183
;
; Enemy_Pointer = &ENEMY5;
;
	lda     #<(_ENEMY5)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY5)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY6.Y != 0 && ENEMY6.delay == 0){
;
L1183:	lda     _ENEMY6+2
	beq     L1187
	lda     _ENEMY6+4
	bne     L1187
;
; Enemy_Pointer = &ENEMY6;
;
	lda     #<(_ENEMY6)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY6)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY7.Y != 0 && ENEMY7.delay == 0){
;
L1187:	lda     _ENEMY7+2
	beq     L118B
	lda     _ENEMY7+4
	bne     L118B
;
; Enemy_Pointer = &ENEMY7;
;
	lda     #<(_ENEMY7)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY7)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY8.Y != 0 && ENEMY8.delay == 0){
;
L118B:	lda     _ENEMY8+2
	beq     L05AF
	lda     _ENEMY8+4
	bne     L05AF
;
; Enemy_Pointer = &ENEMY8;
;
	lda     #<(_ENEMY8)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY8)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jmp     _draw_enemies
;
; else if ((Frame_Count2 & 3) == 1){
;
L05AF:	rts
L118F:	lda     _Frame_Count2
	and     #$03
	cmp     #$01
	jne     L11AE
;
; if (ENEMY1.Y != 0 && ENEMY1.delay == 0){
;
	lda     _ENEMY1+2
	beq     L1193
	lda     _ENEMY1+4
	bne     L1193
;
; Enemy_Pointer = &ENEMY1;
;
	lda     #<(_ENEMY1)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY1)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY3.Y != 0 && ENEMY3.delay == 0){
;
L1193:	lda     _ENEMY3+2
	beq     L1197
	lda     _ENEMY3+4
	bne     L1197
;
; Enemy_Pointer = &ENEMY3;
;
	lda     #<(_ENEMY3)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY3)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY5.Y != 0 && ENEMY5.delay == 0){
;
L1197:	lda     _ENEMY5+2
	beq     L119B
	lda     _ENEMY5+4
	bne     L119B
;
; Enemy_Pointer = &ENEMY5;
;
	lda     #<(_ENEMY5)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY5)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY7.Y != 0 && ENEMY7.delay == 0){
;
L119B:	lda     _ENEMY7+2
	beq     L05D4
	lda     _ENEMY7+4
	bne     L05D4
;
; Enemy_Pointer = &ENEMY7;
;
	lda     #<(_ENEMY7)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY7)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; Draw_Explosion();
;
L05D4:	jsr     _Draw_Explosion
;
; if (ENEMY2.Y != 0 && ENEMY2.delay == 0){
;
	lda     _ENEMY2+2
	beq     L11A2
	lda     _ENEMY2+4
	bne     L11A2
;
; Enemy_Pointer = &ENEMY2;
;
	lda     #<(_ENEMY2)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY2)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY4.Y != 0 && ENEMY4.delay == 0){
;
L11A2:	lda     _ENEMY4+2
	beq     L11A6
	lda     _ENEMY4+4
	bne     L11A6
;
; Enemy_Pointer = &ENEMY4;
;
	lda     #<(_ENEMY4)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY4)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY6.Y != 0 && ENEMY6.delay == 0){
;
L11A6:	lda     _ENEMY6+2
	beq     L11AA
	lda     _ENEMY6+4
	bne     L11AA
;
; Enemy_Pointer = &ENEMY6;
;
	lda     #<(_ENEMY6)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY6)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY8.Y != 0 && ENEMY8.delay == 0){
;
L11AA:	lda     _ENEMY8+2
	beq     L05F5
	lda     _ENEMY8+4
	bne     L05F5
;
; Enemy_Pointer = &ENEMY8;
;
	lda     #<(_ENEMY8)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY8)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jmp     _draw_enemies
;
; else if ((Frame_Count2 & 3) == 2){
;
L05F5:	rts
L11AE:	lda     _Frame_Count2
	and     #$03
	cmp     #$02
	jne     L11CE
;
; if (ENEMY8.Y != 0 && ENEMY8.delay == 0){
;
	lda     _ENEMY8+2
	beq     L11B2
	lda     _ENEMY8+4
	bne     L11B2
;
; Enemy_Pointer = &ENEMY8;
;
	lda     #<(_ENEMY8)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY8)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY7.Y != 0 && ENEMY7.delay == 0){
;
L11B2:	lda     _ENEMY7+2
	beq     L11B6
	lda     _ENEMY7+4
	bne     L11B6
;
; Enemy_Pointer = &ENEMY7;
;
	lda     #<(_ENEMY7)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY7)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY6.Y != 0 && ENEMY6.delay == 0){
;
L11B6:	lda     _ENEMY6+2
	beq     L11BA
	lda     _ENEMY6+4
	bne     L11BA
;
; Enemy_Pointer = &ENEMY6;
;
	lda     #<(_ENEMY6)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY6)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY5.Y != 0 && ENEMY5.delay == 0){
;
L11BA:	lda     _ENEMY5+2
	beq     L11BE
	lda     _ENEMY5+4
	bne     L11BE
;
; Enemy_Pointer = &ENEMY5;
;
	lda     #<(_ENEMY5)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY5)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY4.Y != 0 && ENEMY4.delay == 0){
;
L11BE:	lda     _ENEMY4+2
	beq     L11C2
	lda     _ENEMY4+4
	bne     L11C2
;
; Enemy_Pointer = &ENEMY4;
;
	lda     #<(_ENEMY4)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY4)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY3.Y != 0 && ENEMY3.delay == 0){
;
L11C2:	lda     _ENEMY3+2
	beq     L11C6
	lda     _ENEMY3+4
	bne     L11C6
;
; Enemy_Pointer = &ENEMY3;
;
	lda     #<(_ENEMY3)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY3)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY2.Y != 0 && ENEMY2.delay == 0){
;
L11C6:	lda     _ENEMY2+2
	beq     L11CA
	lda     _ENEMY2+4
	bne     L11CA
;
; Enemy_Pointer = &ENEMY2;
;
	lda     #<(_ENEMY2)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY2)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY1.Y != 0 && ENEMY1.delay == 0){
;
L11CA:	lda     _ENEMY1+2
	beq     L063A
	lda     _ENEMY1+4
	bne     L063A
;
; Enemy_Pointer = &ENEMY1;
;
	lda     #<(_ENEMY1)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY1)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; Draw_Explosion();
;
L063A:	jmp     _Draw_Explosion
;
; if (ENEMY8.Y != 0 && ENEMY8.delay == 0){
;
L11CE:	lda     _ENEMY8+2
	beq     L11D2
	lda     _ENEMY8+4
	bne     L11D2
;
; Enemy_Pointer = &ENEMY8;
;
	lda     #<(_ENEMY8)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY8)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY6.Y != 0 && ENEMY6.delay == 0){
;
L11D2:	lda     _ENEMY6+2
	beq     L11D6
	lda     _ENEMY6+4
	bne     L11D6
;
; Enemy_Pointer = &ENEMY6;
;
	lda     #<(_ENEMY6)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY6)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY4.Y != 0 && ENEMY4.delay == 0){
;
L11D6:	lda     _ENEMY4+2
	beq     L11DA
	lda     _ENEMY4+4
	bne     L11DA
;
; Enemy_Pointer = &ENEMY4;
;
	lda     #<(_ENEMY4)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY4)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY2.Y != 0 && ENEMY2.delay == 0){
;
L11DA:	lda     _ENEMY2+2
	beq     L065C
	lda     _ENEMY2+4
	bne     L065C
;
; Enemy_Pointer = &ENEMY2;
;
	lda     #<(_ENEMY2)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY2)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; Draw_Explosion();
;
L065C:	jsr     _Draw_Explosion
;
; if (ENEMY7.Y != 0 && ENEMY7.delay == 0){
;
	lda     _ENEMY7+2
	beq     L11E1
	lda     _ENEMY7+4
	bne     L11E1
;
; Enemy_Pointer = &ENEMY7;
;
	lda     #<(_ENEMY7)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY7)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY5.Y != 0 && ENEMY5.delay == 0){
;
L11E1:	lda     _ENEMY5+2
	beq     L11E5
	lda     _ENEMY5+4
	bne     L11E5
;
; Enemy_Pointer = &ENEMY5;
;
	lda     #<(_ENEMY5)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY5)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY3.Y != 0 && ENEMY3.delay == 0){
;
L11E5:	lda     _ENEMY3+2
	beq     L11E9
	lda     _ENEMY3+4
	bne     L11E9
;
; Enemy_Pointer = &ENEMY3;
;
	lda     #<(_ENEMY3)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY3)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jsr     _draw_enemies
;
; if (ENEMY1.Y != 0 && ENEMY1.delay == 0){
;
L11E9:	lda     _ENEMY1+2
	beq     L11EB
	lda     _ENEMY1+4
	beq     L11EC
L11EB:	rts
;
; Enemy_Pointer = &ENEMY1;
;
L11EC:	lda     #<(_ENEMY1)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY1)
	sta     _Enemy_Pointer+1
;
; Move_Enemies();
;
	jsr     _Move_Enemies
;
; draw_enemies();
;
	jmp     _draw_enemies

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test: near

.segment	"CODE"

;
; objectA_width = 15; // all bullets and enemies assumed to be the same size
;
	lda     #$0F
	sta     _objectA_width
;
; objectB_width = 15;
;
	sta     _objectB_width
;
; objectB_height = 15; 
;
	sta     _objectB_height
;
; objectA_height = 7;
;
	lda     #$07
	sta     _objectA_height
;
; if (hero_bullet1.Y != 0){
;
	lda     _hero_bullet1
	beq     L11ED
;
; objectA_y = hero_bullet1.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet1.X;
;
	lda     _hero_bullet1+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11ED
;
; hero_bullet1.Y = 0;
;
	lda     #$00
	sta     _hero_bullet1
;
; if (hero_bullet2.Y != 0){
;
L11ED:	lda     _hero_bullet2
	beq     L11EE
;
; objectA_y = hero_bullet2.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet2.X;
;
	lda     _hero_bullet2+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11EE
;
; hero_bullet2.Y = 0;
;
	lda     #$00
	sta     _hero_bullet2
;
; if (hero_bullet3.Y != 0){
;
L11EE:	lda     _hero_bullet3
	beq     L11EF
;
; objectA_y = hero_bullet3.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet3.X;
;
	lda     _hero_bullet3+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11EF
;
; hero_bullet3.Y = 0;
;
	lda     #$00
	sta     _hero_bullet3
;
; if (hero_bullet4.Y != 0){
;
L11EF:	lda     _hero_bullet4
	beq     L11F0
;
; objectA_y = hero_bullet4.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet4.X;
;
	lda     _hero_bullet4+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F0
;
; hero_bullet4.Y = 0;
;
	lda     #$00
	sta     _hero_bullet4
;
; if (hero_bullet5.Y != 0){
;
L11F0:	lda     _hero_bullet5
	beq     L11F1
;
; objectA_y = hero_bullet5.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet5.X;
;
	lda     _hero_bullet5+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F1
;
; hero_bullet5.Y = 0;
;
	lda     #$00
	sta     _hero_bullet5
;
; if (hero_bullet6.Y != 0){
;
L11F1:	lda     _hero_bullet6
	beq     L11F2
;
; objectA_y = hero_bullet6.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet6.X;
;
	lda     _hero_bullet6+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F2
;
; hero_bullet6.Y = 0;
;
	lda     #$00
	sta     _hero_bullet6
;
; if (hero_bullet7.Y != 0){
;
L11F2:	lda     _hero_bullet7
	beq     L11F3
;
; objectA_y = hero_bullet7.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet7.X;
;
	lda     _hero_bullet7+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F3
;
; hero_bullet7.Y = 0;
;
	lda     #$00
	sta     _hero_bullet7
;
; if (hero_bullet8.Y != 0){
;
L11F3:	lda     _hero_bullet8
	beq     L0791
;
; objectA_y = hero_bullet8.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet8.X;
;
	lda     _hero_bullet8+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0791
;
; hero_bullet8.Y = 0;
;
	lda     #$00
	sta     _hero_bullet8
;
; }
;
L0791:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test2: near

.segment	"CODE"

;
; objectA_x = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _objectA_x
;
; objectA_y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _objectA_y
;
; objectA_width = 15;
;
	lda     #$0F
	sta     _objectA_width
;
; objectA_height = 15;
;
	sta     _objectA_height
;
; objectB_width = 15; // all the enemy ships assumed to be this size
;
	sta     _objectB_width
;
; objectB_height = 15;
;
	sta     _objectB_height
;
; if (ENEMY1.Y != 0){
;
	lda     _ENEMY1+2
	beq     L11F4
;
; objectB_y = ENEMY1.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY1.X;
;
	lda     _ENEMY1+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F4
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY2.Y != 0){
;
L11F4:	lda     _ENEMY2+2
	beq     L11F5
;
; objectB_y = ENEMY2.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY2.X;
;
	lda     _ENEMY2+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F5
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY3.Y != 0){
;
L11F5:	lda     _ENEMY3+2
	beq     L11F6
;
; objectB_y = ENEMY3.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY3.X;
;
	lda     _ENEMY3+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F6
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY4.Y != 0){
;
L11F6:	lda     _ENEMY4+2
	beq     L11F7
;
; objectB_y = ENEMY4.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY4.X;
;
	lda     _ENEMY4+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F7
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY5.Y != 0){
;
L11F7:	lda     _ENEMY5+2
	beq     L11F8
;
; objectB_y = ENEMY5.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY5.X;
;
	lda     _ENEMY5+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F8
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY6.Y != 0){
;
L11F8:	lda     _ENEMY6+2
	beq     L11F9
;
; objectB_y = ENEMY6.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY6.X;
;
	lda     _ENEMY6+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11F9
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY7.Y != 0){
;
L11F9:	lda     _ENEMY7+2
	beq     L11FA
;
; objectB_y = ENEMY7.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY7.X;
;
	lda     _ENEMY7+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FA
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY8.Y != 0){
;
L11FA:	lda     _ENEMY8+2
	beq     L11FB
;
; objectB_y = ENEMY8.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY8.X;
;
	lda     _ENEMY8+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FB
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; objectB_width = 7; // all the enemy bullets assumed to be this size
;
L11FB:	lda     #$07
	sta     _objectB_width
;
; objectB_height = 7;
;
	sta     _objectB_height
;
; if (enemy_bullet1.Y != 0){
;
	lda     _enemy_bullet1
	beq     L11FC
;
; objectB_y = enemy_bullet1.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet1.X;
;
	lda     _enemy_bullet1+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FC
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet2.Y != 0){
;
L11FC:	lda     _enemy_bullet2
	beq     L11FD
;
; objectB_y = enemy_bullet2.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet2.X;
;
	lda     _enemy_bullet2+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FD
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet3.Y != 0){
;
L11FD:	lda     _enemy_bullet3
	beq     L11FE
;
; objectB_y = enemy_bullet3.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet3.X;
;
	lda     _enemy_bullet3+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FE
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet4.Y != 0){
;
L11FE:	lda     _enemy_bullet4
	beq     L11FF
;
; objectB_y = enemy_bullet4.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet4.X;
;
	lda     _enemy_bullet4+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L11FF
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet5.Y != 0){
;
L11FF:	lda     _enemy_bullet5
	beq     L1200
;
; objectB_y = enemy_bullet5.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet5.X;
;
	lda     _enemy_bullet5+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1200
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet6.Y != 0){
;
L1200:	lda     _enemy_bullet6
	beq     L1201
;
; objectB_y = enemy_bullet6.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet6.X;
;
	lda     _enemy_bullet6+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1201
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet7.Y != 0){
;
L1201:	lda     _enemy_bullet7
	beq     L1202
;
; objectB_y = enemy_bullet7.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet7.X;
;
	lda     _enemy_bullet7+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1202
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet8.Y != 0){
;
L1202:	lda     _enemy_bullet8
	beq     L0870
;
; objectB_y = enemy_bullet8.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet8.X;
;
	lda     _enemy_bullet8+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0870
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; }
;
L0870:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Adjust_Scoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Adjust_Scoreboard: near

.segment	"CODE"

;
; while (Score4 > 9) {
;
	jmp     L0879
;
; ++Score3;
;
L1203:	inc     _Score3
;
; Score4 -= 10;
;
	lda     _Score4
	sec
	sbc     #$0A
	sta     _Score4
;
; while (Score4 > 9) {
;
L0879:	lda     _Score4
	cmp     #$0A
	bcs     L1203
;
; while (Score3 > 9) {
;
	jmp     L1205
;
; ++Score2;
;
L1204:	inc     _Score2
;
; Score3 -= 10;
;
	lda     _Score3
	sec
	sbc     #$0A
	sta     _Score3
;
; while (Score3 > 9) {
;
L1205:	lda     _Score3
	cmp     #$0A
	bcs     L1204
;
; if (Score2 > 9) {
;
	lda     _Score2
	cmp     #$0A
	bcc     L1206
;
; ++Score1;
;
	inc     _Score1
;
; Score2 -= 10;
;
	lda     _Score2
	sec
	sbc     #$0A
	sta     _Score2
;
; if (Score1 > 9) {
;
L1206:	lda     _Score1
	cmp     #$0A
	bcc     L088A
;
; Score4 = 9;
;
	lda     #$09
	sta     _Score4
;
; Score3 = 9;
;
	sta     _Score3
;
; Score2 = 9;
;
	sta     _Score2
;
; Score1 = 9;
;
	sta     _Score1
;
; }
;
L088A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Explosion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Explosion: near

.segment	"CODE"

;
; if (Explode1.Y != 0){
;
	lda     _Explode1+2
	beq     L1207
;
; Draw_Sprites(&Explode1);
;
	lda     #<(_Explode1)
	ldx     #>(_Explode1)
	jsr     _Draw_Sprites
;
; --Explode1.count;
;
	dec     _Explode1+7
;
; if (Explode1.count == 0) Explode1.Y = 0;
;
	lda     _Explode1+7
	bne     L1207
	sta     _Explode1+2
;
; if (Explode2.Y != 0){
;
L1207:	lda     _Explode2+2
	beq     L1208
;
; Draw_Sprites(&Explode2);
;
	lda     #<(_Explode2)
	ldx     #>(_Explode2)
	jsr     _Draw_Sprites
;
; --Explode2.count;
;
	dec     _Explode2+7
;
; if (Explode2.count == 0) Explode2.Y = 0;
;
	lda     _Explode2+7
	bne     L1208
	sta     _Explode2+2
;
; if (Explode3.Y != 0){
;
L1208:	lda     _Explode3+2
	beq     L1209
;
; Draw_Sprites(&Explode3);
;
	lda     #<(_Explode3)
	ldx     #>(_Explode3)
	jsr     _Draw_Sprites
;
; --Explode3.count;
;
	dec     _Explode3+7
;
; if (Explode3.count == 0) Explode3.Y = 0;
;
	lda     _Explode3+7
	bne     L1209
	sta     _Explode3+2
;
; if (Explode4.Y != 0){
;
L1209:	lda     _Explode4+2
	beq     L08B5
;
; Draw_Sprites(&Explode4);
;
	lda     #<(_Explode4)
	ldx     #>(_Explode4)
	jsr     _Draw_Sprites
;
; --Explode4.count;
;
	dec     _Explode4+7
;
; if (Explode4.count == 0) Explode4.Y = 0;
;
	lda     _Explode4+7
	bne     L08B5
	sta     _Explode4+2
;
; }
;
L08B5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Check_Wave_Over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Check_Wave_Over: near

.segment	"CODE"

;
; if ((Init_Wave_Flag == 0) && (Master_Delay == 0 )){
;
	lda     _Init_Wave_Flag
	bne     L120A
	lda     _Master_Delay
	beq     L120B
L120A:	rts
;
; Big_Math = (int)ENEMY1.Y; // Big math = 16 bit
;
L120B:	lda     _ENEMY1+2
	sta     _Big_Math
	lda     #$00
	sta     _Big_Math+1
;
; Big_Math += ENEMY2.Y;
;
	lda     _ENEMY2+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY3.Y;
;
	lda     _ENEMY3+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY4.Y;
;
	lda     _ENEMY4+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY5.Y;
;
	lda     _ENEMY5+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY6.Y;
;
	lda     _ENEMY6+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY7.Y;
;
	lda     _ENEMY7+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; Big_Math += ENEMY8.Y;
;
	lda     _ENEMY8+2
	clc
	adc     _Big_Math
	sta     _Big_Math
	lda     #$00
	adc     _Big_Math+1
	sta     _Big_Math+1
;
; if (Big_Math == 0){ // wave is over
;
	lda     _Big_Math
	ora     _Big_Math+1
	bne     L08F1
;
; Master_Delay = 100; // will trigger new wave, when reaches 0
;
	lda     #$64
	sta     _Master_Delay
;
; }
;
L08F1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Init_New_Wave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Init_New_Wave: near

.segment	"CODE"

;
; if (Wave >= sizeof(Wave_to_Pattern)){
;
	lda     _Wave
	cmp     #$36
;
; Init_Boss_Level();
;
	jcs     _Init_Boss_Level
;
; Pattern = Wave_to_Pattern[Wave];
;
	ldy     _Wave
	lda     _Wave_to_Pattern,y
	sta     _Pattern
;
; p_Wave_Data = All_Wave_Addresses[Wave];
;
	ldx     #$00
	lda     _Wave
	asl     a
	bcc     L120D
	inx
	clc
L120D:	adc     #<(_All_Wave_Addresses)
	sta     ptr1
	txa
	adc     #>(_All_Wave_Addresses)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_Wave_Data+1
	dey
	lda     (ptr1),y
	sta     _p_Wave_Data
;
; memcpy (&ENEMY1, p_Wave_Data, 64); // enemy1 is the start address for all the enemy objects
;
	lda     #<(_ENEMY1)
	ldx     #>(_ENEMY1)
	jsr     pushax
	lda     _p_Wave_Data
	ldx     _p_Wave_Data+1
	jsr     pushax
	ldx     #$00
	lda     #$40
	jsr     _memcpy
;
; ++Wave;
;
	inc     _Wave
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Clear_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Clear_Enemies: near

.segment	"CODE"

;
; ENEMY1.Y = 0;
;
	lda     #$00
	sta     _ENEMY1+2
;
; ENEMY2.Y = 0;
;
	sta     _ENEMY2+2
;
; ENEMY3.Y = 0;
;
	sta     _ENEMY3+2
;
; ENEMY4.Y = 0;
;
	sta     _ENEMY4+2
;
; ENEMY5.Y = 0;
;
	sta     _ENEMY5+2
;
; ENEMY6.Y = 0;
;
	sta     _ENEMY6+2
;
; ENEMY7.Y = 0;
;
	sta     _ENEMY7+2
;
; ENEMY8.Y = 0;
;
	sta     _ENEMY8+2
;
; enemy_bullet1.Y = 0;
;
	sta     _enemy_bullet1
;
; enemy_bullet2.Y = 0;
;
	sta     _enemy_bullet2
;
; enemy_bullet3.Y = 0;
;
	sta     _enemy_bullet3
;
; enemy_bullet4.Y = 0;
;
	sta     _enemy_bullet4
;
; enemy_bullet5.Y = 0;
;
	sta     _enemy_bullet5
;
; enemy_bullet6.Y = 0;
;
	sta     _enemy_bullet6
;
; enemy_bullet7.Y = 0;
;
	sta     _enemy_bullet7
;
; enemy_bullet8.Y = 0;
;
	sta     _enemy_bullet8
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Bullet_E (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Bullet_E: near

.segment	"CODE"

;
; if (Enemy_Pointer->X > hero_ship.X) {
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     _hero_ship+3
	bcc     L120F
	beq     L120F
;
; X_compare = (Enemy_Pointer->X - hero_ship.X);
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     _hero_ship+3
	sta     _X_compare
;
; X_compare >>= 3;
;
	lsr     a
	lsr     a
	lsr     a
	sta     _X_compare
;
; X_compare = (0 - X_compare); 
;
	lda     #$00
	sec
	sbc     _X_compare
;
; else {
;
	jmp     L120E
;
; X_compare = (hero_ship.X - Enemy_Pointer->X);
;
L120F:	lda     _hero_ship+3
	jsr     pusha0
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tossuba0
	sta     _X_compare
;
; X_compare >>= 3;
;
	lsr     a
	lsr     a
	lsr     a
L120E:	sta     _X_compare
;
; if (enemy_bullet1.Y == 0) {
;
	lda     _enemy_bullet1
	bne     L1210
;
; enemy_bullet1.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet1
;
; enemy_bullet1.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet1+4
;
; enemy_bullet1.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet1+2
;
; enemy_bullet1.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet1+3
;
; enemy_bullet1.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet1+6
;
; enemy_bullet1.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet1+7
;
; return;
;
	rts
;
; if (enemy_bullet2.Y == 0) {
;
L1210:	lda     _enemy_bullet2
	bne     L1211
;
; enemy_bullet2.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet2
;
; enemy_bullet2.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet2+4
;
; enemy_bullet2.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet2+2
;
; enemy_bullet2.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet2+3
;
; enemy_bullet2.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet2+6
;
; enemy_bullet2.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet2+7
;
; return;
;
	rts
;
; if (enemy_bullet3.Y == 0) {
;
L1211:	lda     _enemy_bullet3
	bne     L1212
;
; enemy_bullet3.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet3
;
; enemy_bullet3.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet3+4
;
; enemy_bullet3.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet3+2
;
; enemy_bullet3.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet3+3
;
; enemy_bullet3.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet3+6
;
; enemy_bullet3.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet3+7
;
; return;
;
	rts
;
; if (enemy_bullet4.Y == 0) {
;
L1212:	lda     _enemy_bullet4
	bne     L1213
;
; enemy_bullet4.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet4
;
; enemy_bullet4.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet4+4
;
; enemy_bullet4.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet4+2
;
; enemy_bullet4.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet4+3
;
; enemy_bullet4.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet4+6
;
; enemy_bullet4.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet4+7
;
; return;
;
	rts
;
; if (enemy_bullet5.Y == 0) {
;
L1213:	lda     _enemy_bullet5
	bne     L1214
;
; enemy_bullet5.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet5
;
; enemy_bullet5.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet5+4
;
; enemy_bullet5.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet5+2
;
; enemy_bullet5.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet5+3
;
; enemy_bullet5.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet5+6
;
; enemy_bullet5.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet5+7
;
; return;
;
	rts
;
; if (enemy_bullet6.Y == 0) {
;
L1214:	lda     _enemy_bullet6
	bne     L1215
;
; enemy_bullet6.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet6
;
; enemy_bullet6.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet6+4
;
; enemy_bullet6.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet6+2
;
; enemy_bullet6.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet6+3
;
; enemy_bullet6.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet6+6
;
; enemy_bullet6.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet6+7
;
; return;
;
	rts
;
; if (enemy_bullet7.Y == 0) {
;
L1215:	lda     _enemy_bullet7
	bne     L1216
;
; enemy_bullet7.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet7
;
; enemy_bullet7.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet7+4
;
; enemy_bullet7.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet7+2
;
; enemy_bullet7.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet7+3
;
; enemy_bullet7.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet7+6
;
; enemy_bullet7.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet7+7
;
; return;
;
	rts
;
; if (enemy_bullet8.Y == 0) {
;
L1216:	lda     _enemy_bullet8
	bne     L0E9D
;
; enemy_bullet8.Y = Enemy_Pointer->Y + 15;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$0F
	sta     _enemy_bullet8
;
; enemy_bullet8.X = Enemy_Pointer->X + 7;
;
	lda     _Enemy_Pointer
	sta     ptr1
	lda     _Enemy_Pointer+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	clc
	adc     #$07
	sta     _enemy_bullet8+4
;
; enemy_bullet8.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet8+2
;
; enemy_bullet8.attrib = 1;
;
	lda     #$01
	sta     _enemy_bullet8+3
;
; enemy_bullet8.Y_speed = 0x20;
;
	lda     #$20
	sta     _enemy_bullet8+6
;
; enemy_bullet8.X_speed = X_compare;
;
	lda     _X_compare
	sta     _enemy_bullet8+7
;
; }
;
L0E9D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Init_Boss_Level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Init_Boss_Level: near

.segment	"CODE"

;
; Game_Mode = BOSS_MODE;
;
	lda     #$05
	sta     _Game_Mode
;
; Clear_Enemies();
;
	jsr     _Clear_Enemies
;
; BOSS.anime = BOSS1;
;
	lda     #$11
	sta     _BOSS
;
; BOSS.dir = 0;
;
	lda     #$00
	sta     _BOSS+1
;
; BOSS.X = 0x60;
;
	lda     #$60
	sta     _BOSS+3
;
; BOSS.Y = 0x50;
;
	lda     #$50
	sta     _BOSS+2
;
; BOSS_health = 100;
;
	lda     #$64
	sta     _BOSS_health
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test3: near

.segment	"CODE"

;
; objectA_x = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _objectA_x
;
; objectA_y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _objectA_y
;
; objectA_width = 15;
;
	lda     #$0F
	sta     _objectA_width
;
; objectA_height = 15;
;
	sta     _objectA_height
;
; objectB_y = BOSS.Y;
;
	lda     _BOSS+2
	sta     _objectB_y
;
; objectB_x = BOSS.X;
;
	lda     _BOSS+3
	sta     _objectB_x
;
; objectB_width = 47; // Boss size
;
	lda     #$2F
	sta     _objectB_width
;
; objectB_height = 39;
;
	lda     #$27
	sta     _objectB_height
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1217
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; objectB_width = 7; // Laser Size
;
L1217:	lda     #$07
	sta     _objectB_width
;
; objectB_height = 15;
;
	lda     #$0F
	sta     _objectB_height
;
; if (LASER1.Y != 0){
;
	lda     _LASER1+2
	beq     L1218
;
; objectB_y = LASER1.Y;
;
	sta     _objectB_y
;
; objectB_x = LASER1.X;
;
	lda     _LASER1+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1218
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (LASER2.Y != 0){
;
L1218:	lda     _LASER2+2
	beq     L1219
;
; objectB_y = LASER2.Y;
;
	sta     _objectB_y
;
; objectB_x = LASER2.X;
;
	lda     _LASER2+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1219
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (LASER3.Y != 0){
;
L1219:	lda     _LASER3+2
	beq     L121A
;
; objectB_y = LASER3.Y;
;
	sta     _objectB_y
;
; objectB_x = LASER3.X;
;
	lda     _LASER3+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121A
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (LASER4.Y != 0){
;
L121A:	lda     _LASER4+2
	beq     L0F50
;
; objectB_y = LASER4.Y;
;
	sta     _objectB_y
;
; objectB_x = LASER4.X;
;
	lda     _LASER4+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0F50
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; }
;
L0F50:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test4 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test4: near

.segment	"CODE"

;
; objectA_width = 15; // all bullets
;
	lda     #$0F
	sta     _objectA_width
;
; objectA_height = 7;
;
	lda     #$07
	sta     _objectA_height
;
; objectB_width = 47; // boss
;
	lda     #$2F
	sta     _objectB_width
;
; objectB_height = 39; 
;
	lda     #$27
	sta     _objectB_height
;
; objectB_y = BOSS.Y;
;
	lda     _BOSS+2
	sta     _objectB_y
;
; objectB_x = BOSS.X;
;
	lda     _BOSS+3
	sta     _objectB_x
;
; BOSS_health_test = BOSS_health; // test later, see if passed zero
;
	lda     _BOSS_health
	sta     _BOSS_health_test
;
; if (hero_bullet1.Y != 0){
;
	lda     _hero_bullet1
	beq     L121B
;
; objectA_y = hero_bullet1.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet1.X;
;
	lda     _hero_bullet1+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121B
;
; hero_bullet1.Y = 0;
;
	lda     #$00
	sta     _hero_bullet1
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet2.Y != 0){
;
L121B:	lda     _hero_bullet2
	beq     L121C
;
; objectA_y = hero_bullet2.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet2.X;
;
	lda     _hero_bullet2+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121C
;
; hero_bullet2.Y = 0;
;
	lda     #$00
	sta     _hero_bullet2
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet3.Y != 0){
;
L121C:	lda     _hero_bullet3
	beq     L121D
;
; objectA_y = hero_bullet3.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet3.X;
;
	lda     _hero_bullet3+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121D
;
; hero_bullet3.Y = 0;
;
	lda     #$00
	sta     _hero_bullet3
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet4.Y != 0){
;
L121D:	lda     _hero_bullet4
	beq     L121E
;
; objectA_y = hero_bullet4.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet4.X;
;
	lda     _hero_bullet4+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121E
;
; hero_bullet4.Y = 0;
;
	lda     #$00
	sta     _hero_bullet4
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet5.Y != 0){
;
L121E:	lda     _hero_bullet5
	beq     L121F
;
; objectA_y = hero_bullet5.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet5.X;
;
	lda     _hero_bullet5+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L121F
;
; hero_bullet5.Y = 0;
;
	lda     #$00
	sta     _hero_bullet5
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet6.Y != 0){
;
L121F:	lda     _hero_bullet6
	beq     L1220
;
; objectA_y = hero_bullet6.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet6.X;
;
	lda     _hero_bullet6+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1220
;
; hero_bullet6.Y = 0;
;
	lda     #$00
	sta     _hero_bullet6
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet7.Y != 0){
;
L1220:	lda     _hero_bullet7
	beq     L1221
;
; objectA_y = hero_bullet7.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet7.X;
;
	lda     _hero_bullet7+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1221
;
; hero_bullet7.Y = 0;
;
	lda     #$00
	sta     _hero_bullet7
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (hero_bullet8.Y != 0){
;
L1221:	lda     _hero_bullet8
	beq     L1222
;
; objectA_y = hero_bullet8.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet8.X;
;
	lda     _hero_bullet8+4
	sta     _objectA_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L1222
;
; hero_bullet8.Y = 0;
;
	lda     #$00
	sta     _hero_bullet8
;
; --BOSS_health;
;
	dec     _BOSS_health
;
; if (BOSS_health > BOSS_health_test) {  // killed the boss
;
L1222:	lda     _BOSS_health
	sec
	sbc     _BOSS_health_test
	bcc     L0FC5
	beq     L0FC5
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; SHAKE_AND_BLINK();
;
	jsr     _SHAKE_AND_BLINK
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Reset_Music(); // note, this is famitone init, and I added the music data address. see famitone2.s
;
	jsr     _Reset_Music
;
; APU_CTRL = 0x1f; // all sound channels back on
;
	lda     #$1F
	sta     $4015
;
; Play_Fx(SILENCE); // I was getting a bug, sound effect was replaying
;
	lda     #$04
	jsr     _Play_Fx
;
; song = SONG_VICTORY;
;
	lda     #$04
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = VICTORY_MODE;
;
	lda     #$04
	sta     _Game_Mode
;
; Score2 += 2;
;
	lda     #$02
	clc
	adc     _Score2
	sta     _Score2
;
; Adjust_Scoreboard();
;
	jmp     _Adjust_Scoreboard
;
; }
;
L0FC5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Move_Boss (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Move_Boss: near

.segment	"CODE"

;
; ++BOSS.count;
;
	inc     _BOSS+7
;
; switch (BOSS.move){
;
	lda     _BOSS+6
;
; }
;
	beq     L1227
	cmp     #$01
	beq     L122B
	cmp     #$02
	beq     L122C
	cmp     #$03
	jeq     L1230
	cmp     #$04
	jeq     L1231
	cmp     #$05
	jeq     L1233
	cmp     #$06
	jeq     L1234
	cmp     #$07
	jeq     L1235
	jmp     L0FDF
;
; --BOSS.X;
;
L1227:	dec     _BOSS+3
;
; if ((BOSS.count == 40)||(BOSS.count == 150)){ // about every 2 seconds, 128 frames, shoot
;
	lda     _BOSS+7
	cmp     #$28
	beq     L1228
	cmp     #$96
	bne     L1229
;
; Spawn_Lasers();
;
L1228:	jsr     _Spawn_Lasers
;
; BOSS_eyes = 8;
;
	lda     #$08
	sta     _BOSS_eyes
;
; if (BOSS_eyes !=0) {
;
L1229:	lda     _BOSS_eyes
	beq     L122A
;
; --BOSS_eyes;
;
	dec     _BOSS_eyes
;
; BOSS.anime = BOSS2;
;
	lda     #$12
;
; else {
;
	jmp     L1223
;
; BOSS.anime = BOSS1;
;
L122A:	lda     #$11
L1223:	sta     _BOSS
;
; if (BOSS.X < 8) {
;
	lda     _BOSS+3
	cmp     #$08
	jcs     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
;
; break;
;
	jmp     L1224
;
; BOSS.anime = BOSS2; // eyes
;
L122B:	lda     #$12
	sta     _BOSS
;
; if (BOSS.count > 10){
;
	lda     _BOSS+7
	cmp     #$0B
	jcc     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
	sta     _BOSS+7
;
; Spawn_Lasers();
;
	jsr     _Spawn_Lasers
;
; break;
;
	jmp     L0FDF
;
; ++BOSS.X;
;
L122C:	inc     _BOSS+3
;
; if ((BOSS.count == 40)||(BOSS.count == 150)){ // about every 2 seconds, 128 frames, shoot
;
	lda     _BOSS+7
	cmp     #$28
	beq     L122D
	cmp     #$96
	bne     L122E
;
; Spawn_Lasers();
;
L122D:	jsr     _Spawn_Lasers
;
; BOSS_eyes = 8;
;
	lda     #$08
	sta     _BOSS_eyes
;
; if (BOSS_eyes !=0) {
;
L122E:	lda     _BOSS_eyes
	beq     L122F
;
; --BOSS_eyes;
;
	dec     _BOSS_eyes
;
; BOSS.anime = BOSS2;
;
	lda     #$12
;
; else {
;
	jmp     L1225
;
; BOSS.anime = BOSS1;
;
L122F:	lda     #$11
L1225:	sta     _BOSS
;
; if (BOSS.X > 200) {
;
	lda     _BOSS+3
	cmp     #$C9
	jcc     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
;
; break;
;
	jmp     L1224
;
; BOSS.anime = BOSS2;
;
L1230:	lda     #$12
	sta     _BOSS
;
; if (BOSS.count > 10){
;
	lda     _BOSS+7
	cmp     #$0B
	jcc     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
	sta     _BOSS+7
;
; Spawn_Lasers();
;
	jsr     _Spawn_Lasers
;
; break;
;
	jmp     L0FDF
;
; BOSS.anime = BOSS1;
;
L1231:	lda     #$11
	sta     _BOSS
;
; --BOSS.X;
;
	dec     _BOSS+3
;
; if (((BOSS.X+16) < hero_ship.X)||(BOSS.X < 10)) {
;
	ldx     #$00
	lda     _BOSS+3
	clc
	adc     #$10
	bcc     L102D
	inx
L102D:	cmp     _hero_ship+3
	txa
	sbc     #$00
	bcc     L1232
	lda     _BOSS+3
	cmp     #$0A
	bcs     L0FDF
;
; ++BOSS.move;
;
L1232:	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
;
; break;
;
	jmp     L1224
;
; BOSS.anime = BOSS2;
;
L1233:	lda     #$12
	sta     _BOSS
;
; if (BOSS.count > 10){
;
	lda     _BOSS+7
	cmp     #$0B
	bcc     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
;
; break;
;
	jmp     L1224
;
; BOSS.anime = BOSS1;
;
L1234:	lda     #$11
	sta     _BOSS
;
; BOSS.Y += 2;
;
	lda     #$02
	clc
	adc     _BOSS+2
	sta     _BOSS+2
;
; if (BOSS.Y > 190) {
;
	cmp     #$BF
	bcc     L0FDF
;
; ++BOSS.move;
;
	inc     _BOSS+6
;
; BOSS.count = 0;
;
	lda     #$00
;
; break;
;
	jmp     L1224
;
; --BOSS.Y;
;
L1235:	dec     _BOSS+2
;
; if (BOSS.count == 60){ // about every 2 seconds, 128 frames, shoot
;
	lda     _BOSS+7
	cmp     #$3C
	bne     L1236
;
; Spawn_Lasers();
;
	jsr     _Spawn_Lasers
;
; BOSS_eyes = 8;
;
	lda     #$08
	sta     _BOSS_eyes
;
; if (BOSS_eyes !=0) {
;
L1236:	lda     _BOSS_eyes
	beq     L1237
;
; --BOSS_eyes;
;
	dec     _BOSS_eyes
;
; BOSS.anime = BOSS2;
;
	lda     #$12
;
; else {
;
	jmp     L1226
;
; BOSS.anime = BOSS1;
;
L1237:	lda     #$11
L1226:	sta     _BOSS
;
; if (BOSS.Y == 0x50) {
;
	lda     _BOSS+2
	cmp     #$50
	bne     L0FDF
;
; BOSS.move = 0;
;
	lda     #$00
	sta     _BOSS+6
;
; BOSS.count = 0;
;
L1224:	sta     _BOSS+7
;
; Draw_Sprites(&BOSS);
;
L0FDF:	lda     #<(_BOSS)
	ldx     #>(_BOSS)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Check_Injury (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Check_Injury: near

.segment	"CODE"

;
; if (injury_Timer == 0){
;
	lda     _injury_Timer
	bne     L1239
;
; if (invincible == 0){
;
	lda     _invincible
	bne     L123A
;
; if (Game_Mode == RUN_GAME_MODE){
;
	lda     _Game_Mode
	cmp     #$01
	bne     L1238
;
; collision_Test2(); // get injured
;
	jsr     _collision_Test2
;
; else if (Game_Mode == BOSS_MODE){
;
	jmp     L123A
L1238:	lda     _Game_Mode
	cmp     #$05
	bne     L123A
;
; collision_Test3(); // get injured
;
	jsr     _collision_Test3
;
; else {
;
	jmp     L123A
;
; joypad1 = 0;
;
L1239:	lda     #$00
	sta     _joypad1
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; if (injury_Timer == 100) {
;
	lda     _injury_Timer
	cmp     #$64
	bne     L123A
;
; injury_Timer = 0;
;
	lda     #$00
	sta     _injury_Timer
;
; invincible = 30;
;
	lda     #$1E
	sta     _invincible
;
; if (invincible != 0)
;
L123A:	lda     _invincible
	beq     L123B
;
; --invincible;
;
	dec     _invincible
;
; if (Lives == 0xff){
;
L123B:	lda     _Lives
	cmp     #$FF
	bne     L0369
;
; ++Death_Flag; // wait a little before entering death mode
;
	inc     _Death_Flag
;
; Lives = 0;
;
	lda     #$00
	sta     _Lives
;
; } 
;
L0369:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Lasers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Lasers: near

.segment	"CODE"

;
; if (LASER1.Y == 0){
;
	lda     _LASER1+2
	bne     L123C
;
; LASER1.anime = LASER;
;
	lda     #$13
	sta     _LASER1
;
; LASER1.dir = 0;
;
	lda     #$00
	sta     _LASER1+1
;
; LASER1.X = BOSS.X + 15;
;
	lda     _BOSS+3
	clc
	adc     #$0F
	sta     _LASER1+3
;
; LASER1.Y = BOSS.Y + 16;
;
	lda     _BOSS+2
	clc
	adc     #$10
	sta     _LASER1+2
;
; LASER2.anime = LASER;
;
	lda     #$13
	sta     _LASER2
;
; LASER2.dir = 0;
;
	lda     #$00
	sta     _LASER2+1
;
; LASER2.X = BOSS.X + 38;
;
	lda     _BOSS+3
	clc
	adc     #$26
	sta     _LASER2+3
;
; LASER2.Y = BOSS.Y + 16;
;
	lda     _BOSS+2
	clc
	adc     #$10
	sta     _LASER2+2
;
; Play_Fx(SOUND_LASER);
;
	lda     #$01
	jmp     _Play_Fx
;
; if (LASER3.Y == 0){
;
L123C:	lda     _LASER3+2
	bne     L1078
;
; LASER3.anime = LASER;
;
	lda     #$13
	sta     _LASER3
;
; LASER3.dir = 0;
;
	lda     #$00
	sta     _LASER3+1
;
; LASER3.X = BOSS.X + 15;
;
	lda     _BOSS+3
	clc
	adc     #$0F
	sta     _LASER3+3
;
; LASER3.Y = BOSS.Y + 16;
;
	lda     _BOSS+2
	clc
	adc     #$10
	sta     _LASER3+2
;
; LASER4.anime = LASER;
;
	lda     #$13
	sta     _LASER4
;
; LASER4.dir = 0;
;
	lda     #$00
	sta     _LASER4+1
;
; LASER4.X = BOSS.X + 38;
;
	lda     _BOSS+3
	clc
	adc     #$26
	sta     _LASER4+3
;
; LASER4.Y = BOSS.Y + 16;
;
	lda     _BOSS+2
	clc
	adc     #$10
	sta     _LASER4+2
;
; Play_Fx(SOUND_LASER);
;
	lda     #$01
	jmp     _Play_Fx
;
; }
;
L1078:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Move_Lasers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Move_Lasers: near

.segment	"CODE"

;
; if (LASER1.Y != 0) {
;
	lda     _LASER1+2
	beq     L1242
;
; LASER1.Y += 2;
;
	lda     #$02
	clc
	adc     _LASER1+2
	sta     _LASER1+2
;
; if ((Frame_Count&3)==0){
;
	lda     _Frame_Count
	and     #$03
	bne     L109D
;
; if (LASER1.X > hero_ship.X) --LASER1.X;
;
	lda     _LASER1+3
	sec
	sbc     _hero_ship+3
	bcc     L1241
	beq     L1241
	dec     _LASER1+3
;
; else if (LASER1.X < hero_ship.X) ++LASER1.X;
;
	jmp     L109D
L1241:	lda     _LASER1+3
	cmp     _hero_ship+3
	bcs     L109D
	inc     _LASER1+3
;
; Draw_Sprites(&LASER1);
;
L109D:	lda     #<(_LASER1)
	ldx     #>(_LASER1)
	jsr     _Draw_Sprites
;
; if (LASER1.Y > 240) {
;
L1242:	lda     _LASER1+2
	cmp     #$F1
	bcc     L1243
;
; LASER1.Y = 0;
;
	lda     #$00
	sta     _LASER1+2
;
; if (LASER2.Y != 0) {
;
L1243:	lda     _LASER2+2
	beq     L1245
;
; LASER2.Y += 2;
;
	lda     #$02
	clc
	adc     _LASER2+2
	sta     _LASER2+2
;
; if ((Frame_Count&3)==0){
;
	lda     _Frame_Count
	and     #$03
	bne     L10B2
;
; if (LASER2.X > hero_ship.X) --LASER2.X;
;
	lda     _LASER2+3
	sec
	sbc     _hero_ship+3
	bcc     L1244
	beq     L1244
	dec     _LASER2+3
;
; else if (LASER2.X < hero_ship.X) ++LASER2.X;
;
	jmp     L10B2
L1244:	lda     _LASER2+3
	cmp     _hero_ship+3
	bcs     L10B2
	inc     _LASER2+3
;
; Draw_Sprites(&LASER2);
;
L10B2:	lda     #<(_LASER2)
	ldx     #>(_LASER2)
	jsr     _Draw_Sprites
;
; if (LASER2.Y > 240) {
;
L1245:	lda     _LASER2+2
	cmp     #$F1
	bcc     L1246
;
; LASER2.Y = 0;
;
	lda     #$00
	sta     _LASER2+2
;
; if (LASER3.Y != 0) {
;
L1246:	lda     _LASER3+2
	beq     L1248
;
; LASER3.Y += 2;
;
	lda     #$02
	clc
	adc     _LASER3+2
	sta     _LASER3+2
;
; if ((Frame_Count&3)==0){
;
	lda     _Frame_Count
	and     #$03
	bne     L10C7
;
; if (LASER3.X > hero_ship.X) --LASER3.X;
;
	lda     _LASER3+3
	sec
	sbc     _hero_ship+3
	bcc     L1247
	beq     L1247
	dec     _LASER3+3
;
; else if (LASER3.X < hero_ship.X) ++LASER3.X;
;
	jmp     L10C7
L1247:	lda     _LASER3+3
	cmp     _hero_ship+3
	bcs     L10C7
	inc     _LASER3+3
;
; Draw_Sprites(&LASER3);
;
L10C7:	lda     #<(_LASER3)
	ldx     #>(_LASER3)
	jsr     _Draw_Sprites
;
; if (LASER3.Y > 240) {
;
L1248:	lda     _LASER3+2
	cmp     #$F1
	bcc     L1249
;
; LASER3.Y = 0;
;
	lda     #$00
	sta     _LASER3+2
;
; if (LASER4.Y != 0) {
;
L1249:	lda     _LASER4+2
	beq     L124B
;
; LASER4.Y += 2;
;
	lda     #$02
	clc
	adc     _LASER4+2
	sta     _LASER4+2
;
; if ((Frame_Count&3)==0){
;
	lda     _Frame_Count
	and     #$03
	bne     L10DC
;
; if (LASER4.X > hero_ship.X) --LASER4.X;
;
	lda     _LASER4+3
	sec
	sbc     _hero_ship+3
	bcc     L124A
	beq     L124A
	dec     _LASER4+3
;
; else if (LASER4.X < hero_ship.X) ++LASER4.X;
;
	jmp     L10DC
L124A:	lda     _LASER4+3
	cmp     _hero_ship+3
	bcs     L10DC
	inc     _LASER4+3
;
; Draw_Sprites(&LASER4);
;
L10DC:	lda     #<(_LASER4)
	ldx     #>(_LASER4)
	jsr     _Draw_Sprites
;
; if (LASER4.Y > 240) {
;
L124B:	lda     _LASER4+2
	cmp     #$F1
	bcc     L10E1
;
; LASER4.Y = 0;
;
	lda     #$00
	sta     _LASER4+2
;
; }
;
L10E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ SHAKE_AND_BLINK (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SHAKE_AND_BLINK: near

.segment	"CODE"

;
; Shake_Timer_1 = 0;
;
	lda     #$00
	sta     _Shake_Timer_1
;
; Shake_Timer_2 = 0;
;
	sta     _Shake_Timer_2
;
; Play_Fx(SOUND_BIG_BOOM);
;
	lda     #$03
	jsr     _Play_Fx
;
; APU_CTRL = 8; // only allow noise channel
;
	lda     #$08
	sta     $4015
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while(Shake_Timer_2 == 0){
;
	jmp     L1252
;
; while (NMI_flag == 0); // wait till v-blank
;
L124D:	lda     _NMI_flag
	beq     L124D
;
; Flag_Blink_Boss = 1;
;
	lda     #$01
	sta     _Flag_Blink_Boss
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Draw_Sprites(&BOSS);
;
	lda     #<(_BOSS)
	ldx     #>(_BOSS)
	jsr     _Draw_Sprites
;
; Music_Update();
;
	jsr     _Music_Update
;
; Adjust_Scoreboard();
;
	jsr     _Adjust_Scoreboard
;
; ++Shake_Timer_1;
;
	inc     _Shake_Timer_1
;
; if (Shake_Timer_1 == 0) ++Shake_Timer_2;
;
	bne     L124E
	inc     _Shake_Timer_2
;
; if ((Shake_Timer_1&0x3f) == 0) {
;
L124E:	lda     _Shake_Timer_1
	and     #$3F
	bne     L124F
;
; if (Shake_Timer_1 < 0xb0){
;
	lda     _Shake_Timer_1
	cmp     #$B0
	bcs     L124F
;
; Play_Fx(SOUND_BIG_BOOM);
;
	lda     #$03
	jsr     _Play_Fx
;
; if ((Shake_Timer_1&0x05) == 0){
;
L124F:	lda     _Shake_Timer_1
	and     #$05
	bne     L1250
;
; ++BOSS.X;
;
	inc     _BOSS+3
;
; else if ((Shake_Timer_1&0x05) == 0x04){
;
	jmp     L1253
L1250:	lda     _Shake_Timer_1
	and     #$05
	cmp     #$04
	bne     L1251
;
; --BOSS.X;
;
	dec     _BOSS+3
;
; NMI_flag = 0;
;
L1251:	lda     #$00
L1253:	sta     _NMI_flag
;
; temp = BOSS_BLINK[((Shake_Timer_1&0x0c)>>2)];
;
	lda     _Shake_Timer_1
	and     #$0C
	lsr     a
	lsr     a
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_BOSS_BLINK)
	sta     ptr1+1
	ldy     #<(_BOSS_BLINK)
	lda     (ptr1),y
	sta     _temp
;
; while(Shake_Timer_2 == 0){
;
L1252:	lda     _Shake_Timer_2
	beq     L124D
;
; Flag_Blink_Boss = 0;
;
	lda     #$00
	sta     _Flag_Blink_Boss
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Keep_Loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Keep_Loop: near

.segment	"CODE"

;
; while (NMI_flag == 0); // wait till NMI
;
L1255:	lda     _NMI_flag
	beq     L1255
;
; if (Selection == 0) {
;
	lda     _Selection
	bne     L1256
;
; SPRITES[0] = 0x57;
;
	lda     #$57
;
; else SPRITES[0] = 0x67;
;
	jmp     L1254
L1256:	lda     #$67
L1254:	sta     _SPRITES
;
; SPRITES[1] = 0x0d;
;
	lda     #$0D
	sta     _SPRITES+1
;
; SPRITES[2] = 0x00;
;
	lda     #$00
	sta     _SPRITES+2
;
; SPRITES[3] = 0x50;
;
	lda     #$50
	sta     _SPRITES+3
;
; Get_Input();
;
	jsr     _Get_Input
;
; if ((joypad1old & UP) != 0) Selection = 0; // yes
;
	lda     _joypad1old
	and     #$08
	beq     L1257
	lda     #$00
	sta     _Selection
;
; if ((joypad1old & DOWN) != 0) Selection = 1; // no
;
L1257:	lda     _joypad1old
	and     #$04
	beq     L1258
	lda     #$01
	sta     _Selection
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
L1258:	lda     _joypad1old
	and     #$10
	bne     L034B
	lda     _joypad1
	and     #$10
	beq     L034B
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0); // wait till v-blank
;
L125B:	lda     _NMI_flag
	beq     L125B
;
; if (Selection == 0){
;
	lda     _Selection
	bne     L0348
;
; Reset_Keep_Score();
;
	jsr     _Reset_Keep_Score
;
; else {
;
	jmp     L034B
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
L0348:	jsr     _Reset
;
; Music_Update();
;
L034B:	jsr     _Music_Update
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (1){ // infinite loop
;
	jmp     L1255

.endproc

; ---------------------------------------------------------------
; void __near__ Randomly_Shoot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Randomly_Shoot: near

.segment	"CODE"

;
; if (Frame_Count2 == 0){
;
	lda     _Frame_Count2
	beq     L127B
;
; }
;
	rts
;
; if ((ENEMY1.Y != 0)&&(ENEMY1.Y<0x80)){
;
L127B:	lda     _ENEMY1+2
	beq     L125F
	cmp     #$80
	bcs     L125F
;
; Enemy_Pointer = &ENEMY1;
;
	lda     #<(_ENEMY1)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY1)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY2.Y != 0)&&(ENEMY2.Y<0x80)){
;
L125F:	lda     _ENEMY2+2
	beq     L1263
	cmp     #$80
	bcs     L1263
;
; Enemy_Pointer = &ENEMY2;
;
	lda     #<(_ENEMY2)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY2)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY3.Y != 0)&&(ENEMY3.Y<0x80)){
;
L1263:	lda     _ENEMY3+2
	beq     L1267
	cmp     #$80
	bcs     L1267
;
; Enemy_Pointer = &ENEMY3;
;
	lda     #<(_ENEMY3)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY3)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY4.Y != 0)&&(ENEMY4.Y<0x80)){
;
L1267:	lda     _ENEMY4+2
	beq     L126B
	cmp     #$80
	bcs     L126B
;
; Enemy_Pointer = &ENEMY4;
;
	lda     #<(_ENEMY4)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY4)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY5.Y != 0)&&(ENEMY5.Y<0x80)){
;
L126B:	lda     _ENEMY5+2
	beq     L126F
	cmp     #$80
	bcs     L126F
;
; Enemy_Pointer = &ENEMY5;
;
	lda     #<(_ENEMY5)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY5)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY6.Y != 0)&&(ENEMY6.Y<0x80)){
;
L126F:	lda     _ENEMY6+2
	beq     L1273
	cmp     #$80
	bcs     L1273
;
; Enemy_Pointer = &ENEMY6;
;
	lda     #<(_ENEMY6)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY6)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY7.Y != 0)&&(ENEMY7.Y<0x80)){
;
L1273:	lda     _ENEMY7+2
	beq     L1277
	cmp     #$80
	bcs     L1277
;
; Enemy_Pointer = &ENEMY7;
;
	lda     #<(_ENEMY7)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY7)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E
;
; if ((ENEMY8.Y != 0)&&(ENEMY8.Y<0x80)){
;
L1277:	lda     _ENEMY8+2
	beq     L1279
	cmp     #$80
	bcc     L127A
L1279:	rts
;
; Enemy_Pointer = &ENEMY8;
;
L127A:	lda     #<(_ENEMY8)
	sta     _Enemy_Pointer
	lda     #>(_ENEMY8)
	sta     _Enemy_Pointer+1
;
; Spawn_Bullet_E();
;
	jmp     _Spawn_Bullet_E

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; joypad1 = 0xff; // fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Reset_Music(); // note, this is famitone init, and I added the music data address. see famitone2.s
;
	jsr     _Reset_Music
;
; Play_Music(song);
;
	lda     _song
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
	jmp     L1280
;
; while (NMI_flag == 0); // wait till v-blank
;
L127C:	lda     _NMI_flag
	beq     L127C
;
; Rotate_Palette();
;
	jsr     _Rotate_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Get_Input();
;
	jsr     _Get_Input
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L01E0
	lda     _joypad1
	and     #$10
	beq     L01E0
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0); // wait till v-blank
;
L127F:	lda     _NMI_flag
	beq     L127F
;
; All_Off();
;
	jsr     _All_Off
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; hero_ship.X = 0x78; // starting point
;
	lda     #$78
	sta     _hero_ship+3
;
; hero_ship.Y = 0xd0; // bottom of screen
;
	lda     #$D0
	sta     _hero_ship+2
;
; Wave = 0;
;
	lda     #$00
	sta     _Wave
;
; Master_Delay = 50;
;
	lda     #$32
	sta     _Master_Delay
;
; Clear_Enemies();
;
	jsr     _Clear_Enemies
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; PPU_CTRL = 0x91;
;
	lda     #$91
	sta     $2000
;
; Music_Update();
;
L01E0:	jsr     _Music_Update
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
L1280:	lda     _Game_Mode
	beq     L127C
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
	jmp     L128A
;
; while (NMI_flag == 0); // wait till v-blank
;
L1281:	lda     _NMI_flag
	beq     L1281
;
; Get_Input();
;
	jsr     _Get_Input
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; if (Master_Delay != 0){
;
	lda     _Master_Delay
	beq     L1282
;
; --Master_Delay;
;
	dec     _Master_Delay
;
; if (Master_Delay == 0){
;
	bne     L1282
;
; ++Init_Wave_Flag;
;
	inc     _Init_Wave_Flag
;
; if (Init_Wave_Flag != 0) {
;
L1282:	lda     _Init_Wave_Flag
	beq     L021B
;
; Init_Wave_Flag = 0;
;
	lda     #$00
	sta     _Init_Wave_Flag
;
; Init_New_Wave();
;
	jsr     _Init_New_Wave
;
; Check_Wave_Over();
;
L021B:	jsr     _Check_Wave_Over
;
; if (injury_Timer == 0){
;
	lda     _injury_Timer
	bne     L0221
;
; shooting();
;
	jsr     _shooting
;
; Check_Injury();
;
L0221:	jsr     _Check_Injury
;
; move_logic();
;
	jsr     _move_logic
;
; collision_Test(); // hit enemy
;
	jsr     _collision_Test
;
; Randomly_Shoot(); // a second enemy shooting function
;
	jsr     _Randomly_Shoot
;
; Draw_Bullets(); // and move them
;
	jsr     _Draw_Bullets
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Draw_Enemies2(); // and move them
;
	jsr     _Draw_Enemies2
;
; Set_Sprite_Zero(); // redundant...just double checking
;
	jsr     _Set_Sprite_Zero
;
; Music_Update();
;
	jsr     _Music_Update
;
; Adjust_Scoreboard();
;
	jsr     _Adjust_Scoreboard
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // start Pause Mode
;
	lda     _joypad1old
	and     #$10
	bne     L1285
	lda     _joypad1
	and     #$10
	beq     L1285
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_PAUSE;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Save_Game_Mode = Game_Mode;
;
	lda     _Game_Mode
	sta     _Save_Game_Mode
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if ((injury_Timer == 99)&&(Death_Flag !=0)) { // init game over
;
L1285:	lda     _injury_Timer
	cmp     #$63
	bne     L12A6
	lda     _Death_Flag
	beq     L12A9
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME_OVER;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L12A6:	lda     #$00
L12A9:	sta     _NMI_flag
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
L128A:	lda     _Game_Mode
	cmp     #$01
	jeq     L1281
;
; while (Game_Mode == BOSS_MODE){ // Title Screen
;
	jmp     L1293
;
; while (NMI_flag == 0); // wait till v-blank
;
L128B:	lda     _NMI_flag
	beq     L128B
;
; Get_Input();
;
	jsr     _Get_Input
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; if (injury_Timer == 0){
;
	lda     _injury_Timer
	bne     L0261
;
; shooting();
;
	jsr     _shooting
;
; Check_Injury();
;
L0261:	jsr     _Check_Injury
;
; move_logic();
;
	jsr     _move_logic
;
; collision_Test4(); // hit boss
;
	jsr     _collision_Test4
;
; if (Game_Mode != BOSS_MODE) break;
;
	lda     _Game_Mode
	cmp     #$05
	jne     L1299
;
; Draw_Bullets(); // and move them
;
	jsr     _Draw_Bullets
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Move_Lasers(); // and draw them
;
	jsr     _Move_Lasers
;
; Move_Boss(); // and draw him
;
	jsr     _Move_Boss
;
; Set_Sprite_Zero(); // redundant...just double checking
;
	jsr     _Set_Sprite_Zero
;
; Music_Update();
;
	jsr     _Music_Update
;
; Adjust_Scoreboard();
;
	jsr     _Adjust_Scoreboard
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // start Pause Mode
;
	lda     _joypad1old
	and     #$10
	bne     L128E
	lda     _joypad1
	and     #$10
	beq     L128E
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_PAUSE;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Save_Game_Mode = Game_Mode;
;
	lda     _Game_Mode
	sta     _Save_Game_Mode
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if ((injury_Timer == 99)&&(Death_Flag !=0)) { // init game over
;
L128E:	lda     _injury_Timer
	cmp     #$63
	bne     L12A7
	lda     _Death_Flag
	beq     L12AA
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME_OVER;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L12A7:	lda     #$00
L12AA:	sta     _NMI_flag
;
; while (Game_Mode == BOSS_MODE){ // Title Screen
;
L1293:	lda     _Game_Mode
	cmp     #$05
	jeq     L128B
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
	jmp     L1299
;
; while (NMI_flag == 0); // wait till v-blank
;
L1294:	lda     _NMI_flag
	beq     L1294
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // Go back to Game Mode
;
	lda     _joypad1old
	and     #$10
	bne     L12A8
	lda     _joypad1
	and     #$10
	beq     L12AB
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = Save_Game_Mode;
;
	lda     _Save_Game_Mode
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L12A8:	lda     #$00
L12AB:	sta     _NMI_flag
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
L1299:	lda     _Game_Mode
	cmp     #$02
	beq     L1294
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
	jmp     L129D
;
; while (NMI_flag == 0); // wait till v-blank
;
L129A:	lda     _NMI_flag
	beq     L129A
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; ++Wait;
;
	inc     _Wait
;
; if (Wait == 0)
;
	bne     L129B
;
; ++Wait2;
;
	inc     _Wait2
;
; if (Wait2 == 2){ // about 8 seconds
;
L129B:	lda     _Wait2
	cmp     #$02
	bne     L129C
;
; All_Off();
;
	jsr     _All_Off
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
	jsr     _Reset
;
; NMI_flag = 0;
;
L129C:	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
L129D:	lda     _Game_Mode
	cmp     #$03
	beq     L129A
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
	jmp     L12A5
;
; while (NMI_flag == 0); // wait till NMI
;
L129E:	lda     _NMI_flag
	beq     L129E
;
; Get_Input();
;
	jsr     _Get_Input
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Victory_Sprites();
;
	jsr     _Turn_On_Victory_Sprites
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (Wait2 < 2){ // about 8 seconds
;
	lda     _Wait2
	cmp     #$02
	bcs     L129F
;
; ++Wait;
;
	inc     _Wait
;
; if (Wait == 0) ++Wait2;
;
	bne     L129F
	inc     _Wait2
;
; if (Wait2 == 2){ // after waiting 8 seconds, we can skip back to start
;
L129F:	lda     _Wait2
	cmp     #$02
	bne     L12A3
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L12A3
	lda     _joypad1
	and     #$10
	beq     L12AC
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0); // wait till NMI
;
L12A2:	lda     _NMI_flag
	beq     L12A2
;
; All_Off();
;
	jsr     _All_Off
;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Keep); // uncompresses our data
;
	lda     #<(_Keep)
	ldx     #>(_Keep)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x3f; // address of nametable #0 = 0x2000
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x03;
;
	lda     #$03
	sta     $2006
;
; PPU_DATA = 0x30; // change 1 color to white
;
	lda     #$30
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Game_Mode = TITLE_MODE; // not really
;
	lda     #$00
	sta     _Game_Mode
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Selection = 0;
;
	lda     #$00
	sta     _Selection
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; Keep_Loop(); // exit from here
;
	jsr     _Keep_Loop
;
; NMI_flag = 0;
;
L12A3:	lda     #$00
L12AC:	sta     _NMI_flag
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
L12A5:	lda     _Game_Mode
	cmp     #$04
	jeq     L129E
;
; while (1){ // infinite loop
;
	jmp     L1280

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Explosion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Explosion: near

.segment	"CODE"

;
; if (Explode1.Y == 0){
;
	lda     _Explode1+2
	bne     L12AD
;
; Explode1.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode1+2
;
; Explode1.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode1+3
;
; Explode1.anime = enemy_expl;
;
	lda     #$0D
	sta     _Explode1
;
; Explode1.count = 10; // count down
;
	lda     #$0A
	sta     _Explode1+7
;
; else if (Explode2.Y == 0){
;
	rts
L12AD:	lda     _Explode2+2
	bne     L12AE
;
; Explode2.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode2+2
;
; Explode2.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode2+3
;
; Explode2.anime = enemy_expl;
;
	lda     #$0D
	sta     _Explode2
;
; Explode2.count = 10; // count down
;
	lda     #$0A
	sta     _Explode2+7
;
; else if (Explode3.Y == 0){
;
	rts
L12AE:	lda     _Explode3+2
	bne     L12AF
;
; Explode3.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode3+2
;
; Explode3.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode3+3
;
; Explode3.anime = enemy_expl;
;
	lda     #$0D
	sta     _Explode3
;
; Explode3.count = 10; // count down
;
	lda     #$0A
	sta     _Explode3+7
;
; else if (Explode4.Y == 0){
;
	rts
L12AF:	lda     _Explode4+2
	bne     L06A7
;
; Explode4.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode4+2
;
; Explode4.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode4+3
;
; Explode4.anime = enemy_expl;
;
	lda     #$0D
	sta     _Explode4
;
; Explode4.count = 10; // count down
;
	lda     #$0A
	sta     _Explode4+7
;
; }
;
L06A7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Enemies: near

.segment	"CODE"

;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; if (ENEMY1.Y != 0 && ENEMY1.delay == 0){
;
	lda     _ENEMY1+2
	beq     L12B4
	lda     _ENEMY1+4
	bne     L12B4
;
; objectB_y = ENEMY1.Y;
;
	lda     _ENEMY1+2
	sta     _objectB_y
;
; objectB_x = ENEMY1.X;
;
	lda     _ENEMY1+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12B4
;
; ENEMY1.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY1+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY2.Y != 0 && ENEMY2.delay == 0){
;
L12B4:	lda     _ENEMY2+2
	beq     L12B8
	lda     _ENEMY2+4
	bne     L12B8
;
; objectB_y = ENEMY2.Y;
;
	lda     _ENEMY2+2
	sta     _objectB_y
;
; objectB_x = ENEMY2.X;
;
	lda     _ENEMY2+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12B8
;
; ENEMY2.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY2+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY3.Y != 0 && ENEMY3.delay == 0){
;
L12B8:	lda     _ENEMY3+2
	beq     L12BC
	lda     _ENEMY3+4
	bne     L12BC
;
; objectB_y = ENEMY3.Y;
;
	lda     _ENEMY3+2
	sta     _objectB_y
;
; objectB_x = ENEMY3.X;
;
	lda     _ENEMY3+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12BC
;
; ENEMY3.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY3+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY4.Y != 0 && ENEMY4.delay == 0){
;
L12BC:	lda     _ENEMY4+2
	beq     L12C0
	lda     _ENEMY4+4
	bne     L12C0
;
; objectB_y = ENEMY4.Y;
;
	lda     _ENEMY4+2
	sta     _objectB_y
;
; objectB_x = ENEMY4.X;
;
	lda     _ENEMY4+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12C0
;
; ENEMY4.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY4+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY5.Y != 0 && ENEMY5.delay == 0){
;
L12C0:	lda     _ENEMY5+2
	beq     L12C4
	lda     _ENEMY5+4
	bne     L12C4
;
; objectB_y = ENEMY5.Y;
;
	lda     _ENEMY5+2
	sta     _objectB_y
;
; objectB_x = ENEMY5.X;
;
	lda     _ENEMY5+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12C4
;
; ENEMY5.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY5+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY6.Y != 0 && ENEMY6.delay == 0){
;
L12C4:	lda     _ENEMY6+2
	beq     L12C8
	lda     _ENEMY6+4
	bne     L12C8
;
; objectB_y = ENEMY6.Y;
;
	lda     _ENEMY6+2
	sta     _objectB_y
;
; objectB_x = ENEMY6.X;
;
	lda     _ENEMY6+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12C8
;
; ENEMY6.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY6+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY7.Y != 0 && ENEMY7.delay == 0){
;
L12C8:	lda     _ENEMY7+2
	beq     L12CC
	lda     _ENEMY7+4
	bne     L12CC
;
; objectB_y = ENEMY7.Y;
;
	lda     _ENEMY7+2
	sta     _objectB_y
;
; objectB_x = ENEMY7.X;
;
	lda     _ENEMY7+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L12CC
;
; ENEMY7.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY7+2
;
; return;
;
	jmp     L12D3
;
; if (ENEMY8.Y != 0 && ENEMY8.delay == 0){
;
L12CC:	lda     _ENEMY8+2
	beq     L12CE
	lda     _ENEMY8+4
	beq     L12CF
L12CE:	rts
;
; objectB_y = ENEMY8.Y;
;
L12CF:	lda     _ENEMY8+2
	sta     _objectB_y
;
; objectB_x = ENEMY8.X;
;
	lda     _ENEMY8+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L072D
;
; ENEMY8.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY8+2
;
; Spawn_Explosion();
;
L12D3:	jsr     _Spawn_Explosion
;
; Score4 += 5;
;
	lda     #$05
	clc
	adc     _Score4
	sta     _Score4
;
; }
;
L072D:	rts

.endproc

