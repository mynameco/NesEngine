;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "lesson22.c", 2523, 1502273620
	.dbg		file, "neslib.h", 8578, 1492006296
	.dbg		file, "lesson22.h", 1373, 1491854522
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_set_vram_update
	.import		_memcpy
	.import		_delay
	.export		_PAD_STATE
	.export		_PAD_STATE2
	.export		_PAD_STATET
	.export		_PAD_STATET2
	.export		_TEXT
	.export		_TWOLETTERS
	.export		_CLEAR
	.export		_PALETTE
	.export		_text_Position
	.export		_address
	.export		_high
	.export		_low
	.export		_data
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_TWOLETTERS:
	.byte	$22
	.byte	$2A
	.byte	$41
	.byte	$20
	.byte	$B2
	.byte	$42
	.byte	$FF
_CLEAR:
	.byte	$61
	.byte	$CA
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
_PALETTE:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_PAD_STATE:
	.res	1,$00
_PAD_STATE2:
	.res	1,$00
_PAD_STATET:
	.res	1,$00
_PAD_STATET2:
	.res	1,$00
_text_Position:
	.res	1,$00
_address:
	.res	2,$00
_high:
	.res	1,$00
_low:
	.res	1,$00
_data:
	.res	1,$00
.segment	"BSS"
_v_ram_buffer:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; pal_bg(PALETTE);
;
	.dbg	line, "lesson22.c", 63
	lda     #<(_PALETTE)
	ldx     #>(_PALETTE)
	jsr     _pal_bg
;
; text_Position = 0;
;
	.dbg	line, "lesson22.c", 67
	lda     #$00
	sta     _text_Position
;
; ppu_on_all();
;
	.dbg	line, "lesson22.c", 70
	jsr     _ppu_on_all
;
; memcpy(v_ram_buffer,TWOLETTERS,sizeof(TWOLETTERS)); // copy from the ROM to the RAM
;
	.dbg	line, "lesson22.c", 74
	lda     #<(_v_ram_buffer)
	ldx     #>(_v_ram_buffer)
	jsr     pushax
	lda     #<(_TWOLETTERS)
	ldx     #>(_TWOLETTERS)
	jsr     pushax
	ldx     #$00
	lda     #$07
L009F:	jsr     _memcpy
;
; set_vram_update(v_ram_buffer); // this just sets a pointer to the data, and sets a flag to draw it next v-blank
;
	.dbg	line, "lesson22.c", 75
L009E:	lda     #<(_v_ram_buffer)
	ldx     #>(_v_ram_buffer)
	jsr     _set_vram_update
;
; delay(30); // wait 30 frames
;
	.dbg	line, "lesson22.c", 81
	lda     #$1E
	jsr     _delay
;
; address = NTADR_A(10,14) + text_Position; // 2 bytes wide
;
	.dbg	line, "lesson22.c", 83
	lda     _text_Position
	clc
	adc     #$CA
	sta     _address
	lda     #$00
	adc     #$21
	sta     _address+1
;
; high = (char)(address >> 8); // get just the upper byte
;
	.dbg	line, "lesson22.c", 84
	sta     _high
;
; low = (char)(address & 0xff); // get just the lower byte
;
	.dbg	line, "lesson22.c", 85
	lda     _address
	sta     _low
;
; v_ram_buffer[0] = high;
;
	.dbg	line, "lesson22.c", 87
	lda     _high
	sta     _v_ram_buffer
;
; v_ram_buffer[1] = low;
;
	.dbg	line, "lesson22.c", 88
	lda     _low
	sta     _v_ram_buffer+1
;
; data = TEXT[text_Position]; // get 1 letter of the text
;
	.dbg	line, "lesson22.c", 90
	ldy     _text_Position
	lda     _TEXT,y
	sta     _data
;
; v_ram_buffer[2] = data;
;
	.dbg	line, "lesson22.c", 91
	sta     _v_ram_buffer+2
;
; v_ram_buffer[3] = NT_UPD_EOF;
;
	.dbg	line, "lesson22.c", 93
	lda     #$FF
	sta     _v_ram_buffer+3
;
; ++text_Position;
;
	.dbg	line, "lesson22.c", 95
	inc     _text_Position
;
; if (text_Position >= sizeof(TEXT)){
;
	.dbg	line, "lesson22.c", 97
	lda     _text_Position
	cmp     #$0D
	bcc     L009E
;
; text_Position = 0;
;
	.dbg	line, "lesson22.c", 98
	lda     #$00
	sta     _text_Position
;
; ppu_wait_frame();
;
	.dbg	line, "lesson22.c", 99
	jsr     _ppu_wait_frame
;
; memcpy(v_ram_buffer,CLEAR,sizeof(CLEAR)); // if at end, clear screen
;
	.dbg	line, "lesson22.c", 100
	lda     #<(_v_ram_buffer)
	ldx     #>(_v_ram_buffer)
	jsr     pushax
	lda     #<(_CLEAR)
	ldx     #>(_CLEAR)
	jsr     pushax
	ldx     #$00
	lda     #$10
;
; while (1){
;
	.dbg	line, "lesson22.c", 79
	jmp     L009F
	.dbg	line

.endproc

