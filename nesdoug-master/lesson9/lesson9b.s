;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Horiz_scroll
	.export		_Vert_scroll
	.export		_Horiz_High_Nibble
	.export		_Horiz_Low_Nibble
	.export		_Vert_High_Nibble
	.export		_Vert_Low_Nibble
	.export		_Nametable
	.export		_SPRITES
	.export		_PALETTE
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile
	.export		_MetaSprite_Attrib
	.export		_MetaSprite_X
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_update_Sprites
	.export		_move_logic
	.export		_Draw_Background
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.export		_N0
	.export		_N2
	.export		_main

.segment	"RODATA"

_PALETTE:
	.byte	$1F
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$37
	.byte	$24
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_MetaSprite_Tile:
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
_MetaSprite_Attrib:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_N0:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$52
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$00
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$00
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$00
	.byte	$01
	.byte	$EB
	.byte	$01
	.byte	$00
_N2:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$52
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$00
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$00
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$00
	.byte	$01
	.byte	$EC
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_Y1:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Horiz_scroll:
	.res	1,$00
_Vert_scroll:
	.res	1,$00
_Horiz_High_Nibble:
	.res	1,$00
_Horiz_Low_Nibble:
	.res	1,$00
_Vert_High_Nibble:
	.res	1,$00
_Vert_Low_Nibble:
	.res	1,$00
_Nametable:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L0316:	lda     _index
	cmp     #$20
	bcs     L023B
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L0316
;
; }
;
L023B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_Sprites: near

.segment	"CODE"

;
; state4 = state << 2; // shift left 2 = multiply 4
;
	lda     _state
	asl     a
	asl     a
	sta     _state4
;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; for (index = 0; index < 4; ++index ){
;
	sta     _index
L031E:	lda     _index
	cmp     #$04
	jcs     L031F
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0257
	inx
L0257:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile[index + state4]; // tile numbers
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L025E
	inx
L025E:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0318
	inx
L0318:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib[index]; // attributes, all zero here
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0264
	inx
L0264:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L026B
	inx
L026B:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index ){
;
	inc     _index
	jmp     L031E
;
; Horiz_High_Nibble = Horiz_scroll >> 4;
;
L031F:	lda     _Horiz_scroll
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _Horiz_High_Nibble
;
; Horiz_Low_Nibble = Horiz_scroll & 0x0f;
;
	lda     _Horiz_scroll
	and     #$0F
	sta     _Horiz_Low_Nibble
;
; Vert_High_Nibble = Vert_scroll >> 4;
;
	lda     _Vert_scroll
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _Vert_High_Nibble
;
; Vert_Low_Nibble = Vert_scroll & 0x0f;
;
	lda     _Vert_scroll
	and     #$0F
	sta     _Vert_Low_Nibble
;
; if (Horiz_High_Nibble < 10){  // if 0-9
;
	lda     _Horiz_High_Nibble
	cmp     #$0A
	bcs     L0320
;
; Horiz_High_Nibble += 0x30; // use the number tiles
;
	lda     #$30
;
; else {
;
	jmp     L0328
;
; Horiz_High_Nibble += 0x37; // if a-f, use letter tiles
;
L0320:	lda     #$37
L0328:	clc
	adc     _Horiz_High_Nibble
	sta     _Horiz_High_Nibble
;
; if (Horiz_Low_Nibble < 10){
;
	lda     _Horiz_Low_Nibble
	cmp     #$0A
	bcs     L0321
;
; Horiz_Low_Nibble += 0x30;
;
	lda     #$30
;
; else {
;
	jmp     L0329
;
; Horiz_Low_Nibble += 0x37;
;
L0321:	lda     #$37
L0329:	clc
	adc     _Horiz_Low_Nibble
	sta     _Horiz_Low_Nibble
;
; if (Vert_High_Nibble < 10){
;
	lda     _Vert_High_Nibble
	cmp     #$0A
	bcs     L0322
;
; Vert_High_Nibble += 0x30;
;
	lda     #$30
;
; else {
;
	jmp     L032A
;
; Vert_High_Nibble += 0x37;
;
L0322:	lda     #$37
L032A:	clc
	adc     _Vert_High_Nibble
	sta     _Vert_High_Nibble
;
; if (Vert_Low_Nibble < 10){
;
	lda     _Vert_Low_Nibble
	cmp     #$0A
	bcs     L0323
;
; Vert_Low_Nibble += 0x30;
;
	lda     #$30
;
; else {
;
	jmp     L032B
;
; Vert_Low_Nibble += 0x37;
;
L0323:	lda     #$37
L032B:	clc
	adc     _Vert_Low_Nibble
	sta     _Vert_Low_Nibble
;
; SPRITES[0x10] = 0x20;
;
	lda     #$20
	sta     _SPRITES+16
;
; SPRITES[0x11] = (char)'H'; // 0x48
;
	lda     #$48
	sta     _SPRITES+17
;
; SPRITES[0x12] = 3; // use palette #3
;
	lda     #$03
	sta     _SPRITES+18
;
; SPRITES[0x13] = 0x20;
;
	lda     #$20
	sta     _SPRITES+19
;
; SPRITES[0x14] = 0x20;
;
	sta     _SPRITES+20
;
; SPRITES[0x15] = Horiz_High_Nibble;
;
	lda     _Horiz_High_Nibble
	sta     _SPRITES+21
;
; SPRITES[0x16] = 3;
;
	lda     #$03
	sta     _SPRITES+22
;
; SPRITES[0x17] = 0x30;
;
	lda     #$30
	sta     _SPRITES+23
;
; SPRITES[0x18] = 0x20;
;
	lda     #$20
	sta     _SPRITES+24
;
; SPRITES[0x19] = Horiz_Low_Nibble;
;
	lda     _Horiz_Low_Nibble
	sta     _SPRITES+25
;
; SPRITES[0x1a] = 3;
;
	lda     #$03
	sta     _SPRITES+26
;
; SPRITES[0x1b] = 0x38;
;
	lda     #$38
	sta     _SPRITES+27
;
; SPRITES[0x20] = 0x20; 
;
	lda     #$20
	sta     _SPRITES+32
;
; SPRITES[0x21] = (char)'V'; // 0x56
;
	lda     #$56
	sta     _SPRITES+33
;
; SPRITES[0x22] = 3;
;
	lda     #$03
	sta     _SPRITES+34
;
; SPRITES[0x23] = 0x50;
;
	lda     #$50
	sta     _SPRITES+35
;
; SPRITES[0x24] = 0x20;
;
	lda     #$20
	sta     _SPRITES+36
;
; SPRITES[0x25] = Vert_High_Nibble;
;
	lda     _Vert_High_Nibble
	sta     _SPRITES+37
;
; SPRITES[0x26] = 3;
;
	lda     #$03
	sta     _SPRITES+38
;
; SPRITES[0x27] = 0x60;
;
	lda     #$60
	sta     _SPRITES+39
;
; SPRITES[0x28] = 0x20;
;
	lda     #$20
	sta     _SPRITES+40
;
; SPRITES[0x29] = Vert_Low_Nibble;
;
	lda     _Vert_Low_Nibble
	sta     _SPRITES+41
;
; SPRITES[0x2a] = 3;
;
	lda     #$03
	sta     _SPRITES+42
;
; SPRITES[0x2b] = 0x68;
;
	lda     #$68
	sta     _SPRITES+43
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & RIGHT) != 0){
;
	lda     _joypad1
	and     #$01
	beq     L032C
;
; state = Going_Right;
;
	lda     #$00
	sta     _state
;
; ++Horiz_scroll;
;
	inc     _Horiz_scroll
;
; if ((joypad1 & LEFT) != 0){
;
L032C:	lda     _joypad1
	and     #$02
	beq     L032D
;
; state = Going_Left;
;
	lda     #$02
	sta     _state
;
; --Horiz_scroll;
;
	dec     _Horiz_scroll
;
; if ((joypad1 & DOWN) != 0){
;
L032D:	lda     _joypad1
	and     #$04
	beq     L032E
;
; state = Going_Down;
;
	lda     #$01
	sta     _state
;
; ++Vert_scroll;
;
	inc     _Vert_scroll
;
; if (Vert_scroll == 0xf0){
;
	lda     _Vert_scroll
	cmp     #$F0
	bne     L032E
;
; Vert_scroll = 0;
;
	lda     #$00
	sta     _Vert_scroll
;
; ++Nametable;
;
	inc     _Nametable
;
; if ((joypad1 & UP) != 0){
;
L032E:	lda     _joypad1
	and     #$08
	beq     L032F
;
; state = Going_Up;
;
	lda     #$03
	sta     _state
;
; --Vert_scroll;
;
	dec     _Vert_scroll
;
; if (Vert_scroll == 0xff){
;
	lda     _Vert_scroll
	cmp     #$FF
	bne     L032F
;
; Vert_scroll = 0xef;
;
	lda     #$EF
	sta     _Vert_scroll
;
; ++Nametable;
;
	inc     _Nametable
;
; Nametable &= 1; // keep it 1 or 0
;
L032F:	lda     _Nametable
	and     #$01
	sta     _Nametable
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N0); // uncompresses our data ///that's a zero
;
	lda     #<(_N0)
	ldx     #>(_N0)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x28; // address of nametable #2 = 2800
;
	lda     #$28
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(N2); // uncompresses our data
;
	lda     #<(_N2)
	ldx     #>(_N2)
	jmp     _UnRLE

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off(); // turn off screen
;
	jsr     _All_Off
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; X1 = 0x7f;
;
	lda     #$7F
	sta     _X1
;
; Y1 = 0x77; // middle of screen
;
	lda     #$77
	sta     _Y1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On(); // turn on screen
;
	jsr     _All_On
;
; while (NMI_flag == 0); // wait till NMI
;
L0330:	lda     _NMI_flag
	beq     L0330
;
; Get_Input();
;
	jsr     _Get_Input
;
; move_logic();
;
	jsr     _move_logic
;
; update_Sprites();
;
	jsr     _update_Sprites
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (1){ // infinite loop
;
	jmp     L0330

.endproc

