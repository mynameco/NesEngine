;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "lesson11.c", 12807, 1519589862
	.dbg		file, "DEFINE.c", 5484, 1519589845
	.dbg		file, "BG/A1.csv", 545, 1518911843
	.dbg		file, "BG/A2.csv", 545, 1518911843
	.dbg		file, "BG/A3.csv", 541, 1518911843
	.dbg		file, "BG/A4.csv", 550, 1518911843
	.dbg		file, "BufferMT.c", 3422, 1519589564
	.forceimport	__STARTUP__
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "Wait_Vblank", "00", extern, "_Wait_Vblank"
	.dbg		sym, "Get_Input", "00", extern, "_Get_Input"
	.dbg		sym, "Sprite_Zero", "00", extern, "_Sprite_Zero"
	.dbg		sym, "Super_Fast_Write_PPU", "00", extern, "_Super_Fast_Write_PPU"
	.dbg		sym, "Super_Fast_Write_PPU2", "00", extern, "_Super_Fast_Write_PPU2"
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index2
	.export		_index3
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Room
	.export		_RoomB
	.export		_RoomPlus
	.export		_Room_Address
	.export		_Horiz_scroll
	.export		_Horiz_scroll_Old
	.export		_Horiz_scroll_Plus
	.export		_Scroll_Adjusted_X
	.export		_Nametable
	.export		_NametableB
	.export		_Nametable_Plus
	.export		_walk_count
	.export		_X_speed
	.export		_Y_speed
	.export		_direction
	.export		_collision_Index
	.export		_high_byte
	.export		_collision
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_PPU_ADDRESS_High
	.export		_PPU_ADDRESS_Low
	.export		_A
	.export		_PPU_flag
	.export		_PPU_flag2
	.export		_dummy
	.export		_SPRITE_ZERO
	.export		_SPRITES
	.export		_C_MAP
	.export		_C_MAP2
	.export		_BUFFER1
	.export		_BUFFER2
	.export		_BUFFER3
	.export		_BUFFER4
	.export		_BUFFER5
	.export		_BUFFER6
	.export		_BUFFER7
	.export		_A1
	.export		_A2
	.export		_A3
	.export		_A4
	.export		_ROOMS
	.export		_PLATFORM
	.export		_METATILES
	.export		_MT_color
	.export		_HUD
	.export		_PALETTE
	.export		_Walk_Moves
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile_Right
	.export		_MetaSprite_Attrib_Right
	.export		_MetaSprite_X
	.export		_MetaSprite_Tile_Left
	.export		_MetaSprite_Attrib_Left
	.export		_AllOff
	.export		_AllOn
	.export		_ResetScroll
	.export		_LoadPalette
	.export		_UpdateSprites
	.export		_CollisionDown
	.export		_MoveLogic
	.export		_DoBuffer
	.export		_DoBuffer2
	.export		_DoBuffer3
	.export		_DrawBackground
	.export		_SetSpriteZero
	.export		_LoadHud
	.export		_ShouldWeBuffer
	.export		_NewRoom
	.import		_memcpy
	.import		_Wait_Vblank
	.import		_Get_Input
	.import		_Sprite_Zero
	.import		_Super_Fast_Write_PPU
	.import		_Super_Fast_Write_PPU2
	.export		_BufferTiles
	.export		_BufferTiles2
	.export		_TestLabel
	.export		_main

.segment	"RODATA"

_A1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_A4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_ROOMS:
	.addr	_A1
	.addr	_A2
	.addr	_A3
	.addr	_A4
_PLATFORM:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_METATILES:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$05
	.byte	$06
	.byte	$15
	.byte	$16
	.byte	$06
	.byte	$06
	.byte	$16
	.byte	$16
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$15
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$16
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$16
	.byte	$19
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$19
	.byte	$1A
_MT_color:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_HUD:
	.byte	$54,$45,$53,$54,$20,$53,$50,$52,$49,$54,$45,$20,$5A,$45,$52,$4F
	.byte	$20,$48,$45,$52,$45,$20,$20,$00
_PALETTE:
	.byte	$22
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$22
	.byte	$37
	.byte	$16
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
_Walk_Moves:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
_MetaSprite_Tile_Right:
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_MetaSprite_Attrib_Right:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_MetaSprite_Tile_Left:
	.byte	$01
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$13
	.byte	$12
	.byte	$05
	.byte	$04
	.byte	$15
	.byte	$14
	.byte	$07
	.byte	$06
	.byte	$17
	.byte	$16
_MetaSprite_Attrib_Left:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_index3:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_Y1:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Room:
	.res	1,$00
_RoomB:
	.res	1,$00
_RoomPlus:
	.res	1,$00
_Room_Address:
	.res	2,$00
_Horiz_scroll:
	.res	1,$00
_Horiz_scroll_Old:
	.res	1,$00
_Horiz_scroll_Plus:
	.res	1,$00
_Scroll_Adjusted_X:
	.res	2,$00
_Nametable:
	.res	1,$00
_NametableB:
	.res	1,$00
_Nametable_Plus:
	.res	1,$00
_walk_count:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_direction:
	.res	1,$00
_collision_Index:
	.res	1,$00
_high_byte:
	.res	1,$00
_collision:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_PPU_ADDRESS_High:
	.res	1,$00
_PPU_ADDRESS_Low:
	.res	1,$00
_A:
	.res	1,$00
_PPU_flag:
	.res	1,$00
_PPU_flag2:
	.res	1,$00
_dummy:
	.res	1,$00
.segment	"OAM"
_SPRITE_ZERO:
	.res	4,$00
_SPRITES:
	.res	252,$00
.segment	"MAP"
_C_MAP:
	.res	256,$00
_C_MAP2:
	.res	256,$00
.segment	"BSS"
_BUFFER1:
	.res	32,$00
_BUFFER2:
	.res	32,$00
_BUFFER3:
	.res	32,$00
_BUFFER4:
	.res	32,$00
_BUFFER5:
	.res	8,$00
_BUFFER6:
	.res	8,$00
_BUFFER7:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ AllOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AllOff: near

	.dbg	func, "AllOff", "00", extern, "_AllOff"

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	.dbg	line, "lesson11.c", 130
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	.dbg	line, "lesson11.c", 131
	sta     $2001
;
; }
;
	.dbg	line, "lesson11.c", 132
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ AllOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AllOn: near

	.dbg	func, "AllOn", "00", extern, "_AllOn"

.segment	"CODE"

;
; PPU_CTRL = 0x94; // screen is on, NMI on
;
	.dbg	line, "lesson11.c", 136
	lda     #$94
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	.dbg	line, "lesson11.c", 137
	lda     #$1E
	sta     $2001
;
; }
;
	.dbg	line, "lesson11.c", 138
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

	.dbg	func, "ResetScroll", "00", extern, "_ResetScroll"

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	.dbg	line, "lesson11.c", 142
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	.dbg	line, "lesson11.c", 143
	sta     $2006
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 144
	sta     $2005
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 145
	sta     $2005
;
; }
;
	.dbg	line, "lesson11.c", 146
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ LoadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_LoadPalette: near

	.dbg	func, "LoadPalette", "00", extern, "_LoadPalette"

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	.dbg	line, "lesson11.c", 150
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	.dbg	line, "lesson11.c", 151
	lda     #$00
	sta     $2006
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	.dbg	line, "lesson11.c", 152
	sta     _index
L0857:	lda     _index
	cmp     #$20
	bcs     L0607
;
; PPU_DATA = PALETTE[index];
;
	.dbg	line, "lesson11.c", 154
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	.dbg	line, "lesson11.c", 152
	inc     _index
	jmp     L0857
;
; }
;
	.dbg	line, "lesson11.c", 156
L0607:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ UpdateSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateSprites: near

	.dbg	func, "UpdateSprites", "00", extern, "_UpdateSprites"

.segment	"CODE"

;
; state4 = state << 2; // shift left 2 = multiply 4
;
	.dbg	line, "lesson11.c", 160
	lda     _state
	asl     a
	asl     a
	sta     _state4
;
; index4 = 0;
;
	.dbg	line, "lesson11.c", 161
	lda     #$00
	sta     _index4
;
; if (direction == 0)
;
	.dbg	line, "lesson11.c", 163
	lda     _direction
	jne     L085F
;
; for (index = 0; index < 4; ++index)
;
	.dbg	line, "lesson11.c", 165
	sta     _index
L085E:	lda     _index
	cmp     #$04
	bcc     L0861
;
; }
;
	.dbg	line, "lesson11.c", 192
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
	.dbg	line, "lesson11.c", 167
L0861:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0625
	inx
L0625:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 168
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_Right[index + state4]; // tile numbers
;
	.dbg	line, "lesson11.c", 169
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L062C
	inx
L062C:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L0859
	inx
L0859:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_Right)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_Right)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 170
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_Right[index]; // attributes, all zero here
;
	.dbg	line, "lesson11.c", 171
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0632
	inx
L0632:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_Right,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 172
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	.dbg	line, "lesson11.c", 173
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0639
	inx
L0639:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 174
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	.dbg	line, "lesson11.c", 165
	inc     _index
	jmp     L085E
;
; for (index = 0; index < 4; ++index)
;
	.dbg	line, "lesson11.c", 180
L085F:	lda     #$00
	sta     _index
L0860:	lda     _index
	cmp     #$04
	bcc     L0862
;
; }
;
	.dbg	line, "lesson11.c", 192
	rts
;
; SPRITES[index4] = MetaSprite_Y[index] + Y1; // relative y + master y
;
	.dbg	line, "lesson11.c", 182
L0862:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0649
	inx
L0649:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 183
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Tile_Left[index + state4]; // tile numbers
;
	.dbg	line, "lesson11.c", 184
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0650
	inx
L0650:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _state4
	bcc     L085C
	inx
L085C:	sta     ptr1
	txa
	clc
	adc     #>(_MetaSprite_Tile_Left)
	sta     ptr1+1
	ldy     #<(_MetaSprite_Tile_Left)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 185
	inc     _index4
;
; SPRITES[index4] = MetaSprite_Attrib_Left[index]; // attributes, all zero here
;
	.dbg	line, "lesson11.c", 186
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0656
	inx
L0656:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Attrib_Left,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 187
	inc     _index4
;
; SPRITES[index4] = MetaSprite_X[index] + X1; // relative x + master x
;
	.dbg	line, "lesson11.c", 188
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L065D
	inx
L065D:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	.dbg	line, "lesson11.c", 189
	inc     _index4
;
; for (index = 0; index < 4; ++index)
;
	.dbg	line, "lesson11.c", 180
	inc     _index
	jmp     L0860
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ CollisionDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CollisionDown: near

	.dbg	func, "CollisionDown", "00", extern, "_CollisionDown"

.segment	"CODE"

;
; if (NametableB == 0)
;
	.dbg	line, "lesson11.c", 197
	lda     _NametableB
	bne     L0663
;
; temp = C_MAP[collision_Index];
;
	.dbg	line, "lesson11.c", 199
	ldy     _collision_Index
	lda     _C_MAP,y
;
; else
;
	.dbg	line, "lesson11.c", 203
	jmp     L0868
;
; temp = C_MAP2[collision_Index];
;
	.dbg	line, "lesson11.c", 205
L0663:	ldy     _collision_Index
	lda     _C_MAP2,y
L0868:	sta     _temp
;
; collision += PLATFORM[temp];
;
	.dbg	line, "lesson11.c", 206
	ldy     _temp
	lda     _PLATFORM,y
	clc
	adc     _collision
	sta     _collision
;
; }
;
	.dbg	line, "lesson11.c", 208
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ MoveLogic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_MoveLogic: near

	.dbg	func, "MoveLogic", "00", extern, "_MoveLogic"

.segment	"CODE"

;
; if ((joypad1 & (RIGHT | LEFT)) == 0)
;
	.dbg	line, "lesson11.c", 212
	lda     _joypad1
	and     #$03
	bne     L0874
;
; walk_count = 0;
;
	.dbg	line, "lesson11.c", 214
	sta     _walk_count
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 216
	ldx     _X_speed
	bmi     L067E
;
; if (X_speed >= 4)
;
	.dbg	line, "lesson11.c", 218
	lda     _X_speed
	sec
	sbc     #$04
	bvs     L0684
	eor     #$80
L0684:	asl     a
	lda     #$00
	bcc     L0873
;
; X_speed -= 4;
;
	.dbg	line, "lesson11.c", 220
	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
	bpl     L0874
;
; else
;
	.dbg	line, "lesson11.c", 222
	jmp     L0874
;
; if (X_speed <= (-4))
;
	.dbg	line, "lesson11.c", 229
L067E:	lda     _X_speed
	sec
	sbc     #$FD
	bvc     L0690
	eor     #$80
L0690:	asl     a
	lda     #$00
	bcc     L0873
;
; X_speed += 4;
;
	.dbg	line, "lesson11.c", 231
	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L0874
;
; else
;
	.dbg	line, "lesson11.c", 233
	jmp     L0874
;
; X_speed = 0; // just stop
;
	.dbg	line, "lesson11.c", 235
L0873:	sta     _X_speed
;
; if ((joypad1 & RIGHT) != 0)
;
	.dbg	line, "lesson11.c", 240
L0874:	lda     _joypad1
	and     #$01
	beq     L06A8
;
; ++walk_count;
;
	.dbg	line, "lesson11.c", 242
	inc     _walk_count
;
; direction = 0;
;
	.dbg	line, "lesson11.c", 243
	lda     #$00
	sta     _direction
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 244
	ldx     _X_speed
	bmi     L069E
;
; X_speed += 2;
;
	.dbg	line, "lesson11.c", 246
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L06A8
;
; else
;
	.dbg	line, "lesson11.c", 248
	jmp     L06A8
;
; X_speed += 8; // just stop
;
	.dbg	line, "lesson11.c", 250
L069E:	lda     #$08
	clc
	adc     _X_speed
	sta     _X_speed
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 251
	tax
	bmi     L06A8
;
; X_speed = 0;
;
	.dbg	line, "lesson11.c", 252
	lda     #$00
	sta     _X_speed
;
; TestLabel();
;
	.dbg	line, "lesson11.c", 256
L06A8:	jsr     _TestLabel
;
; if ((joypad1 & LEFT) != 0)
;
	.dbg	line, "lesson11.c", 258
	lda     _joypad1
	and     #$02
	beq     L0878
;
; ++walk_count;
;
	.dbg	line, "lesson11.c", 260
	inc     _walk_count
;
; direction = 1;
;
	.dbg	line, "lesson11.c", 261
	lda     #$01
	sta     _direction
;
; if (X_speed <= 0)
;
	.dbg	line, "lesson11.c", 262
	lda     _X_speed
	sec
	sbc     #$01
	bvc     L06B8
	eor     #$80
L06B8:	bpl     L0876
;
; X_speed -= 2;
;
	.dbg	line, "lesson11.c", 264
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L0878
;
; else
;
	.dbg	line, "lesson11.c", 266
	jmp     L0878
;
; X_speed -= 8;//just stop
;
	.dbg	line, "lesson11.c", 268
L0876:	lda     _X_speed
	sec
	sbc     #$08
	sta     _X_speed
;
; if (X_speed < 0)
;
	.dbg	line, "lesson11.c", 269
	asl     a
	bcc     L0878
;
; X_speed = 0;
;
	.dbg	line, "lesson11.c", 270
	lda     #$00
	sta     _X_speed
;
; NametableB = Nametable;
;
	.dbg	line, "lesson11.c", 279
L0878:	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 3); //left
;
	.dbg	line, "lesson11.c", 280
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L086E
	inx
	clc
L086E:	adc     #$03
	bcc     L06CA
	inx
L06CA:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	.dbg	line, "lesson11.c", 281
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	.dbg	line, "lesson11.c", 282
	lda     _high_byte
	beq     L0879
;
; ++NametableB;    // the other nametable's collision map
;
	.dbg	line, "lesson11.c", 284
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	.dbg	line, "lesson11.c", 285
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 16) & 0xf0)); // bottom left
;
	.dbg	line, "lesson11.c", 288
L0879:	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; collision = 0;
;
	.dbg	line, "lesson11.c", 289
	lda     #$00
	sta     _collision
;
; CollisionDown();
;
	.dbg	line, "lesson11.c", 290
	jsr     _CollisionDown
;
; NametableB = Nametable;
;
	.dbg	line, "lesson11.c", 294
	lda     _Nametable
	sta     _NametableB
;
; Scroll_Adjusted_X = (X1 + Horiz_scroll + 12); // right
;
	.dbg	line, "lesson11.c", 295
	ldx     #$00
	lda     _X1
	clc
	adc     _Horiz_scroll
	bcc     L086F
	inx
	clc
L086F:	adc     #$0C
	bcc     L06E1
	inx
L06E1:	sta     _Scroll_Adjusted_X
	stx     _Scroll_Adjusted_X+1
;
; high_byte = Scroll_Adjusted_X >> 8;
;
	.dbg	line, "lesson11.c", 296
	lda     _Scroll_Adjusted_X+1
	sta     _high_byte
;
; if (high_byte != 0)
;
	.dbg	line, "lesson11.c", 297
	lda     _high_byte
	beq     L087A
;
; ++NametableB;    // the other nametable's collision map
;
	.dbg	line, "lesson11.c", 299
	inc     _NametableB
;
; NametableB &= 1; // keep it 0 or 1
;
	.dbg	line, "lesson11.c", 300
	lda     _NametableB
	and     #$01
	sta     _NametableB
;
; collision_Index = (((char)Scroll_Adjusted_X >> 4) + ((Y1 + 16) & 0xf0)); // bottom right
;
	.dbg	line, "lesson11.c", 302
L087A:	lda     _Scroll_Adjusted_X
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _Y1
	clc
	adc     #$10
	and     #$F0
	clc
	adc     ptr1
	sta     _collision_Index
;
; CollisionDown();
;
	.dbg	line, "lesson11.c", 303
	jsr     _CollisionDown
;
; if ((Y1 & 0x0f) > 1) // only platform collide if nearly aligned to a metatile
;
	.dbg	line, "lesson11.c", 305
	lda     _Y1
	and     #$0F
	cmp     #$02
	bcc     L087B
;
; collision = 0;
;
	.dbg	line, "lesson11.c", 306
	lda     #$00
	sta     _collision
;
; if (collision == 0)
;
	.dbg	line, "lesson11.c", 308
L087B:	lda     _collision
	bne     L087C
;
; Y_speed += 2; // gravity
;
	.dbg	line, "lesson11.c", 310
	lda     #$02
	clc
	adc     _Y_speed
	sta     _Y_speed
	bpl     L087D
;
; else
;
	.dbg	line, "lesson11.c", 312
	jmp     L087D
;
; Y_speed = 0; // collision = stop falling
;
	.dbg	line, "lesson11.c", 314
L087C:	lda     #$00
	sta     _Y_speed
;
; Y1 &= 0xf0;  // align to the metatile
;
	.dbg	line, "lesson11.c", 315
	lda     _Y1
	and     #$F0
	sta     _Y1
;
; if (collision > 0)
;
	.dbg	line, "lesson11.c", 319
L087D:	lda     _collision
	beq     L0881
;
; if (((joypad1 & A_BUTTON) != 0) && ((joypad1old & A_BUTTON) == 0))
;
	.dbg	line, "lesson11.c", 321
	lda     _joypad1
	and     #$80
	beq     L0881
	lda     _joypad1old
	and     #$80
	bne     L0881
;
; Y_speed = -0x38; // -0x38
;
	.dbg	line, "lesson11.c", 323
	lda     #$C8
	sta     _Y_speed
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 328
L0881:	ldx     _X_speed
	bmi     L070E
;
; if (X_speed > 0x20)
;
	.dbg	line, "lesson11.c", 330
	lda     _X_speed
	sec
	sbc     #$21
	bvs     L0714
	eor     #$80
L0714:	bpl     L0882
;
; X_speed = 0x20;
;
	.dbg	line, "lesson11.c", 331
	lda     #$20
;
; else
;
	.dbg	line, "lesson11.c", 333
	jmp     L086B
;
; if (X_speed < -0x20)
;
	.dbg	line, "lesson11.c", 335
L070E:	lda     _X_speed
	sec
	sbc     #$E0
	bvc     L071B
	eor     #$80
L071B:	bpl     L0882
;
; X_speed = -0x20; // -0x20
;
	.dbg	line, "lesson11.c", 336
	lda     #$E0
L086B:	sta     _X_speed
;
; if (Y_speed >= 0)
;
	.dbg	line, "lesson11.c", 339
L0882:	ldx     _Y_speed
	bmi     L0883
;
; if (Y_speed > 0x20)
;
	.dbg	line, "lesson11.c", 341
	lda     _Y_speed
	sec
	sbc     #$21
	bvs     L0724
	eor     #$80
L0724:	bpl     L0883
;
; Y_speed = 0x20;
;
	.dbg	line, "lesson11.c", 342
	lda     #$20
	sta     _Y_speed
;
; Horiz_scroll_Old = Horiz_scroll;
;
	.dbg	line, "lesson11.c", 346
L0883:	lda     _Horiz_scroll
	sta     _Horiz_scroll_Old
;
; if (X_speed >= 0)
;
	.dbg	line, "lesson11.c", 347
	ldx     _X_speed
	bmi     L0729
;
; if (X1 < 0x80)
;
	.dbg	line, "lesson11.c", 349
	ldx     #$00
	lda     _X1
	cmp     #$80
	bcs     L0884
;
; X1 += (X_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 351
	lda     _X_speed
	bpl     L0731
	dex
L0731:	jsr     asrax4
	clc
	adc     _X1
	sta     _X1
;
; if (X1 > 0x80)
;
	.dbg	line, "lesson11.c", 352
	cmp     #$81
	bcc     L0885
;
; X1 = 0x80;
;
	.dbg	line, "lesson11.c", 353
	lda     #$80
;
; else
;
	.dbg	line, "lesson11.c", 355
	jmp     L086C
;
; Horiz_scroll += (X_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 357
L0884:	lda     _X_speed
	bpl     L073A
	dex
L073A:	jsr     asrax4
	clc
	adc     _Horiz_scroll
	sta     _Horiz_scroll
;
; if (Horiz_scroll_Old > Horiz_scroll)
;
	.dbg	line, "lesson11.c", 358
	lda     _Horiz_scroll_Old
	sec
	sbc     _Horiz_scroll
	bcc     L0885
	beq     L0885
;
; ++Nametable;
;
	.dbg	line, "lesson11.c", 360
	inc     _Nametable
;
; ++Room;
;
	.dbg	line, "lesson11.c", 361
	inc     _Room
;
; else
;
	.dbg	line, "lesson11.c", 365
	jmp     L0885
;
; X1 += (X_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 367
L0729:	ldx     #$00
	lda     _X_speed
	bpl     L0743
	dex
L0743:	jsr     asrax4
	clc
	adc     _X1
	sta     _X1
;
; if (X1 > 0xc0)
;
	.dbg	line, "lesson11.c", 368
	cmp     #$C1
	bcc     L0885
;
; X1 = 0;
;
	.dbg	line, "lesson11.c", 369
	lda     #$00
L086C:	sta     _X1
;
; Nametable &= 1; // keep it 1 or 0
;
	.dbg	line, "lesson11.c", 372
L0885:	lda     _Nametable
	and     #$01
	sta     _Nametable
;
; Room &= 3; // keep it 0-3
;
	.dbg	line, "lesson11.c", 373
	lda     _Room
	and     #$03
	sta     _Room
;
; Y1 += (Y_speed >> 4); // use the high nibble
;
	.dbg	line, "lesson11.c", 381
	ldx     #$00
	lda     _Y_speed
	bpl     L0757
	dex
L0757:	jsr     asrax4
	clc
	adc     _Y1
	sta     _Y1
;
; if (walk_count > 0x1f) // walk_count forced 0-1f
;
	.dbg	line, "lesson11.c", 384
	lda     _walk_count
	cmp     #$20
	ldx     #$00
	bcc     L0886
;
; walk_count = 0;
;
	.dbg	line, "lesson11.c", 385
	stx     _walk_count
;
; state = Walk_Moves[(walk_count >> 3)]; // if not jumping
;
	.dbg	line, "lesson11.c", 387
L0886:	lda     _walk_count
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	txa
	clc
	adc     #>(_Walk_Moves)
	sta     ptr1+1
	ldy     #<(_Walk_Moves)
	lda     (ptr1),y
	sta     _state
;
; if (Y_speed < 0) // negative = jumping
;
	.dbg	line, "lesson11.c", 389
	lda     _Y_speed
	asl     a
	bcc     L0760
;
; state = 3;
;
	.dbg	line, "lesson11.c", 390
	lda     #$03
	sta     _state
;
; }
;
	.dbg	line, "lesson11.c", 391
L0760:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoBuffer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoBuffer: near

	.dbg	func, "DoBuffer", "00", extern, "_DoBuffer"

.segment	"CODE"

;
; BufferTiles();
;
	.dbg	line, "lesson11.c", 398
	jsr     _BufferTiles
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 400
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; BufferTiles2();
;
	.dbg	line, "lesson11.c", 402
	jsr     _BufferTiles2
;
; Horiz_scroll_Plus -= 0x10;
;
	.dbg	line, "lesson11.c", 404
	lda     _Horiz_scroll_Plus
	sec
	sbc     #$10
	sta     _Horiz_scroll_Plus
;
; }
;
	.dbg	line, "lesson11.c", 405
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoBuffer2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoBuffer2: near

	.dbg	func, "DoBuffer2", "00", extern, "_DoBuffer2"

.segment	"CODE"

;
; if (Nametable_Plus == 0)
;
	.dbg	line, "lesson11.c", 410
	lda     _Nametable_Plus
	bne     L088F
;
; PPU_ADDRESS_High = 0x24;
;
	.dbg	line, "lesson11.c", 412
	lda     #$24
;
; else
;
	.dbg	line, "lesson11.c", 414
	jmp     L088E
;
; PPU_ADDRESS_High = 0x20;
;
	.dbg	line, "lesson11.c", 416
L088F:	lda     #$20
L088E:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus & 0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	.dbg	line, "lesson11.c", 418
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	.dbg	line, "lesson11.c", 419
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	.dbg	line, "lesson11.c", 420
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU();
;
	.dbg	line, "lesson11.c", 421
	jmp     _Super_Fast_Write_PPU
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DoBuffer3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DoBuffer3: near

	.dbg	func, "DoBuffer3", "00", extern, "_DoBuffer3"

.segment	"CODE"

;
; if (Nametable_Plus == 0)
;
	.dbg	line, "lesson11.c", 427
	lda     _Nametable_Plus
	bne     L0891
;
; PPU_ADDRESS_High = 0x24;
;
	.dbg	line, "lesson11.c", 429
	lda     #$24
;
; else
;
	.dbg	line, "lesson11.c", 431
	jmp     L0890
;
; PPU_ADDRESS_High = 0x20;
;
	.dbg	line, "lesson11.c", 433
L0891:	lda     #$20
L0890:	sta     _PPU_ADDRESS_High
;
; PPU_ADDRESS_Low = ((Horiz_scroll_Plus & 0xf0) >> 3) + 0x80; // +80 because we're skipping the top
;
	.dbg	line, "lesson11.c", 435
	lda     _Horiz_scroll_Plus
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _PPU_ADDRESS_Low
;
; PPU_ADDRESS = PPU_ADDRESS_High;
;
	.dbg	line, "lesson11.c", 436
	lda     _PPU_ADDRESS_High
	sta     $2006
;
; PPU_ADDRESS = PPU_ADDRESS_Low;
;
	.dbg	line, "lesson11.c", 437
	lda     _PPU_ADDRESS_Low
	sta     $2006
;
; Super_Fast_Write_PPU2();
;
	.dbg	line, "lesson11.c", 438
	jmp     _Super_Fast_Write_PPU2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ DrawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawBackground: near

	.dbg	func, "DrawBackground", "00", extern, "_DrawBackground"

.segment	"CODE"

;
; memcpy(C_MAP, A1, 240);
;
	.dbg	line, "lesson11.c", 446
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	jsr     pushax
	lda     #<(_A1)
	ldx     #>(_A1)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy(C_MAP2, A2, 240);
;
	.dbg	line, "lesson11.c", 447
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	jsr     pushax
	lda     #<(_A2)
	ldx     #>(_A2)
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; Nametable_Plus = 1;
;
	.dbg	line, "lesson11.c", 450
	lda     #$01
	sta     _Nametable_Plus
;
; PPU_CTRL = 4; // sets to downward increments when writing to PPU
;
	.dbg	line, "lesson11.c", 451
	lda     #$04
	sta     $2000
;
; for (A = 0; A < 8; ++A)
;
	.dbg	line, "lesson11.c", 452
	lda     #$00
	sta     _A
L0892:	lda     _A
	cmp     #$08
	bcs     L0893
;
; DoBuffer(); // fill buffer
;
	.dbg	line, "lesson11.c", 454
	jsr     _DoBuffer
;
; DoBuffer2(); // draw to ppu
;
	.dbg	line, "lesson11.c", 455
	jsr     _DoBuffer2
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 456
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; DoBuffer3(); // draw to ppu
;
	.dbg	line, "lesson11.c", 457
	jsr     _DoBuffer3
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 458
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; for (A = 0; A < 8; ++A)
;
	.dbg	line, "lesson11.c", 452
	inc     _A
	jmp     L0892
;
; --Nametable_Plus;
;
	.dbg	line, "lesson11.c", 460
L0893:	dec     _Nametable_Plus
;
; for (A = 0; A < 8; ++A)
;
	.dbg	line, "lesson11.c", 461
	lda     #$00
	sta     _A
L0894:	lda     _A
	cmp     #$08
	bcs     L07B3
;
; DoBuffer(); // fill buffer
;
	.dbg	line, "lesson11.c", 463
	jsr     _DoBuffer
;
; DoBuffer2(); // draw to ppu
;
	.dbg	line, "lesson11.c", 464
	jsr     _DoBuffer2
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 465
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; DoBuffer3(); // draw to ppu
;
	.dbg	line, "lesson11.c", 466
	jsr     _DoBuffer3
;
; Horiz_scroll_Plus += 0x10;
;
	.dbg	line, "lesson11.c", 467
	lda     #$10
	clc
	adc     _Horiz_scroll_Plus
	sta     _Horiz_scroll_Plus
;
; for (A = 0; A < 8; ++A)
;
	.dbg	line, "lesson11.c", 461
	inc     _A
	jmp     L0894
;
; }
;
	.dbg	line, "lesson11.c", 469
L07B3:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ SetSpriteZero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetSpriteZero: near

	.dbg	func, "SetSpriteZero", "00", extern, "_SetSpriteZero"

.segment	"CODE"

;
; SPRITE_ZERO[0] = 0x16; // y
;
	.dbg	line, "lesson11.c", 474
	lda     #$16
	sta     _SPRITE_ZERO
;
; SPRITE_ZERO[1] = 0x30; // tile
;
	.dbg	line, "lesson11.c", 475
	lda     #$30
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0;  // attributes
;
	.dbg	line, "lesson11.c", 476
	lda     #$00
	sta     _SPRITE_ZERO+2
;
; SPRITE_ZERO[3] = 0xd0; // x
;
	.dbg	line, "lesson11.c", 477
	lda     #$D0
	sta     _SPRITE_ZERO+3
;
; }
;
	.dbg	line, "lesson11.c", 478
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ LoadHud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_LoadHud: near

	.dbg	func, "LoadHud", "00", extern, "_LoadHud"

.segment	"CODE"

;
; PPU_ADDRESS = 0x20;
;
	.dbg	line, "lesson11.c", 483
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x42;
;
	.dbg	line, "lesson11.c", 484
	lda     #$42
	sta     $2006
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	.dbg	line, "lesson11.c", 485
	lda     #$00
	sta     _index
L0895:	lda     _index
	cmp     #$18
	bcs     L0896
;
; PPU_DATA = HUD[index];
;
	.dbg	line, "lesson11.c", 487
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for (index = 0; index < sizeof(HUD); ++index)
;
	.dbg	line, "lesson11.c", 485
	inc     _index
	jmp     L0895
;
; PPU_DATA = 3;
;
	.dbg	line, "lesson11.c", 489
L0896:	lda     #$03
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	.dbg	line, "lesson11.c", 490
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	.dbg	line, "lesson11.c", 491
	lda     #$C0
	sta     $2006
;
; for (index = 0; index < 8; ++index)
;
	.dbg	line, "lesson11.c", 492
	lda     #$00
	sta     _index
L0897:	lda     _index
	cmp     #$08
	bcs     L07ED
;
; PPU_DATA = 0xaa;
;
	.dbg	line, "lesson11.c", 494
	lda     #$AA
	sta     $2007
;
; for (index = 0; index < 8; ++index)
;
	.dbg	line, "lesson11.c", 492
	inc     _index
	jmp     L0897
;
; }
;
	.dbg	line, "lesson11.c", 496
L07ED:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ ShouldWeBuffer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ShouldWeBuffer: near

	.dbg	func, "ShouldWeBuffer", "00", extern, "_ShouldWeBuffer"

.segment	"CODE"

;
; if (direction == 0)
;
	.dbg	line, "lesson11.c", 507
	lda     _direction
	bne     L0800
;
; if ((Horiz_scroll_Plus & 0x1e) == 0x02)
;
	.dbg	line, "lesson11.c", 509
	lda     _Horiz_scroll_Plus
	and     #$1E
	cmp     #$02
	bne     L0898
;
; BufferTiles();
;
	.dbg	line, "lesson11.c", 511
	jsr     _BufferTiles
;
; ++PPU_flag;
;
	.dbg	line, "lesson11.c", 512
	inc     _PPU_flag
;
; if ((Horiz_scroll_Plus & 0x1e) == 0x10)
;
	.dbg	line, "lesson11.c", 514
L0898:	lda     _Horiz_scroll_Plus
	and     #$1E
	cmp     #$10
	bne     L0800
;
; BufferTiles2();
;
	.dbg	line, "lesson11.c", 516
	jsr     _BufferTiles2
;
; ++PPU_flag2;
;
	.dbg	line, "lesson11.c", 517
	inc     _PPU_flag2
;
; }
;
	.dbg	line, "lesson11.c", 520
L0800:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ NewRoom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_NewRoom: near

	.dbg	func, "NewRoom", "00", extern, "_NewRoom"

.segment	"CODE"

;
; RoomB = RoomPlus + 1;
;
	.dbg	line, "lesson11.c", 528
	lda     _RoomPlus
	clc
	adc     #$01
	sta     _RoomB
;
; RoomB &= 3; // keep it 0-3, we only have 4 rooms
;
	.dbg	line, "lesson11.c", 529
	and     #$03
	sta     _RoomB
;
; Room_Address = ROOMS[RoomB]; // get the address of the room data
;
	.dbg	line, "lesson11.c", 530
	ldx     #$00
	lda     _RoomB
	asl     a
	bcc     L089E
	inx
	clc
L089E:	adc     #<(_ROOMS)
	sta     ptr1
	txa
	adc     #>(_ROOMS)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _Room_Address+1
	dey
	lda     (ptr1),y
	sta     _Room_Address
;
; A = Horiz_scroll_Plus >> 4;
;
	.dbg	line, "lesson11.c", 531
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _A
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "lesson11.c", 532
	lda     _Nametable_Plus
	bne     L08A0
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 534
	sta     _index
	tax
L089F:	lda     _index
	cmp     #$0F
	bcs     L08A2
;
; C_MAP2[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 536
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	clc
	adc     _A
	bcc     L081D
	inx
L081D:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 537
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 534
	ldx     #$00
	inc     _index
	jmp     L089F
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 542
L08A0:	tya
	sta     _index
	tax
L08A1:	lda     _index
	cmp     #$0F
	bcs     L08A2
;
; C_MAP[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 544
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	clc
	adc     _A
	bcc     L082D
	inx
L082D:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 545
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 542
	ldx     #$00
	inc     _index
	jmp     L08A1
;
; A = (Horiz_scroll_Plus + 0x10) >> 4;
;
	.dbg	line, "lesson11.c", 551
L08A2:	lda     _Horiz_scroll_Plus
	clc
	adc     #$10
	bcc     L0835
	inx
L0835:	jsr     shrax4
	sta     _A
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "lesson11.c", 552
	lda     _Nametable_Plus
	bne     L08A4
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 554
	sta     _index
L08A3:	lda     _index
	cmp     #$0F
	bcs     L0849
;
; C_MAP2[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 556
	lda     #<(_C_MAP2)
	ldx     #>(_C_MAP2)
	clc
	adc     _A
	bcc     L0842
	inx
L0842:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 557
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 554
	inc     _index
	jmp     L08A3
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 562
L08A4:	lda     #$00
	sta     _index
L08A5:	lda     _index
	cmp     #$0F
	bcs     L0849
;
; C_MAP[A] = Room_Address[A];
;
	.dbg	line, "lesson11.c", 564
	lda     #<(_C_MAP)
	ldx     #>(_C_MAP)
	clc
	adc     _A
	bcc     L0852
	inx
L0852:	jsr     pushax
	lda     _Room_Address
	ldx     _Room_Address+1
	ldy     _A
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; A += 0x10;
;
	.dbg	line, "lesson11.c", 565
	lda     #$10
	clc
	adc     _A
	sta     _A
;
; for (index = 0; index < 15; ++index)
;
	.dbg	line, "lesson11.c", 562
	inc     _index
	jmp     L08A5
;
; }
;
	.dbg	line, "lesson11.c", 568
L0849:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ BufferTiles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BufferTiles: near

	.dbg	func, "BufferTiles", "00", extern, "_BufferTiles"

.segment	"CODE"

;
; index = 2;  // will be skipping the top 2 metatiles, it's the HUD
;
	.dbg	line, "BufferMT.c", 6
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	.dbg	line, "BufferMT.c", 7
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	.dbg	line, "BufferMT.c", 8
	tax
	sta     _index3
;
; while (index < 15)
;
	.dbg	line, "BufferMT.c", 9
	jmp     L08AB
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "BufferMT.c", 12
L08A8:	lda     _Nametable_Plus
	bne     L08A9
;
; temp = C_MAP2[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 14
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else
;
	.dbg	line, "BufferMT.c", 16
	jmp     L08AC
;
; temp = C_MAP[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 18
L08A9:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08AC:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get color, store temp
;
	.dbg	line, "BufferMT.c", 21
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 23
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 25
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L0491
	inx
L0491:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 26
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 27
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L0498
	inx
L0498:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 29
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 30
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 31
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04A0
	inx
L04A0:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 32
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 33
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04A7
	inx
L04A7:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 35
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 36
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	.dbg	line, "BufferMT.c", 38
	inc     _index
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "BufferMT.c", 41
	ldx     #$00
	lda     _Nametable_Plus
	bne     L08AA
;
; temp = C_MAP2[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 43
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else
;
	.dbg	line, "BufferMT.c", 45
	jmp     L08AD
;
; temp = C_MAP[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the metatile
;
	.dbg	line, "BufferMT.c", 47
L08AA:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08AD:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get color, store temp
;
	.dbg	line, "BufferMT.c", 50
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER5[index3] = temp3;
;
	.dbg	line, "BufferMT.c", 51
	ldy     _index3
	lda     _temp3
	sta     _BUFFER5,y
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 53
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER1[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 55
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04C8
	inx
L04C8:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 56
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 57
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04CF
	inx
L04CF:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 59
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 60
	inc     _index2
;
; BUFFER1[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 61
	lda     #<(_BUFFER1)
	ldx     #>(_BUFFER1)
	clc
	adc     _index2
	bcc     L04D7
	inx
L04D7:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 62
	inc     _temp
;
; BUFFER2[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 63
	lda     #<(_BUFFER2)
	ldx     #>(_BUFFER2)
	clc
	adc     _index2
	bcc     L04DE
	inx
L04DE:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 65
	inc     _index2
;
; ++index3;
;
	.dbg	line, "BufferMT.c", 66
	inc     _index3
;
; ++index;
;
	.dbg	line, "BufferMT.c", 67
	inc     _index
;
; while (index < 15)
;
	.dbg	line, "BufferMT.c", 9
	ldx     #$00
L08AB:	lda     _index
	cmp     #$0F
	jcc     L08A8
;
; }
;
	.dbg	line, "BufferMT.c", 69
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ BufferTiles2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BufferTiles2: near

	.dbg	func, "BufferTiles2", "00", extern, "_BufferTiles2"

.segment	"CODE"

;
; index = 2; // will be skipping the top 2 metatiles, later
;
	.dbg	line, "BufferMT.c", 74
	lda     #$02
	sta     _index
;
; index2 = 0;
;
	.dbg	line, "BufferMT.c", 75
	lda     #$00
	sta     _index2
;
; index3 = 0;
;
	.dbg	line, "BufferMT.c", 76
	tax
	sta     _index3
;
; while (index < 15)
;
	.dbg	line, "BufferMT.c", 77
	jmp     L08B4
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "BufferMT.c", 80
L08B1:	lda     _Nametable_Plus
	bne     L08B2
;
; temp = C_MAP2[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 82
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else
;
	.dbg	line, "BufferMT.c", 84
	jmp     L08B6
;
; temp = C_MAP[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 86
L08B2:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08B6:	lda     (ptr1),y
	sta     _temp
;
; temp3 = MT_color[temp]; // get palette #, store temp3
;
	.dbg	line, "BufferMT.c", 89
	ldy     _temp
	lda     _MT_color,y
	sta     _temp3
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 91
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 93
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0505
	inx
L0505:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 94
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 95
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L050C
	inx
L050C:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 97
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 98
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 99
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L0514
	inx
L0514:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 100
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 101
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L051B
	inx
L051B:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 103
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 104
	inc     _index2
;
; ++index; // next round, difference is attribute table stuff
;
	.dbg	line, "BufferMT.c", 106
	inc     _index
;
; if (Nametable_Plus == 0)
;
	.dbg	line, "BufferMT.c", 109
	ldx     #$00
	lda     _Nametable_Plus
	bne     L08B3
;
; temp = C_MAP2[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 111
	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP2)
	sta     ptr1+1
	ldy     #<(_C_MAP2)
;
; else
;
	.dbg	line, "BufferMT.c", 113
	jmp     L08B7
;
; temp = C_MAP[(Horiz_scroll_Plus >> 4) + (index << 4)]; // get the mt
;
	.dbg	line, "BufferMT.c", 115
L08B3:	lda     _Horiz_scroll_Plus
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _index
	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_C_MAP)
	sta     ptr1+1
	ldy     #<(_C_MAP)
L08B7:	lda     (ptr1),y
	sta     _temp
;
; temp3 += (MT_color[temp] << 4); // get palette #, store temp3
;
	.dbg	line, "BufferMT.c", 118
	ldy     _temp
	lda     _MT_color,y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; BUFFER6[index3] = temp3 << 2;
;
	.dbg	line, "BufferMT.c", 119
	lda     #<(_BUFFER6)
	ldx     #>(_BUFFER6)
	clc
	adc     _index3
	bcc     L0536
	inx
L0536:	sta     ptr1
	stx     ptr1+1
	lda     _temp3
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; temp <<= 2; // x 4
;
	.dbg	line, "BufferMT.c", 121
	lda     _temp
	asl     a
	asl     a
	sta     _temp
;
; BUFFER3[index2] = METATILES[temp]; // get the tl tile
;
	.dbg	line, "BufferMT.c", 123
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L053C
	inx
L053C:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 124
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the tr tile
;
	.dbg	line, "BufferMT.c", 125
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L0543
	inx
L0543:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 127
	inc     _temp
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 128
	inc     _index2
;
; BUFFER3[index2] = METATILES[temp]; // get the bl tile
;
	.dbg	line, "BufferMT.c", 129
	lda     #<(_BUFFER3)
	ldx     #>(_BUFFER3)
	clc
	adc     _index2
	bcc     L054B
	inx
L054B:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++temp;
;
	.dbg	line, "BufferMT.c", 130
	inc     _temp
;
; BUFFER4[index2] = METATILES[temp]; // get the br tile
;
	.dbg	line, "BufferMT.c", 131
	lda     #<(_BUFFER4)
	ldx     #>(_BUFFER4)
	clc
	adc     _index2
	bcc     L0552
	inx
L0552:	sta     ptr1
	stx     ptr1+1
	ldy     _temp
	lda     _METATILES,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index2;
;
	.dbg	line, "BufferMT.c", 133
	inc     _index2
;
; ++index3;
;
	.dbg	line, "BufferMT.c", 134
	inc     _index3
;
; ++index;
;
	.dbg	line, "BufferMT.c", 135
	inc     _index
;
; while (index < 15)
;
	.dbg	line, "BufferMT.c", 77
	ldx     #$00
L08B4:	lda     _index
	cmp     #$0F
	jcc     L08B1
;
; for (index = 0; index < 8; ++index)
;
	.dbg	line, "BufferMT.c", 139
	stx     _index
L08B5:	lda     _index
	cmp     #$08
	bcs     L055A
;
; BUFFER7[index] = BUFFER5[index] + BUFFER6[index];
;
	.dbg	line, "BufferMT.c", 141
	lda     #<(_BUFFER7)
	ldx     #>(_BUFFER7)
	clc
	adc     _index
	bcc     L0563
	inx
L0563:	sta     sreg
	stx     sreg+1
	ldy     _index
	lda     _BUFFER5,y
	sta     ptr1
	ldy     _index
	lda     _BUFFER6,y
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; for (index = 0; index < 8; ++index)
;
	.dbg	line, "BufferMT.c", 139
	inc     _index
	jmp     L08B5
;
; }
;
	.dbg	line, "BufferMT.c", 143
L055A:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ TestLabel (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_TestLabel: near

	.dbg	func, "TestLabel", "00", extern, "_TestLabel"

.segment	"CODE"

;
; ++dummy;
;
	.dbg	line, "lesson11.c", 35
	inc     _dummy
;
; }
;
	.dbg	line, "lesson11.c", 36
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; AllOff(); // turn off screen
;
	.dbg	line, "lesson11.c", 40
	jsr     _AllOff
;
; DrawBackground();
;
	.dbg	line, "lesson11.c", 41
	jsr     _DrawBackground
;
; X1 = 0x80; // starting position
;
	.dbg	line, "lesson11.c", 42
	lda     #$80
	sta     _X1
;
; Y1 = 0x70; // middle of screen
;
	.dbg	line, "lesson11.c", 43
	lda     #$70
	sta     _Y1
;
; SetSpriteZero();
;
	.dbg	line, "lesson11.c", 44
	jsr     _SetSpriteZero
;
; PPU_CTRL = 0x90; // rightward increments to PPU
;
	.dbg	line, "lesson11.c", 45
	lda     #$90
	sta     $2000
;
; LoadPalette();
;
	.dbg	line, "lesson11.c", 46
	jsr     _LoadPalette
;
; LoadHud();
;
	.dbg	line, "lesson11.c", 47
	jsr     _LoadHud
;
; ResetScroll();
;
	.dbg	line, "lesson11.c", 48
	jsr     _ResetScroll
;
; Wait_Vblank();
;
	.dbg	line, "lesson11.c", 49
	jsr     _Wait_Vblank
;
; AllOn(); // turn on screen
;
	.dbg	line, "lesson11.c", 50
	jsr     _AllOn
;
; while (NMI_flag == 0); // wait till NMI
;
	.dbg	line, "lesson11.c", 55
L08B8:	lda     _NMI_flag
	beq     L08B8
;
; if (PPU_flag != 0)
;
	.dbg	line, "lesson11.c", 57
	lda     _PPU_flag
	beq     L08B9
;
; DoBuffer2();
;
	.dbg	line, "lesson11.c", 58
	jsr     _DoBuffer2
;
; PPU_CTRL = 0x94;
;
	.dbg	line, "lesson11.c", 59
L08B9:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 60
	lda     #$00
	sta     $2005
;
; SCROLL = 0;  // resetting scroll position, again
;
	.dbg	line, "lesson11.c", 61
	sta     $2005
;
; if (PPU_flag2 != 0)
;
	.dbg	line, "lesson11.c", 63
	lda     _PPU_flag2
	beq     L08BA
;
; DoBuffer3();
;
	.dbg	line, "lesson11.c", 64
	jsr     _DoBuffer3
;
; PPU_CTRL = 0x94;
;
	.dbg	line, "lesson11.c", 65
L08BA:	lda     #$94
	sta     $2000
;
; SCROLL = 0;
;
	.dbg	line, "lesson11.c", 66
	lda     #$00
	sta     $2005
;
; SCROLL = 0;  // resetting scroll position, again
;
	.dbg	line, "lesson11.c", 67
	sta     $2005
;
; Get_Input();
;
	.dbg	line, "lesson11.c", 70
	jsr     _Get_Input
;
; PPU_flag = 0;
;
	.dbg	line, "lesson11.c", 71
	lda     #$00
	sta     _PPU_flag
;
; PPU_flag2 = 0;
;
	.dbg	line, "lesson11.c", 72
	sta     _PPU_flag2
;
; if ((joypad1 & START) != 0)
;
	.dbg	line, "lesson11.c", 74
	lda     _joypad1
	and     #$10
	beq     L05A0
;
; SPRITE_ZERO[1] = 0xff; // switch tiles to a very small one
;
	.dbg	line, "lesson11.c", 76
	lda     #$FF
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0x20; // attributes = behind the bg
;
	.dbg	line, "lesson11.c", 77
	lda     #$20
	sta     _SPRITE_ZERO+2
;
; Sprite_Zero();
;
	.dbg	line, "lesson11.c", 81
L05A0:	jsr     _Sprite_Zero
;
; SCROLL = Horiz_scroll;
;
	.dbg	line, "lesson11.c", 83
	lda     _Horiz_scroll
	sta     $2005
;
; SCROLL = 0;  // setting the new scroll position
;
	.dbg	line, "lesson11.c", 84
	lda     #$00
	sta     $2005
;
; PPU_CTRL = (0x94 + Nametable);
;
	.dbg	line, "lesson11.c", 85
	lda     _Nametable
	clc
	adc     #$94
	sta     $2000
;
; MoveLogic();
;
	.dbg	line, "lesson11.c", 87
	jsr     _MoveLogic
;
; UpdateSprites();
;
	.dbg	line, "lesson11.c", 88
	jsr     _UpdateSprites
;
; RoomPlus = Room; // make a copy of variables, but 20 pixels right
;
	.dbg	line, "lesson11.c", 93
	lda     _Room
	sta     _RoomPlus
;
; Nametable_Plus = Nametable;
;
	.dbg	line, "lesson11.c", 94
	lda     _Nametable
	sta     _Nametable_Plus
;
; Horiz_scroll_Plus = Horiz_scroll + 0x20;
;
	.dbg	line, "lesson11.c", 95
	lda     _Horiz_scroll
	clc
	adc     #$20
	sta     _Horiz_scroll_Plus
;
; if (Horiz_scroll_Plus < 0x20)
;
	.dbg	line, "lesson11.c", 96
	cmp     #$20
	bcs     L08BB
;
; ++RoomPlus;
;
	.dbg	line, "lesson11.c", 98
	inc     _RoomPlus
;
; ++Nametable_Plus;
;
	.dbg	line, "lesson11.c", 99
	inc     _Nametable_Plus
;
; RoomPlus &= 3;
;
	.dbg	line, "lesson11.c", 100
	lda     _RoomPlus
	and     #$03
	sta     _RoomPlus
;
; Nametable_Plus &= 1;
;
	.dbg	line, "lesson11.c", 101
	lda     _Nametable_Plus
	and     #$01
	sta     _Nametable_Plus
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 104
L08BB:	inc     $00FF
;
; if ((Horiz_scroll_Plus & 0x1e) == 0)
;
	.dbg	line, "lesson11.c", 105
	lda     _Horiz_scroll_Plus
	and     #$1E
	bne     L08BC
;
; NewRoom(); // 6245 cycles
;
	.dbg	line, "lesson11.c", 106
	jsr     _NewRoom
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 108
L08BC:	inc     $00FF
;
; ShouldWeBuffer(); // 4422 cycles
;
	.dbg	line, "lesson11.c", 109
	jsr     _ShouldWeBuffer
;
; ++TEST; // for debugging
;
	.dbg	line, "lesson11.c", 110
	inc     $00FF
;
; PPU_MASK = 0xff; // for debugging, turns screen grey to show how much of frame left
;
	.dbg	line, "lesson11.c", 111
	lda     #$FF
	sta     $2001
;
; for (temp = 0; temp < 8; temp++)
;
	.dbg	line, "lesson11.c", 116
	lda     #$00
	sta     _temp
L08BD:	lda     _temp
	cmp     #$08
	bcs     L08BE
;
; ++dummy;
;
	.dbg	line, "lesson11.c", 118
	inc     _dummy
;
; for (temp = 0; temp < 8; temp++)
;
	.dbg	line, "lesson11.c", 116
	inc     _temp
	jmp     L08BD
;
; PPU_MASK = 0x1e; // turn screen color back to regular
;
	.dbg	line, "lesson11.c", 120
L08BE:	lda     #$1E
	sta     $2001
;
; NMI_flag = 0;
;
	.dbg	line, "lesson11.c", 122
	lda     #$00
	sta     _NMI_flag
;
; while (1)
;
	.dbg	line, "lesson11.c", 53
	jmp     L08B8
	.dbg	line

.endproc

