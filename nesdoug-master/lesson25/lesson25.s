;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "lesson25.c", 3128, 1502301714
	.dbg		file, "neslib.h", 8578, 1492006296
	.dbg		file, "lesson25.h", 1656, 1502305480
	.dbg		file, "Sprites.c", 309, 1502116656
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "CheckCollision", "00", extern, "_CheckCollision"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.export		_PAD_STATE
	.export		_PAD_STATE2
	.export		_PAD_STATET
	.export		_PAD_STATET2
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_collision
	.export		_sprid
	.import		_CheckCollision
	.export		_Yellow
	.export		_Blue
	.export		_TEXT
	.export		_PALETTE_BG
	.export		_PALETTE_SP
	.export		_main

.segment	"RODATA"

_Yellow:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_Blue:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_TEXT:
	.byte	$53,$70,$72,$69,$74,$65,$20,$43,$6F,$6C,$6C,$69,$73,$69,$6F,$6E
	.byte	$00
_PALETTE_BG:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_PALETTE_SP:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_PAD_STATE:
	.res	1,$00
_PAD_STATE2:
	.res	1,$00
_PAD_STATET:
	.res	1,$00
_PAD_STATET2:
	.res	1,$00
.segment	"BSS"
_BoxGuy1:
	.res	4,$00
_BoxGuy2:
	.res	4,$00
_collision:
	.res	1,$00
_sprid:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; pal_bg(PALETTE_BG);
;
	.dbg	line, "lesson25.c", 43
	lda     #<(_PALETTE_BG)
	ldx     #>(_PALETTE_BG)
	jsr     _pal_bg
;
; pal_spr(PALETTE_SP);
;
	.dbg	line, "lesson25.c", 44
	lda     #<(_PALETTE_SP)
	ldx     #>(_PALETTE_SP)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "lesson25.c", 48
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(7,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "lesson25.c", 53
	ldx     #$21
	lda     #$C7
	jsr     _vram_adr
;
; vram_write((unsigned char*)TEXT,sizeof(TEXT));
;
	.dbg	line, "lesson25.c", 56
	lda     #<(_TEXT)
	ldx     #>(_TEXT)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _vram_write
;
; ppu_on_all();
;
	.dbg	line, "lesson25.c", 65
	jsr     _ppu_on_all
;
; BoxGuy1.X = 16;
;
	.dbg	line, "lesson25.c", 71
	lda     #$10
	sta     _BoxGuy1
;
; BoxGuy1.Y = 16;
;
	.dbg	line, "lesson25.c", 72
	sta     _BoxGuy1+1
;
; BoxGuy2.X = 48;
;
	.dbg	line, "lesson25.c", 73
	lda     #$30
	sta     _BoxGuy2
;
; BoxGuy2.Y = 16;
;
	.dbg	line, "lesson25.c", 74
	lda     #$10
	sta     _BoxGuy2+1
;
; BoxGuy1.width = 16;
;
	.dbg	line, "lesson25.c", 75
	sta     _BoxGuy1+2
;
; BoxGuy1.height = 16;
;
	.dbg	line, "lesson25.c", 76
	sta     _BoxGuy1+3
;
; BoxGuy2.width = 16;
;
	.dbg	line, "lesson25.c", 77
	sta     _BoxGuy2+2
;
; BoxGuy2.height = 16;
;
	.dbg	line, "lesson25.c", 78
	sta     _BoxGuy2+3
;
; ppu_wait_nmi();
;
	.dbg	line, "lesson25.c", 84
L0069:	jsr     _ppu_wait_nmi
;
; pad_poll(0); // read controller 1
;
	.dbg	line, "lesson25.c", 86
	lda     #$00
	jsr     _pad_poll
;
; pad_poll(1); // read controller 2
;
	.dbg	line, "lesson25.c", 87
	lda     #$01
	jsr     _pad_poll
;
; oam_clear();
;
	.dbg	line, "lesson25.c", 93
	jsr     _oam_clear
;
; sprid = 0;
;
	.dbg	line, "lesson25.c", 96
	lda     #$00
	sta     _sprid
;
; sprid = oam_meta_spr(BoxGuy1.X, BoxGuy1.Y, sprid, Yellow);
;
	.dbg	line, "lesson25.c", 100
	jsr     decsp3
	lda     _BoxGuy1
	ldy     #$02
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     _sprid
	dey
	sta     (sp),y
	lda     #<(_Yellow)
	ldx     #>(_Yellow)
	jsr     _oam_meta_spr
	sta     _sprid
;
; sprid = oam_meta_spr(BoxGuy2.X, BoxGuy2.Y, sprid, Blue);
;
	.dbg	line, "lesson25.c", 102
	jsr     decsp3
	lda     _BoxGuy2
	ldy     #$02
	sta     (sp),y
	lda     _BoxGuy2+1
	dey
	sta     (sp),y
	lda     _sprid
	dey
	sta     (sp),y
	lda     #<(_Blue)
	ldx     #>(_Blue)
	jsr     _oam_meta_spr
	sta     _sprid
;
; if(PAD_STATE & PAD_LEFT){
;
	.dbg	line, "lesson25.c", 106
	lda     _PAD_STATE
	and     #$40
	beq     L00B6
;
; BoxGuy1.X -= 1;
;
	.dbg	line, "lesson25.c", 107
	dec     _BoxGuy1
;
; else if (PAD_STATE & PAD_RIGHT){
;
	.dbg	line, "lesson25.c", 109
	jmp     L00B7
L00B6:	lda     _PAD_STATE
	and     #$80
	beq     L00B7
;
; BoxGuy1.X += 1;
;
	.dbg	line, "lesson25.c", 110
	inc     _BoxGuy1
;
; if(PAD_STATE & PAD_UP){
;
	.dbg	line, "lesson25.c", 112
L00B7:	lda     _PAD_STATE
	and     #$10
	beq     L00B8
;
; BoxGuy1.Y -= 1;
;
	.dbg	line, "lesson25.c", 113
	dec     _BoxGuy1+1
;
; else if (PAD_STATE & PAD_DOWN){
;
	.dbg	line, "lesson25.c", 115
	jmp     L00B9
L00B8:	lda     _PAD_STATE
	and     #$20
	beq     L00B9
;
; BoxGuy1.Y += 1;
;
	.dbg	line, "lesson25.c", 116
	inc     _BoxGuy1+1
;
; if(PAD_STATE2 & PAD_LEFT){
;
	.dbg	line, "lesson25.c", 119
L00B9:	lda     _PAD_STATE2
	and     #$40
	beq     L00BA
;
; BoxGuy2.X -= 1;
;
	.dbg	line, "lesson25.c", 120
	dec     _BoxGuy2
;
; else if (PAD_STATE2 & PAD_RIGHT){
;
	.dbg	line, "lesson25.c", 122
	jmp     L00BB
L00BA:	lda     _PAD_STATE2
	and     #$80
	beq     L00BB
;
; BoxGuy2.X += 1;
;
	.dbg	line, "lesson25.c", 123
	inc     _BoxGuy2
;
; if(PAD_STATE2 & PAD_UP){
;
	.dbg	line, "lesson25.c", 125
L00BB:	lda     _PAD_STATE2
	and     #$10
	beq     L00BC
;
; BoxGuy2.Y -= 1;
;
	.dbg	line, "lesson25.c", 126
	dec     _BoxGuy2+1
;
; else if (PAD_STATE2 & PAD_DOWN){
;
	.dbg	line, "lesson25.c", 128
	jmp     L00A1
L00BC:	lda     _PAD_STATE2
	and     #$20
	beq     L00A1
;
; BoxGuy2.Y += 1;
;
	.dbg	line, "lesson25.c", 129
	inc     _BoxGuy2+1
;
; collision = CheckCollision(&BoxGuy1, &BoxGuy2);
;
	.dbg	line, "lesson25.c", 135
L00A1:	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     _CheckCollision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "lesson25.c", 138
	lda     _collision
	beq     L00BD
;
; pal_col(0,0x30); 
;
	.dbg	line, "lesson25.c", 139
	lda     #$00
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; else{
;
	.dbg	line, "lesson25.c", 141
	jmp     L0069
;
; pal_col(0,0x00);
;
	.dbg	line, "lesson25.c", 142
L00BD:	jsr     pusha
	jsr     _pal_col
;
; while (1){
;
	.dbg	line, "lesson25.c", 82
	jmp     L0069
	.dbg	line

.endproc

