;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_X_old
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Vert_scroll
	.export		_Vert_scroll2
	.export		_X_speed
	.export		_Y_speed
	.export		_collision
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_song
	.export		_Game_Mode
	.export		_Wait
	.export		_Wait2
	.export		_Score1
	.export		_Score2
	.export		_Score3
	.export		_Lives
	.export		_Sprite_Index
	.export		_SPRITES
	.export		_dummy
	.export		_hero_ship
	.export		_Title
	.export		_Stars
	.export		_PALETTE
	.export		_HUD
	.export		_HUD2
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Rotate_Palette
	.export		_Load_Palette
	.export		_Draw_Hero
	.export		_move_logic
	.export		_Draw_Title
	.export		_Draw_Background
	.export		_Turn_On_Pause_Sprites
	.export		_Turn_On_Game_Over_Sprites
	.export		_Turn_On_Victory_Sprites
	.export		_Set_Sprite_Zero
	.import		_Reset
	.import		_Blank_sprite
	.import		_Play_Fx
	.import		_Reset_Music
	.import		_Play_Music
	.import		_Music_Update
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.import		_Draw_Sprites
	.export		_main
	.export		_Palette_Fade

.segment	"RODATA"

_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C7
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$AF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$00
	.byte	$44
	.byte	$6F
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$46
	.byte	$72
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$20
	.byte	$55
	.byte	$70
	.byte	$64
	.byte	$61
	.byte	$74
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$41
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$00
	.byte	$01
	.byte	$A9
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$01
	.byte	$00
_Stars:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$39
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$01
	.byte	$00
_PALETTE:
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$01
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_Palette_Fade:
	.byte	$24
	.byte	$14
	.byte	$04
	.byte	$14

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X_old:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Vert_scroll:
	.res	1,$00
_Vert_scroll2:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_collision:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_song:
	.res	1,$00
_Game_Mode:
	.res	1,$00
_Wait:
	.res	1,$00
_Wait2:
	.res	1,$00
_Score1:
	.res	1,$00
_Score2:
	.res	1,$00
_Score3:
	.res	1,$00
_Lives:
	.res	1,$00
_Sprite_Index:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00
.segment	"BSS"
_dummy:
	.res	8,$00
_hero_ship:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }  
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Rotate_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Rotate_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; PPU_DATA = Palette_Fade[(Frame_Count >> 2) & 0x03];
;
	lda     _Frame_Count
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_Palette_Fade)
	sta     ptr1+1
	ldy     #<(_Palette_Fade)
	lda     (ptr1),y
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L03E0:	lda     _index
	cmp     #$20
	bcs     L02CB
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L03E0
;
; }
;
L02CB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Hero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Hero: near

.segment	"CODE"

;
; hero_ship.anime = ship_reg;
;
	lda     #$00
	sta     _hero_ship
;
; if ((joypad1 & (LEFT)) != 0) hero_ship.anime = ship_left;
;
	lda     _joypad1
	and     #$02
	beq     L03E1
	lda     #$01
	sta     _hero_ship
;
; if ((joypad1 & (RIGHT)) != 0) hero_ship.anime = ship_right;
;
L03E1:	lda     _joypad1
	and     #$01
	beq     L03E3
	lda     #$02
	sta     _hero_ship
;
; hero_ship.dir = 0; // never flipped
;
	lda     #$00
L03E3:	sta     _hero_ship+1
;
; ++DEBUG;
;
	inc     $00FF
;
; Draw_Sprites((int)&hero_ship);
;
	lda     #<(_hero_ship)
	ldx     #>(_hero_ship)
	jsr     _Draw_Sprites
;
; ++DEBUG; // 931 cycles
;
	inc     $00FF
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & (RIGHT|LEFT)) == 0){ // no L or R
;
	lda     _joypad1
	and     #$03
	bne     L03E8
;
; if (X_speed > 0) // if positive, going right
;
	lda     _X_speed
	sec
	sbc     #$01
	bvs     L030A
	eor     #$80
L030A:	bpl     L03E7
;
; --X_speed;
;
	dec     _X_speed
;
; if (X_speed < 0) // going left
;
L03E7:	lda     _X_speed
	asl     a
	bcc     L03E8
;
; ++X_speed;
;
	inc     _X_speed
;
; if ((joypad1 & RIGHT) > 0){
;
L03E8:	lda     _joypad1
	and     #$01
	beq     L03E9
;
; if (X_speed >= 0){ // going right
;
	ldx     _X_speed
	bmi     L0316
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L03E9
;
; else { // going left
;
	jmp     L03E9
;
; X_speed += 4; // double friction
;
L0316:	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) > 0){
;
L03E9:	lda     _joypad1
	and     #$02
	beq     L03EB
;
; if (X_speed < 0){ // going left
;
	lda     _X_speed
	asl     a
	bcc     L03EA
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L03EB
;
; else { // going right
;
	jmp     L03EB
;
; X_speed -= 4; // double friction
;
L03EA:	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
;
; if (X_speed >= 0){ // going right
;
L03EB:	ldx     _X_speed
	bmi     L032E
;
; if (X_speed > 0x34)
;
	lda     _X_speed
	sec
	sbc     #$35
	bvs     L0334
	eor     #$80
L0334:	bpl     L03EC
;
; X_speed = 0x34;
;
	lda     #$34
;
; else {
;
	jmp     L03E6
;
; if (X_speed < (-0x24))
;
L032E:	lda     _X_speed
	sec
	sbc     #$DC
	bvc     L033C
	eor     #$80
L033C:	bpl     L03EC
;
; X_speed = (-0x24); // 0xe0
;
	lda     #$DC
L03E6:	sta     _X_speed
;
; X_old = hero_ship.X;
;
L03EC:	lda     _hero_ship+3
	sta     _X_old
;
; hero_ship.X += X_speed>>4;
;
	ldx     #$00
	lda     _X_speed
	bpl     L0344
	dex
L0344:	jsr     asrax4
	clc
	adc     _hero_ship+3
	sta     _hero_ship+3
;
; if (hero_ship.X > 0xf0){ // too far right or left
;
	cmp     #$F1
	bcc     L03ED
;
; hero_ship.X = X_old;
;
	lda     _X_old
	sta     _hero_ship+3
;
; X_speed = 7; // was 0, but I was getting a pause on Right
;
	lda     #$07
	sta     _X_speed
;
; --Vert_scroll;
;
L03ED:	dec     _Vert_scroll
;
; if (Vert_scroll > 0xef){
;
	lda     _Vert_scroll
	cmp     #$F0
	bcc     L034C
;
; Vert_scroll = 0xef; // screen is only 240 pixels high
;
	lda     #$EF
	sta     _Vert_scroll
;
; }
;
L034C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Title); // uncompresses our data
;
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64; 
;
	lda     #$64
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L03EE:	lda     _index
	cmp     #$07
	bcs     L03EF
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L03EE
;
; PPU_ADDRESS = 0x24;
;
L03EF:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L03F0:	lda     _index
	cmp     #$07
	bcs     L03F1
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L03F0
;
; PPU_ADDRESS = 0x27;
;
L03F1:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for(index=0;index < 8;++index){
;
	lda     #$00
	sta     _index
L03F2:	lda     _index
	cmp     #$08
	bcs     L0388
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index=0;index < 8;++index){
;
	inc     _index
	jmp     L03F2
;
; }
;
L0388:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Stars); // uncompresses our data
;
	lda     #<(_Stars)
	ldx     #>(_Stars)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x3f; // address of BG#0 Palette
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA = 3;
;
	lda     #$03
	sta     $2007
;
; PPU_DATA = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_DATA = 5;
;
	lda     #$05
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Pause_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Pause_Sprites: near

.segment	"CODE"

;
; dummy.anime = Pause_Sprites;
;
	lda     #$03
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x6c;
;
	lda     #$6C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; ++DEBUG;
;
	inc     $00FF
;
; Draw_Sprites((int)&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jsr     _Draw_Sprites
;
; ++DEBUG; // 785 cycles
;
	inc     $00FF
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Game_Over_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Game_Over_Sprites: near

.segment	"CODE"

;
; dummy.anime = Game_O_Sprites;
;
	lda     #$04
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x5c;
;
	lda     #$5C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; ++DEBUG;
;
	inc     $00FF
;
; Draw_Sprites((int)&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jsr     _Draw_Sprites
;
; ++DEBUG; // 1169 cycles
;
	inc     $00FF
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Victory_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Victory_Sprites: near

.segment	"CODE"

;
; dummy.anime = Vic_Sprites;
;
	lda     #$05
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x60;
;
	lda     #$60
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites((int)&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

.segment	"CODE"

;
; SPRITES[0] = 0x1d;
;
	lda     #$1D
	sta     _SPRITES
;
; SPRITES[1] = 0xff; // the last tile in the set
;
	lda     #$FF
	sta     _SPRITES+1
;
; SPRITES[2] = 0x20;
;
	lda     #$20
	sta     _SPRITES+2
;
; SPRITES[3] = 0xb9;
;
	lda     #$B9
	sta     _SPRITES+3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; joypad1 = 0xff; // fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Reset_Music(); // note, this is famitone init, and I added the music data address. see famitone2.s
;
	jsr     _Reset_Music
;
; Play_Music(song);
;
	lda     _song
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
	jmp     L03F7
;
; while (NMI_flag == 0); // wait till v-blank
;
L03F3:	lda     _NMI_flag
	beq     L03F3
;
; Rotate_Palette();
;
	jsr     _Rotate_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Get_Input();
;
	jsr     _Get_Input
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L01B5
	lda     _joypad1
	and     #$10
	beq     L01B5
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0); // wait till v-blank
;
L03F6:	lda     _NMI_flag
	beq     L03F6
;
; All_Off();
;
	jsr     _All_Off
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; hero_ship.X = 0x78; // starting point
;
	lda     #$78
	sta     _hero_ship+3
;
; hero_ship.Y = 0xd0; // bottom of screen
;
	lda     #$D0
	sta     _hero_ship+2
;
; Lives = 3;
;
	lda     #$03
	sta     _Lives
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; PPU_CTRL = 0x91;
;
	lda     #$91
	sta     $2000
;
; Music_Update();
;
L01B5:	jsr     _Music_Update
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
L03F7:	lda     _Game_Mode
	beq     L03F3
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
	jmp     L040C
;
; while (NMI_flag == 0); // wait till v-blank
;
L03F8:	lda     _NMI_flag
	beq     L03F8
;
; Get_Input();
;
	jsr     _Get_Input
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; move_logic();
;
	jsr     _move_logic
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // start Pause Mode
;
	lda     _joypad1old
	and     #$10
	bne     L03FB
	lda     _joypad1
	and     #$10
	beq     L03FB
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_PAUSE;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if (((joypad1old & SELECT) == 0)&&((joypad1 & SELECT) != 0)){ // testing Game Over
;
L03FB:	lda     _joypad1old
	and     #$20
	bne     L03FE
	lda     _joypad1
	and     #$20
	beq     L03FE
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME_OVER;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; if (((joypad1old & UP) == 0)&&((joypad1 & UP) != 0)){
;
L03FE:	lda     _joypad1old
	and     #$08
	bne     L0401
	lda     _joypad1
	and     #$08
	beq     L0401
;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jsr     _Play_Fx
;
; if (((joypad1old & DOWN) == 0)&&((joypad1 & DOWN) != 0)){
;
L0401:	lda     _joypad1old
	and     #$04
	bne     L0404
	lda     _joypad1
	and     #$04
	beq     L0404
;
; Play_Fx(SOUND_LASER);
;
	lda     #$01
	jsr     _Play_Fx
;
; if (((joypad1old & B_BUTTON) == 0)&&((joypad1 & B_BUTTON) != 0)){
;
L0404:	lda     _joypad1old
	and     #$40
	bne     L0407
	lda     _joypad1
	and     #$40
	beq     L0407
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jsr     _Play_Fx
;
; if (((joypad1old & A_BUTTON) == 0)&&((joypad1 & A_BUTTON) != 0)){
;
L0407:	lda     _joypad1old
	and     #$80
	bne     L0420
	lda     _joypad1
	and     #$80
	beq     L0423
;
; Play_Fx(SOUND_BIG_BOOM);
;
	lda     #$03
	jsr     _Play_Fx
;
; NMI_flag = 0;
;
L0420:	lda     #$00
L0423:	sta     _NMI_flag
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
L040C:	lda     _Game_Mode
	cmp     #$01
	jeq     L03F8
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
	jmp     L0412
;
; while (NMI_flag == 0); // wait till v-blank
;
L040D:	lda     _NMI_flag
	beq     L040D
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // Go back to Game Mode
;
	lda     _joypad1old
	and     #$10
	bne     L0421
	lda     _joypad1
	and     #$10
	beq     L0424
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L0421:	lda     #$00
L0424:	sta     _NMI_flag
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
L0412:	lda     _Game_Mode
	cmp     #$02
	beq     L040D
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
	jmp     L0419
;
; while (NMI_flag == 0); // wait till v-blank
;
L0413:	lda     _NMI_flag
	beq     L0413
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & SELECT) == 0)&&((joypad1 & SELECT) != 0)){ // testing Victory
;
	lda     _joypad1old
	and     #$20
	bne     L0416
	lda     _joypad1
	and     #$20
	beq     L0416
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Victory_Sprites();
;
	jsr     _Turn_On_Victory_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_VICTORY;
;
	lda     #$04
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Wait =  0; // if no input for a few seconds
;
	lda     #$00
	sta     _Wait
;
; Wait2 = 0; // go back to title screen
;
	sta     _Wait2
;
; Game_Mode = VICTORY_MODE; // just testing it
;
	lda     #$04
	sta     _Game_Mode
;
; else{
;
	jmp     L0418
;
; ++Wait;
;
L0416:	inc     _Wait
;
; if (Wait == 0)
;
	bne     L0417
;
; ++Wait2;
;
	inc     _Wait2
;
; if (Wait2 == 2){
;
L0417:	lda     _Wait2
	cmp     #$02
	bne     L0418
;
; All_Off();
;
	jsr     _All_Off
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
	jsr     _Reset
;
; NMI_flag = 0;
;
L0418:	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
L0419:	lda     _Game_Mode
	cmp     #$03
	beq     L0413
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
	jmp     L041F
;
; while (NMI_flag == 0); // wait till NMI
;
L041A:	lda     _NMI_flag
	beq     L041A
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0422
	lda     _joypad1
	and     #$10
	beq     L0425
;
; All_Off();
;
	jsr     _All_Off
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
	jsr     _Reset
;
; NMI_flag = 0;
;
L0422:	lda     #$00
L0425:	sta     _NMI_flag
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
L041F:	lda     _Game_Mode
	cmp     #$04
	beq     L041A
;
; while (1){ // infinite loop
;
	jmp     L03F7

.endproc

