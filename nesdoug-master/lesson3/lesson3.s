;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_Text_Position
	.export		_test
	.export		_TEXT
	.export		_PALETTE
	.export		_Attrib_Table
	.export		_All_Off
	.export		_All_On
	.export		_Load_Palette
	.export		_Reset_Scroll
	.export		_Load_Text
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_PALETTE:
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
_Attrib_Table:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_Text_Position:
	.res	1,$00
.segment	"BSS"
_test:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	sta     _index
L0098:	lda     _index
	cmp     #$10
	bcs     L0099
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for (index = 0; index < sizeof(PALETTE); ++index)
;
	inc     _index
	jmp     L0098
;
; PPU_ADDRESS = 0x23;
;
L0099:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for (index = 0; index < sizeof(Attrib_Table); ++index)
;
	lda     #$00
	sta     _index
L009A:	lda     _index
	cmp     #$04
	bcs     L0042
;
; PPU_DATA = Attrib_Table[index];
;
	ldy     _index
	lda     _Attrib_Table,y
	sta     $2007
;
; for (index = 0; index < sizeof(Attrib_Table); ++index)
;
	inc     _index
	jmp     L009A
;
; }
;
L0042:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Text: near

.segment	"CODE"

;
; if (Text_Position < sizeof(TEXT))
;
	lda     _Text_Position
	cmp     #$0D
	bcs     L009B
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca + Text_Position; // about the middle of the screen 21d0
;
	lda     _Text_Position
	clc
	adc     #$CA
	sta     $2006
;
; PPU_DATA = TEXT[Text_Position];
;
	ldy     _Text_Position
	lda     _TEXT,y
	sta     $2007
;
; ++Text_Position;
;
	inc     _Text_Position
;
; else
;
	rts
;
; Text_Position = 0;
;
L009B:	lda     #$00
	sta     _Text_Position
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca;
;
	lda     #$CA
	sta     $2006
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	lda     #$00
	sta     _index
L009C:	lda     _index
	cmp     #$0D
	bcs     L008D
;
; PPU_DATA = 0;
;
	lda     #$00
	sta     $2007
;
; for (index = 0; index < sizeof(TEXT); ++index)
;
	inc     _index
	jmp     L009C
;
; }
;
L008D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off(); // turn off screen
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; All_On(); // turn on screen
;
	jsr     _All_On
;
; while (NMI_flag == 0);
;
L009D:	lda     _NMI_flag
	beq     L009D
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; if (Frame_Count == 30)
;
	lda     _Frame_Count
	cmp     #$1E
	bne     L009D
;
; Load_Text();
;
	jsr     _Load_Text
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Frame_Count = 0;
;
	lda     #$00
	sta     _Frame_Count
;
; ++test; // dummy, just making sure this compiles into the BSS section 0x300
;
	inc     _test
;
; while (1)
;
	jmp     L009D

.endproc

