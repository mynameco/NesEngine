;
; File generated by cc65 v 2.16 - Git 83890e5
;
	.fopt		compiler,"cc65 v 2.16 - Git 83890e5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_Frame_Count2
	.export		_index
	.export		_index4
	.export		_X_old
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_Vert_scroll
	.export		_Vert_scroll2
	.export		_X_speed
	.export		_Y_speed
	.export		_collision
	.export		_temp
	.export		_temp2
	.export		_temp3
	.export		_song
	.export		_Game_Mode
	.export		_Wait
	.export		_Wait2
	.export		_Score1
	.export		_Score2
	.export		_Score3
	.export		_Score4
	.export		_Lives
	.export		_Sprite_Index
	.export		_bullet_Wait
	.export		_objectA_x
	.export		_objectA_y
	.export		_objectA_width
	.export		_objectA_height
	.export		_objectB_x
	.export		_objectB_y
	.export		_objectB_width
	.export		_objectB_height
	.export		_injury_Timer
	.export		_invincible
	.export		_Death_Flag
	.export		_SPRITES
	.export		_dummy
	.export		_hero_ship
	.export		_ENEMY1
	.export		_ENEMY2
	.export		_ENEMY3
	.export		_ENEMY4
	.export		_ENEMY5
	.export		_ENEMY6
	.export		_ENEMY7
	.export		_ENEMY8
	.export		_Explode1
	.export		_Explode2
	.export		_Explode3
	.export		_Explode4
	.export		_hero_bullet1
	.export		_hero_bullet2
	.export		_hero_bullet3
	.export		_hero_bullet4
	.export		_hero_bullet5
	.export		_hero_bullet6
	.export		_hero_bullet7
	.export		_hero_bullet8
	.export		_enemy_bullet1
	.export		_enemy_bullet2
	.export		_enemy_bullet3
	.export		_enemy_bullet4
	.export		_enemy_bullet5
	.export		_enemy_bullet6
	.export		_enemy_bullet7
	.export		_enemy_bullet8
	.export		_Title
	.export		_Stars
	.export		_PALETTE
	.export		_HUD
	.export		_HUD2
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Rotate_Palette
	.export		_Load_Palette
	.export		_Draw_Hero
	.export		_move_logic
	.export		_Draw_Title
	.export		_Draw_Background
	.export		_Turn_On_Pause_Sprites
	.export		_Turn_On_Game_Over_Sprites
	.export		_Turn_On_Victory_Sprites
	.export		_Set_Sprite_Zero
	.export		_shooting
	.export		_spawn_bullets
	.export		_Spawn_Enemies
	.export		_Draw_Bullets
	.export		_Draw_Enemies
	.export		_collision_Test
	.export		_collision_Test2
	.export		_Adjust_Scoreboard
	.export		_Draw_Explosion
	.export		_Spawn_Bullets
	.import		_Reset
	.import		_Blank_sprite
	.import		_Play_Fx
	.import		_Reset_Music
	.import		_Play_Music
	.import		_Music_Update
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.import		_Draw_Sprites
	.import		_move_bullets
	.import		_move_bullets2
	.import		_move_enemies
	.import		_Hitbox
	.export		_main
	.export		_Palette_Fade
	.export		_Spawn_Explosion
	.export		_All_Enemies

.segment	"RODATA"

_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C7
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$AF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$00
	.byte	$44
	.byte	$6F
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$46
	.byte	$72
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$20
	.byte	$55
	.byte	$70
	.byte	$64
	.byte	$61
	.byte	$74
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$41
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$00
	.byte	$01
	.byte	$A9
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$01
	.byte	$00
_Stars:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$39
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$01
	.byte	$00
_PALETTE:
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$01
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$00
	.byte	$0A
	.byte	$1A
	.byte	$2A
_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_Palette_Fade:
	.byte	$24
	.byte	$14
	.byte	$04
	.byte	$14

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_Frame_Count2:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X_old:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_Vert_scroll:
	.res	1,$00
_Vert_scroll2:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_collision:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_song:
	.res	1,$00
_Game_Mode:
	.res	1,$00
_Wait:
	.res	1,$00
_Wait2:
	.res	1,$00
_Score1:
	.res	1,$00
_Score2:
	.res	1,$00
_Score3:
	.res	1,$00
_Score4:
	.res	1,$00
_Lives:
	.res	1,$00
_Sprite_Index:
	.res	1,$00
_bullet_Wait:
	.res	1,$00
_objectA_x:
	.res	1,$00
_objectA_y:
	.res	1,$00
_objectA_width:
	.res	1,$00
_objectA_height:
	.res	1,$00
_objectB_x:
	.res	1,$00
_objectB_y:
	.res	1,$00
_objectB_width:
	.res	1,$00
_objectB_height:
	.res	1,$00
_injury_Timer:
	.res	1,$00
_invincible:
	.res	1,$00
_Death_Flag:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00
.segment	"BSS"
_dummy:
	.res	8,$00
_hero_ship:
	.res	8,$00
_ENEMY1:
	.res	8,$00
_ENEMY2:
	.res	8,$00
_ENEMY3:
	.res	8,$00
_ENEMY4:
	.res	8,$00
_ENEMY5:
	.res	8,$00
_ENEMY6:
	.res	8,$00
_ENEMY7:
	.res	8,$00
_ENEMY8:
	.res	8,$00
_Explode1:
	.res	8,$00
_Explode2:
	.res	8,$00
_Explode3:
	.res	8,$00
_Explode4:
	.res	8,$00
_hero_bullet1:
	.res	8,$00
_hero_bullet2:
	.res	8,$00
_hero_bullet3:
	.res	8,$00
_hero_bullet4:
	.res	8,$00
_hero_bullet5:
	.res	8,$00
_hero_bullet6:
	.res	8,$00
_hero_bullet7:
	.res	8,$00
_hero_bullet8:
	.res	8,$00
_enemy_bullet1:
	.res	8,$00
_enemy_bullet2:
	.res	8,$00
_enemy_bullet3:
	.res	8,$00
_enemy_bullet4:
	.res	8,$00
_enemy_bullet5:
	.res	8,$00
_enemy_bullet6:
	.res	8,$00
_enemy_bullet7:
	.res	8,$00
_enemy_bullet8:
	.res	8,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }  
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Rotate_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Rotate_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; PPU_DATA = Palette_Fade[(Frame_Count >> 2) & 0x03];
;
	lda     _Frame_Count
	lsr     a
	lsr     a
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_Palette_Fade)
	sta     ptr1+1
	ldy     #<(_Palette_Fade)
	lda     (ptr1),y
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L07C5:	lda     _index
	cmp     #$20
	bcs     L02C4
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L07C5
;
; }
;
L02C4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Hero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Hero: near

.segment	"CODE"

;
; if (injury_Timer == 0){
;
	lda     _injury_Timer
	bne     L07C8
;
; hero_ship.anime = ship_reg;
;
	sta     _hero_ship
;
; if ((joypad1 & (LEFT)) != 0) hero_ship.anime = ship_left;
;
	lda     _joypad1
	and     #$02
	beq     L07C7
	lda     #$01
	sta     _hero_ship
;
; if ((joypad1 & (RIGHT)) != 0) hero_ship.anime = ship_right;
;
L07C7:	lda     _joypad1
	and     #$01
	beq     L07CC
	lda     #$02
;
; else if (injury_Timer < 40){
;
	jmp     L07C6
L07C8:	lda     _injury_Timer
	cmp     #$28
	bcs     L07C9
;
; hero_ship.anime = ship_expl_1;
;
	lda     #$03
;
; else if (injury_Timer < 80){
;
	jmp     L07C6
L07C9:	lda     _injury_Timer
	cmp     #$50
	bcs     L07CA
;
; hero_ship.anime = ship_expl_2;
;
	lda     #$04
;
; else {
;
	jmp     L07C6
;
; hero_ship.anime = ship_expl_3;
;
L07CA:	lda     #$05
L07C6:	sta     _hero_ship
;
; hero_ship.dir = 0; // never flipped
;
	lda     #$00
L07CC:	sta     _hero_ship+1
;
; Draw_Sprites(&hero_ship);
;
	lda     #<(_hero_ship)
	ldx     #>(_hero_ship)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if ((joypad1 & (RIGHT|LEFT)) == 0){ // no L or R
;
	lda     _joypad1
	and     #$03
	bne     L07D1
;
; if (X_speed > 0) // if positive, going right
;
	lda     _X_speed
	sec
	sbc     #$01
	bvs     L030E
	eor     #$80
L030E:	bpl     L07D0
;
; --X_speed;
;
	dec     _X_speed
;
; if (X_speed < 0) // going left
;
L07D0:	lda     _X_speed
	asl     a
	bcc     L07D1
;
; ++X_speed;
;
	inc     _X_speed
;
; if ((joypad1 & RIGHT) > 0){
;
L07D1:	lda     _joypad1
	and     #$01
	beq     L07D2
;
; if (X_speed >= 0){ // going right
;
	ldx     _X_speed
	bmi     L031A
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L07D2
;
; else { // going left
;
	jmp     L07D2
;
; X_speed += 4; // double friction
;
L031A:	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) > 0){
;
L07D2:	lda     _joypad1
	and     #$02
	beq     L07D4
;
; if (X_speed < 0){ // going left
;
	lda     _X_speed
	asl     a
	bcc     L07D3
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L07D4
;
; else { // going right
;
	jmp     L07D4
;
; X_speed -= 4; // double friction
;
L07D3:	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
;
; if (X_speed >= 0){ // going right
;
L07D4:	ldx     _X_speed
	bmi     L0332
;
; if (X_speed > 0x34)
;
	lda     _X_speed
	sec
	sbc     #$35
	bvs     L0338
	eor     #$80
L0338:	bpl     L07D5
;
; X_speed = 0x34;
;
	lda     #$34
;
; else {
;
	jmp     L07CF
;
; if (X_speed < (-0x24))
;
L0332:	lda     _X_speed
	sec
	sbc     #$DC
	bvc     L0340
	eor     #$80
L0340:	bpl     L07D5
;
; X_speed = (-0x24); // 0xe0
;
	lda     #$DC
L07CF:	sta     _X_speed
;
; X_old = hero_ship.X;
;
L07D5:	lda     _hero_ship+3
	sta     _X_old
;
; hero_ship.X += X_speed>>4;
;
	ldx     #$00
	lda     _X_speed
	bpl     L0348
	dex
L0348:	jsr     asrax4
	clc
	adc     _hero_ship+3
	sta     _hero_ship+3
;
; if (hero_ship.X > 0xf0){ // too far right or left
;
	cmp     #$F1
	bcc     L07D6
;
; hero_ship.X = X_old;
;
	lda     _X_old
	sta     _hero_ship+3
;
; X_speed = 7; // was 0, but I was getting a pause on Right
;
	lda     #$07
	sta     _X_speed
;
; --Vert_scroll;
;
L07D6:	dec     _Vert_scroll
;
; if (Vert_scroll > 0xef){
;
	lda     _Vert_scroll
	cmp     #$F0
	bcc     L0350
;
; Vert_scroll = 0xef; // screen is only 240 pixels high
;
	lda     #$EF
	sta     _Vert_scroll
;
; }
;
L0350:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Title); // uncompresses our data
;
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; // draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64; 
;
	lda     #$64
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L07D7:	lda     _index
	cmp     #$07
	bcs     L07D8
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L07D7
;
; PPU_ADDRESS = 0x24;
;
L07D8:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L07D9:	lda     _index
	cmp     #$07
	bcs     L07DA
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L07D9
;
; PPU_ADDRESS = 0x27;
;
L07DA:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for(index=0;index < 8;++index){
;
	lda     #$00
	sta     _index
L07DB:	lda     _index
	cmp     #$08
	bcs     L03EB
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index=0;index < 8;++index){
;
	inc     _index
	jmp     L07DB
;
; }
;
L03EB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; // address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Stars); // uncompresses our data
;
	lda     #<(_Stars)
	ldx     #>(_Stars)
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x3f; // address of BG#0 Palette
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA = 3;
;
	lda     #$03
	sta     $2007
;
; PPU_DATA = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_DATA = 5;
;
	lda     #$05
	sta     $2007
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Pause_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Pause_Sprites: near

.segment	"CODE"

;
; dummy.anime = Pause_Sprites;
;
	lda     #$0B
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x6c;
;
	lda     #$6C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Game_Over_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Game_Over_Sprites: near

.segment	"CODE"

;
; dummy.anime = Game_O_Sprites;
;
	lda     #$0C
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x5c;
;
	lda     #$5C
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Victory_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Victory_Sprites: near

.segment	"CODE"

;
; dummy.anime = Vic_Sprites;
;
	lda     #$0D
	sta     _dummy
;
; dummy.dir = 0;
;
	lda     #$00
	sta     _dummy+1
;
; dummy.X = 0x60;
;
	lda     #$60
	sta     _dummy+3
;
; dummy.Y = 0x70;
;
	lda     #$70
	sta     _dummy+2
;
; Draw_Sprites(&dummy);
;
	lda     #<(_dummy)
	ldx     #>(_dummy)
	jmp     _Draw_Sprites

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

.segment	"CODE"

;
; SPRITES[0] = 0x1d;
;
	lda     #$1D
	sta     _SPRITES
;
; SPRITES[1] = 0xff; // the last tile in the set
;
	lda     #$FF
	sta     _SPRITES+1
;
; SPRITES[2] = 0x20;
;
	lda     #$20
	sta     _SPRITES+2
;
; SPRITES[3] = 0xb9;
;
	lda     #$B9
	sta     _SPRITES+3
;
; Sprite_Index = 4; // so the drawing routine will skip the zero sprite
;
	lda     #$04
	sta     _Sprite_Index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shooting (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shooting: near

.segment	"CODE"

;
; if (bullet_Wait != 0) {
;
	lda     _bullet_Wait
	beq     L07DC
;
; --bullet_Wait;
;
	dec     _bullet_Wait
;
; else {
;
	rts
;
; if ((joypad1 & A_B_BUTTON) != 0) // either A or B
;
L07DC:	lda     _joypad1
	and     #$C0
	cmp     #$00
;
; spawn_bullets();
;
	jne     _spawn_bullets
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spawn_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawn_bullets: near

.segment	"CODE"

;
; Play_Fx(SOUND_SHOOT);
;
	lda     #$00
	jsr     _Play_Fx
;
; bullet_Wait = 0x14; // return;
;
	lda     #$14
	sta     _bullet_Wait
;
; if (hero_bullet1.Y == 0){
;
	lda     _hero_bullet1
	bne     L07DD
;
; hero_bullet1.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet1+4
;
; hero_bullet1.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet1
;
; hero_bullet1.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet1+6
;
; hero_bullet1.tile = 0xe0;
;
	sta     _hero_bullet1+2
;
; return;
;
	rts
;
; if (hero_bullet2.Y == 0){
;
L07DD:	lda     _hero_bullet2
	bne     L07DE
;
; hero_bullet2.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet2+4
;
; hero_bullet2.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet2
;
; hero_bullet2.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet2+6
;
; hero_bullet2.tile = 0xe0;
;
	sta     _hero_bullet2+2
;
; return;
;
	rts
;
; if (hero_bullet3.Y == 0){
;
L07DE:	lda     _hero_bullet3
	bne     L07DF
;
; hero_bullet3.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet3+4
;
; hero_bullet3.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet3
;
; hero_bullet3.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet3+6
;
; hero_bullet3.tile = 0xe0;
;
	sta     _hero_bullet3+2
;
; return;
;
	rts
;
; if (hero_bullet4.Y == 0){
;
L07DF:	lda     _hero_bullet4
	bne     L07E0
;
; hero_bullet4.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet4+4
;
; hero_bullet4.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet4
;
; hero_bullet4.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet4+6
;
; hero_bullet4.tile = 0xe0;
;
	sta     _hero_bullet4+2
;
; return;
;
	rts
;
; if (hero_bullet5.Y == 0){
;
L07E0:	lda     _hero_bullet5
	bne     L07E1
;
; hero_bullet5.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet5+4
;
; hero_bullet5.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet5
;
; hero_bullet5.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet5+6
;
; hero_bullet5.tile = 0xe0;
;
	sta     _hero_bullet5+2
;
; return;
;
	rts
;
; if (hero_bullet6.Y == 0){
;
L07E1:	lda     _hero_bullet6
	bne     L07E2
;
; hero_bullet6.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet6+4
;
; hero_bullet6.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet6
;
; hero_bullet6.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet6+6
;
; hero_bullet6.tile = 0xe0;
;
	sta     _hero_bullet6+2
;
; return;
;
	rts
;
; if (hero_bullet7.Y == 0){
;
L07E2:	lda     _hero_bullet7
	bne     L07E3
;
; hero_bullet7.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet7+4
;
; hero_bullet7.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet7
;
; hero_bullet7.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet7+6
;
; hero_bullet7.tile = 0xe0;
;
	sta     _hero_bullet7+2
;
; return;
;
	rts
;
; if (hero_bullet8.Y == 0){
;
L07E3:	lda     _hero_bullet8
	bne     L03A9
;
; hero_bullet8.X = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _hero_bullet8+4
;
; hero_bullet8.Y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _hero_bullet8
;
; hero_bullet8.Y_speed = 0xe0;
;
	lda     #$E0
	sta     _hero_bullet8+6
;
; hero_bullet8.tile = 0xe0;
;
	sta     _hero_bullet8+2
;
; }
;
L03A9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Enemies: near

.segment	"CODE"

;
; ENEMY1.X = 0x10;
;
	lda     #$10
	sta     _ENEMY1+3
;
; ENEMY2.X = 0x30;
;
	lda     #$30
	sta     _ENEMY2+3
;
; ENEMY3.X = 0x50;
;
	lda     #$50
	sta     _ENEMY3+3
;
; ENEMY4.X = 0x70;
;
	lda     #$70
	sta     _ENEMY4+3
;
; ENEMY5.X = 0x90;
;
	lda     #$90
	sta     _ENEMY5+3
;
; ENEMY6.X = 0xb0;
;
	lda     #$B0
	sta     _ENEMY6+3
;
; ENEMY7.X = 0xd0;
;
	lda     #$D0
	sta     _ENEMY7+3
;
; ENEMY8.X = 0x30;
;
	lda     #$30
	sta     _ENEMY8+3
;
; ENEMY1.Y = 0x30;
;
	sta     _ENEMY1+2
;
; ENEMY2.Y = 0x30;
;
	sta     _ENEMY2+2
;
; ENEMY3.Y = 0x30;
;
	sta     _ENEMY3+2
;
; ENEMY4.Y = 0x30;
;
	sta     _ENEMY4+2
;
; ENEMY5.Y = 0x30;
;
	sta     _ENEMY5+2
;
; ENEMY6.Y = 0x30;
;
	sta     _ENEMY6+2
;
; ENEMY7.Y = 0x30;
;
	sta     _ENEMY7+2
;
; ENEMY8.Y = 0x50;
;
	lda     #$50
	sta     _ENEMY8+2
;
; ENEMY1.anime = enemy_1;
;
	lda     #$06
	sta     _ENEMY1
;
; ENEMY2.anime = enemy_1;
;
	sta     _ENEMY2
;
; ENEMY3.anime = enemy_2;
;
	lda     #$07
	sta     _ENEMY3
;
; ENEMY4.anime = enemy_2;
;
	sta     _ENEMY4
;
; ENEMY5.anime = enemy_3;
;
	lda     #$08
	sta     _ENEMY5
;
; ENEMY6.anime = enemy_3;
;
	sta     _ENEMY6
;
; ENEMY7.anime = enemy_4;
;
	lda     #$09
	sta     _ENEMY7
;
; ENEMY8.anime = enemy_4;
;
	sta     _ENEMY8
;
; ENEMY1.dir = 0;
;
	lda     #$00
	sta     _ENEMY1+1
;
; ENEMY2.dir = 0;
;
	sta     _ENEMY2+1
;
; ENEMY3.dir = 0;
;
	sta     _ENEMY3+1
;
; ENEMY4.dir = 0;
;
	sta     _ENEMY4+1
;
; ENEMY5.dir = 1; //flipped, testing
;
	lda     #$01
	sta     _ENEMY5+1
;
; ENEMY6.dir = 0;
;
	lda     #$00
	sta     _ENEMY6+1
;
; ENEMY7.dir = 0;
;
	sta     _ENEMY7+1
;
; ENEMY8.dir = 0;
;
	sta     _ENEMY8+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Bullets: near

.segment	"CODE"

;
; if (hero_bullet1.Y != 0){
;
	lda     _hero_bullet1
	beq     L07E4
;
; move_bullets(&hero_bullet1);
;
	lda     #<(_hero_bullet1)
	ldx     #>(_hero_bullet1)
	jsr     _move_bullets
;
; if (hero_bullet2.Y != 0){
;
L07E4:	lda     _hero_bullet2
	beq     L07E5
;
; move_bullets(&hero_bullet2);
;
	lda     #<(_hero_bullet2)
	ldx     #>(_hero_bullet2)
	jsr     _move_bullets
;
; if (hero_bullet3.Y != 0){
;
L07E5:	lda     _hero_bullet3
	beq     L07E6
;
; move_bullets(&hero_bullet3);
;
	lda     #<(_hero_bullet3)
	ldx     #>(_hero_bullet3)
	jsr     _move_bullets
;
; if (hero_bullet4.Y != 0){
;
L07E6:	lda     _hero_bullet4
	beq     L07E7
;
; move_bullets(&hero_bullet4);
;
	lda     #<(_hero_bullet4)
	ldx     #>(_hero_bullet4)
	jsr     _move_bullets
;
; if (hero_bullet5.Y != 0){
;
L07E7:	lda     _hero_bullet5
	beq     L07E8
;
; move_bullets(&hero_bullet5);
;
	lda     #<(_hero_bullet5)
	ldx     #>(_hero_bullet5)
	jsr     _move_bullets
;
; if (hero_bullet6.Y != 0){
;
L07E8:	lda     _hero_bullet6
	beq     L07E9
;
; move_bullets(&hero_bullet6);
;
	lda     #<(_hero_bullet6)
	ldx     #>(_hero_bullet6)
	jsr     _move_bullets
;
; if (hero_bullet7.Y != 0){
;
L07E9:	lda     _hero_bullet7
	beq     L07EA
;
; move_bullets(&hero_bullet7);
;
	lda     #<(_hero_bullet7)
	ldx     #>(_hero_bullet7)
	jsr     _move_bullets
;
; if (hero_bullet8.Y != 0){
;
L07EA:	lda     _hero_bullet8
	beq     L07EB
;
; move_bullets(&hero_bullet8);
;
	lda     #<(_hero_bullet8)
	ldx     #>(_hero_bullet8)
	jsr     _move_bullets
;
; if (enemy_bullet1.Y != 0){
;
L07EB:	lda     _enemy_bullet1
	beq     L07EC
;
; move_bullets2(&enemy_bullet1);
;
	lda     #<(_enemy_bullet1)
	ldx     #>(_enemy_bullet1)
	jsr     _move_bullets2
;
; if (enemy_bullet2.Y != 0){
;
L07EC:	lda     _enemy_bullet2
	beq     L07ED
;
; move_bullets2(&enemy_bullet2);
;
	lda     #<(_enemy_bullet2)
	ldx     #>(_enemy_bullet2)
	jsr     _move_bullets2
;
; if (enemy_bullet3.Y != 0){
;
L07ED:	lda     _enemy_bullet3
	beq     L07EE
;
; move_bullets2(&enemy_bullet3);
;
	lda     #<(_enemy_bullet3)
	ldx     #>(_enemy_bullet3)
	jsr     _move_bullets2
;
; if (enemy_bullet4.Y != 0){
;
L07EE:	lda     _enemy_bullet4
	beq     L07EF
;
; move_bullets2(&enemy_bullet4);
;
	lda     #<(_enemy_bullet4)
	ldx     #>(_enemy_bullet4)
	jsr     _move_bullets2
;
; if (enemy_bullet5.Y != 0){
;
L07EF:	lda     _enemy_bullet5
	beq     L07F0
;
; move_bullets2(&enemy_bullet5);
;
	lda     #<(_enemy_bullet5)
	ldx     #>(_enemy_bullet5)
	jsr     _move_bullets2
;
; if (enemy_bullet6.Y != 0){
;
L07F0:	lda     _enemy_bullet6
	beq     L07F1
;
; move_bullets2(&enemy_bullet6);
;
	lda     #<(_enemy_bullet6)
	ldx     #>(_enemy_bullet6)
	jsr     _move_bullets2
;
; if (enemy_bullet7.Y != 0){
;
L07F1:	lda     _enemy_bullet7
	beq     L07F2
;
; move_bullets2(&enemy_bullet7);
;
	lda     #<(_enemy_bullet7)
	ldx     #>(_enemy_bullet7)
	jsr     _move_bullets2
;
; if (enemy_bullet8.Y != 0){
;
L07F2:	lda     _enemy_bullet8
	beq     L047A
;
; move_bullets2(&enemy_bullet8);
;
	lda     #<(_enemy_bullet8)
	ldx     #>(_enemy_bullet8)
	jmp     _move_bullets2
;
; }
;
L047A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Enemies: near

.segment	"CODE"

;
; ++Frame_Count2;
;
	inc     _Frame_Count2
;
; if ((Frame_Count2 & 3) == 0){
;
	lda     _Frame_Count2
	and     #$03
	bne     L07FA
;
; if (ENEMY1.Y != 0){
;
	lda     _ENEMY1+2
	beq     L07F3
;
; move_enemies(&ENEMY1);
;
	lda     #<(_ENEMY1)
	ldx     #>(_ENEMY1)
	jsr     _move_enemies
;
; if (ENEMY2.Y != 0){
;
L07F3:	lda     _ENEMY2+2
	beq     L07F4
;
; move_enemies(&ENEMY2);
;
	lda     #<(_ENEMY2)
	ldx     #>(_ENEMY2)
	jsr     _move_enemies
;
; if (ENEMY3.Y != 0){
;
L07F4:	lda     _ENEMY3+2
	beq     L07F5
;
; move_enemies(&ENEMY3);
;
	lda     #<(_ENEMY3)
	ldx     #>(_ENEMY3)
	jsr     _move_enemies
;
; if (ENEMY4.Y != 0){
;
L07F5:	lda     _ENEMY4+2
	beq     L07F6
;
; move_enemies(&ENEMY4);
;
	lda     #<(_ENEMY4)
	ldx     #>(_ENEMY4)
	jsr     _move_enemies
;
; if (ENEMY5.Y != 0){
;
L07F6:	lda     _ENEMY5+2
	beq     L07F7
;
; move_enemies(&ENEMY5);
;
	lda     #<(_ENEMY5)
	ldx     #>(_ENEMY5)
	jsr     _move_enemies
;
; if (ENEMY6.Y != 0){
;
L07F7:	lda     _ENEMY6+2
	beq     L07F8
;
; move_enemies(&ENEMY6);
;
	lda     #<(_ENEMY6)
	ldx     #>(_ENEMY6)
	jsr     _move_enemies
;
; if (ENEMY7.Y != 0){
;
L07F8:	lda     _ENEMY7+2
	beq     L07F9
;
; move_enemies(&ENEMY7);
;
	lda     #<(_ENEMY7)
	ldx     #>(_ENEMY7)
	jsr     _move_enemies
;
; if (ENEMY8.Y != 0){
;
L07F9:	lda     _ENEMY8+2
	bne     L0812
;
; }
;
	rts
;
; move_enemies(&ENEMY8);
;
L0812:	lda     #<(_ENEMY8)
	ldx     #>(_ENEMY8)
	jmp     _move_enemies
;
; else if ((Frame_Count2 & 3) == 1){
;
L07FA:	lda     _Frame_Count2
	and     #$03
	cmp     #$01
	bne     L0802
;
; if (ENEMY1.Y != 0){
;
	lda     _ENEMY1+2
	beq     L07FB
;
; move_enemies(&ENEMY1);
;
	lda     #<(_ENEMY1)
	ldx     #>(_ENEMY1)
	jsr     _move_enemies
;
; if (ENEMY3.Y != 0){
;
L07FB:	lda     _ENEMY3+2
	beq     L07FC
;
; move_enemies(&ENEMY3);
;
	lda     #<(_ENEMY3)
	ldx     #>(_ENEMY3)
	jsr     _move_enemies
;
; if (ENEMY5.Y != 0){
;
L07FC:	lda     _ENEMY5+2
	beq     L07FD
;
; move_enemies(&ENEMY5);
;
	lda     #<(_ENEMY5)
	ldx     #>(_ENEMY5)
	jsr     _move_enemies
;
; if (ENEMY7.Y != 0){
;
L07FD:	lda     _ENEMY7+2
	beq     L07FE
;
; move_enemies(&ENEMY7);
;
	lda     #<(_ENEMY7)
	ldx     #>(_ENEMY7)
	jsr     _move_enemies
;
; if (ENEMY2.Y != 0){
;
L07FE:	lda     _ENEMY2+2
	beq     L07FF
;
; move_enemies(&ENEMY2);
;
	lda     #<(_ENEMY2)
	ldx     #>(_ENEMY2)
	jsr     _move_enemies
;
; if (ENEMY4.Y != 0){
;
L07FF:	lda     _ENEMY4+2
	beq     L0800
;
; move_enemies(&ENEMY4);
;
	lda     #<(_ENEMY4)
	ldx     #>(_ENEMY4)
	jsr     _move_enemies
;
; if (ENEMY6.Y != 0){
;
L0800:	lda     _ENEMY6+2
	beq     L0801
;
; move_enemies(&ENEMY6);
;
	lda     #<(_ENEMY6)
	ldx     #>(_ENEMY6)
	jsr     _move_enemies
;
; if (ENEMY8.Y != 0){
;
L0801:	lda     _ENEMY8+2
	bne     L0813
;
; }
;
	rts
;
; move_enemies(&ENEMY8);
;
L0813:	lda     #<(_ENEMY8)
	ldx     #>(_ENEMY8)
	jmp     _move_enemies
;
; else if ((Frame_Count2 & 3) == 2){
;
L0802:	lda     _Frame_Count2
	and     #$03
	cmp     #$02
	bne     L080A
;
; if (ENEMY8.Y != 0){
;
	lda     _ENEMY8+2
	beq     L0803
;
; move_enemies(&ENEMY8);
;
	lda     #<(_ENEMY8)
	ldx     #>(_ENEMY8)
	jsr     _move_enemies
;
; if (ENEMY7.Y != 0){
;
L0803:	lda     _ENEMY7+2
	beq     L0804
;
; move_enemies(&ENEMY7);
;
	lda     #<(_ENEMY7)
	ldx     #>(_ENEMY7)
	jsr     _move_enemies
;
; if (ENEMY6.Y != 0){
;
L0804:	lda     _ENEMY6+2
	beq     L0805
;
; move_enemies(&ENEMY6);
;
	lda     #<(_ENEMY6)
	ldx     #>(_ENEMY6)
	jsr     _move_enemies
;
; if (ENEMY5.Y != 0){
;
L0805:	lda     _ENEMY5+2
	beq     L0806
;
; move_enemies(&ENEMY5);
;
	lda     #<(_ENEMY5)
	ldx     #>(_ENEMY5)
	jsr     _move_enemies
;
; if (ENEMY4.Y != 0){
;
L0806:	lda     _ENEMY4+2
	beq     L0807
;
; move_enemies(&ENEMY4);
;
	lda     #<(_ENEMY4)
	ldx     #>(_ENEMY4)
	jsr     _move_enemies
;
; if (ENEMY3.Y != 0){
;
L0807:	lda     _ENEMY3+2
	beq     L0808
;
; move_enemies(&ENEMY3);
;
	lda     #<(_ENEMY3)
	ldx     #>(_ENEMY3)
	jsr     _move_enemies
;
; if (ENEMY2.Y != 0){
;
L0808:	lda     _ENEMY2+2
	beq     L0809
;
; move_enemies(&ENEMY2);
;
	lda     #<(_ENEMY2)
	ldx     #>(_ENEMY2)
	jsr     _move_enemies
;
; if (ENEMY1.Y != 0){
;
L0809:	lda     _ENEMY1+2
	beq     L059D
;
; move_enemies(&ENEMY1);
;
	lda     #<(_ENEMY1)
	ldx     #>(_ENEMY1)
	jmp     _move_enemies
;
; if (ENEMY8.Y != 0){
;
L080A:	lda     _ENEMY8+2
	beq     L080B
;
; move_enemies(&ENEMY8);
;
	lda     #<(_ENEMY8)
	ldx     #>(_ENEMY8)
	jsr     _move_enemies
;
; if (ENEMY6.Y != 0){
;
L080B:	lda     _ENEMY6+2
	beq     L080C
;
; move_enemies(&ENEMY6);
;
	lda     #<(_ENEMY6)
	ldx     #>(_ENEMY6)
	jsr     _move_enemies
;
; if (ENEMY4.Y != 0){
;
L080C:	lda     _ENEMY4+2
	beq     L080D
;
; move_enemies(&ENEMY4);
;
	lda     #<(_ENEMY4)
	ldx     #>(_ENEMY4)
	jsr     _move_enemies
;
; if (ENEMY2.Y != 0){
;
L080D:	lda     _ENEMY2+2
	beq     L080E
;
; move_enemies(&ENEMY2);
;
	lda     #<(_ENEMY2)
	ldx     #>(_ENEMY2)
	jsr     _move_enemies
;
; if (ENEMY7.Y != 0){
;
L080E:	lda     _ENEMY7+2
	beq     L080F
;
; move_enemies(&ENEMY7);
;
	lda     #<(_ENEMY7)
	ldx     #>(_ENEMY7)
	jsr     _move_enemies
;
; if (ENEMY5.Y != 0){
;
L080F:	lda     _ENEMY5+2
	beq     L0810
;
; move_enemies(&ENEMY5);
;
	lda     #<(_ENEMY5)
	ldx     #>(_ENEMY5)
	jsr     _move_enemies
;
; if (ENEMY3.Y != 0){
;
L0810:	lda     _ENEMY3+2
	beq     L0811
;
; move_enemies(&ENEMY3);
;
	lda     #<(_ENEMY3)
	ldx     #>(_ENEMY3)
	jsr     _move_enemies
;
; if (ENEMY1.Y != 0){
;
L0811:	lda     _ENEMY1+2
	beq     L059D
;
; move_enemies(&ENEMY1);
;
	lda     #<(_ENEMY1)
	ldx     #>(_ENEMY1)
	jmp     _move_enemies
;
; }
;
L059D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test: near

.segment	"CODE"

;
; objectA_width = 15; // all bullets and enemies assumed to be the same size
;
	lda     #$0F
	sta     _objectA_width
;
; objectB_width = 15;
;
	sta     _objectB_width
;
; objectB_height = 15; 
;
	sta     _objectB_height
;
; objectA_height = 7;
;
	lda     #$07
	sta     _objectA_height
;
; if (hero_bullet1.Y != 0){
;
	lda     _hero_bullet1
	beq     L0814
;
; objectA_y = hero_bullet1.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet1.X;
;
	lda     _hero_bullet1+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0814
;
; hero_bullet1.Y = 0;
;
	lda     #$00
	sta     _hero_bullet1
;
; if (hero_bullet2.Y != 0){
;
L0814:	lda     _hero_bullet2
	beq     L0815
;
; objectA_y = hero_bullet2.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet2.X;
;
	lda     _hero_bullet2+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0815
;
; hero_bullet2.Y = 0;
;
	lda     #$00
	sta     _hero_bullet2
;
; if (hero_bullet3.Y != 0){
;
L0815:	lda     _hero_bullet3
	beq     L0816
;
; objectA_y = hero_bullet3.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet3.X;
;
	lda     _hero_bullet3+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0816
;
; hero_bullet3.Y = 0;
;
	lda     #$00
	sta     _hero_bullet3
;
; if (hero_bullet4.Y != 0){
;
L0816:	lda     _hero_bullet4
	beq     L0817
;
; objectA_y = hero_bullet4.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet4.X;
;
	lda     _hero_bullet4+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0817
;
; hero_bullet4.Y = 0;
;
	lda     #$00
	sta     _hero_bullet4
;
; if (hero_bullet5.Y != 0){
;
L0817:	lda     _hero_bullet5
	beq     L0818
;
; objectA_y = hero_bullet5.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet5.X;
;
	lda     _hero_bullet5+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0818
;
; hero_bullet5.Y = 0;
;
	lda     #$00
	sta     _hero_bullet5
;
; if (hero_bullet6.Y != 0){
;
L0818:	lda     _hero_bullet6
	beq     L0819
;
; objectA_y = hero_bullet6.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet6.X;
;
	lda     _hero_bullet6+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L0819
;
; hero_bullet6.Y = 0;
;
	lda     #$00
	sta     _hero_bullet6
;
; if (hero_bullet7.Y != 0){
;
L0819:	lda     _hero_bullet7
	beq     L081A
;
; objectA_y = hero_bullet7.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet7.X;
;
	lda     _hero_bullet7+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L081A
;
; hero_bullet7.Y = 0;
;
	lda     #$00
	sta     _hero_bullet7
;
; if (hero_bullet8.Y != 0){
;
L081A:	lda     _hero_bullet8
	beq     L069D
;
; objectA_y = hero_bullet8.Y;
;
	sta     _objectA_y
;
; objectA_x = hero_bullet8.X;
;
	lda     _hero_bullet8+4
	sta     _objectA_x
;
; All_Enemies();
;
	jsr     _All_Enemies
;
; if (collision != 0){
;
	lda     _collision
	beq     L069D
;
; hero_bullet8.Y = 0;
;
	lda     #$00
	sta     _hero_bullet8
;
; }
;
L069D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test2: near

.segment	"CODE"

;
; objectA_x = hero_ship.X;
;
	lda     _hero_ship+3
	sta     _objectA_x
;
; objectA_y = hero_ship.Y;
;
	lda     _hero_ship+2
	sta     _objectA_y
;
; objectA_width = 15;
;
	lda     #$0F
	sta     _objectA_width
;
; objectA_height = 15;
;
	sta     _objectA_height
;
; objectB_width = 15; // all the enemy ships assumed to be this size
;
	sta     _objectB_width
;
; objectB_height = 15;
;
	sta     _objectB_height
;
; if (ENEMY1.Y != 0){
;
	lda     _ENEMY1+2
	beq     L081B
;
; objectB_y = ENEMY1.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY1.X;
;
	lda     _ENEMY1+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L081B
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY2.Y != 0){
;
L081B:	lda     _ENEMY2+2
	beq     L081C
;
; objectB_y = ENEMY2.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY2.X;
;
	lda     _ENEMY2+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L081C
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY3.Y != 0){
;
L081C:	lda     _ENEMY3+2
	beq     L081D
;
; objectB_y = ENEMY3.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY3.X;
;
	lda     _ENEMY3+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L081D
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY4.Y != 0){
;
L081D:	lda     _ENEMY4+2
	beq     L081E
;
; objectB_y = ENEMY4.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY4.X;
;
	lda     _ENEMY4+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L081E
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY5.Y != 0){
;
L081E:	lda     _ENEMY5+2
	beq     L081F
;
; objectB_y = ENEMY5.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY5.X;
;
	lda     _ENEMY5+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L081F
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY6.Y != 0){
;
L081F:	lda     _ENEMY6+2
	beq     L0820
;
; objectB_y = ENEMY6.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY6.X;
;
	lda     _ENEMY6+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0820
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY7.Y != 0){
;
L0820:	lda     _ENEMY7+2
	beq     L0821
;
; objectB_y = ENEMY7.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY7.X;
;
	lda     _ENEMY7+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0821
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (ENEMY8.Y != 0){
;
L0821:	lda     _ENEMY8+2
	beq     L0822
;
; objectB_y = ENEMY8.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY8.X;
;
	lda     _ENEMY8+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0822
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; objectB_width = 7; // all the enemy bullets assumed to be this size
;
L0822:	lda     #$07
	sta     _objectB_width
;
; objectB_height = 7;
;
	sta     _objectB_height
;
; if (enemy_bullet1.Y != 0){
;
	lda     _enemy_bullet1
	beq     L0823
;
; objectB_y = enemy_bullet1.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet1.X;
;
	lda     _enemy_bullet1+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0823
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet2.Y != 0){
;
L0823:	lda     _enemy_bullet2
	beq     L0824
;
; objectB_y = enemy_bullet2.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet2.X;
;
	lda     _enemy_bullet2+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0824
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet3.Y != 0){
;
L0824:	lda     _enemy_bullet3
	beq     L0825
;
; objectB_y = enemy_bullet3.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet3.X;
;
	lda     _enemy_bullet3+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0825
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet4.Y != 0){
;
L0825:	lda     _enemy_bullet4
	beq     L0826
;
; objectB_y = enemy_bullet4.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet4.X;
;
	lda     _enemy_bullet4+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0826
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet5.Y != 0){
;
L0826:	lda     _enemy_bullet5
	beq     L0827
;
; objectB_y = enemy_bullet5.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet5.X;
;
	lda     _enemy_bullet5+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0827
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet6.Y != 0){
;
L0827:	lda     _enemy_bullet6
	beq     L0828
;
; objectB_y = enemy_bullet6.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet6.X;
;
	lda     _enemy_bullet6+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0828
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet7.Y != 0){
;
L0828:	lda     _enemy_bullet7
	beq     L0829
;
; objectB_y = enemy_bullet7.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet7.X;
;
	lda     _enemy_bullet7+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0829
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; if (enemy_bullet8.Y != 0){
;
L0829:	lda     _enemy_bullet8
	beq     L077C
;
; objectB_y = enemy_bullet8.Y;
;
	sta     _objectB_y
;
; objectB_x = enemy_bullet8.X;
;
	lda     _enemy_bullet8+4
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L077C
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; Play_Fx(SOUND_BOOM);
;
	lda     #$02
	jmp     _Play_Fx
;
; }
;
L077C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Adjust_Scoreboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Adjust_Scoreboard: near

.segment	"CODE"

;
; while (Score4 > 9) {
;
	jmp     L0785
;
; ++Score3;
;
L082A:	inc     _Score3
;
; Score4 -= 10;
;
	lda     _Score4
	sec
	sbc     #$0A
	sta     _Score4
;
; while (Score4 > 9) {
;
L0785:	lda     _Score4
	cmp     #$0A
	bcs     L082A
;
; while (Score3 > 9) {
;
	jmp     L082C
;
; ++Score2;
;
L082B:	inc     _Score2
;
; Score3 -= 10;
;
	lda     _Score3
	sec
	sbc     #$0A
	sta     _Score3
;
; while (Score3 > 9) {
;
L082C:	lda     _Score3
	cmp     #$0A
	bcs     L082B
;
; if (Score2 > 9) {
;
	lda     _Score2
	cmp     #$0A
	bcc     L082D
;
; ++Score1;
;
	inc     _Score1
;
; Score2 -= 10;
;
	lda     _Score2
	sec
	sbc     #$0A
	sta     _Score2
;
; if (Score1 > 9) {
;
L082D:	lda     _Score1
	cmp     #$0A
	bcc     L0796
;
; Score4 = 9;
;
	lda     #$09
	sta     _Score4
;
; Score3 = 9;
;
	sta     _Score3
;
; Score2 = 9;
;
	sta     _Score2
;
; Score1 = 9;
;
	sta     _Score1
;
; }
;
L0796:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Explosion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Explosion: near

.segment	"CODE"

;
; if (Explode1.Y != 0){
;
	lda     _Explode1+2
	beq     L082E
;
; Draw_Sprites(&Explode1);
;
	lda     #<(_Explode1)
	ldx     #>(_Explode1)
	jsr     _Draw_Sprites
;
; --Explode1.count;
;
	dec     _Explode1+7
;
; if (Explode1.count == 0) Explode1.Y = 0;
;
	lda     _Explode1+7
	bne     L082E
	sta     _Explode1+2
;
; if (Explode2.Y != 0){
;
L082E:	lda     _Explode2+2
	beq     L082F
;
; Draw_Sprites(&Explode2);
;
	lda     #<(_Explode2)
	ldx     #>(_Explode2)
	jsr     _Draw_Sprites
;
; --Explode2.count;
;
	dec     _Explode2+7
;
; if (Explode2.count == 0) Explode2.Y = 0;
;
	lda     _Explode2+7
	bne     L082F
	sta     _Explode2+2
;
; if (Explode3.Y != 0){
;
L082F:	lda     _Explode3+2
	beq     L0830
;
; Draw_Sprites(&Explode3);
;
	lda     #<(_Explode3)
	ldx     #>(_Explode3)
	jsr     _Draw_Sprites
;
; --Explode3.count;
;
	dec     _Explode3+7
;
; if (Explode3.count == 0) Explode3.Y = 0;
;
	lda     _Explode3+7
	bne     L0830
	sta     _Explode3+2
;
; if (Explode4.Y != 0){
;
L0830:	lda     _Explode4+2
	beq     L07C1
;
; Draw_Sprites(&Explode4);
;
	lda     #<(_Explode4)
	ldx     #>(_Explode4)
	jsr     _Draw_Sprites
;
; --Explode4.count;
;
	dec     _Explode4+7
;
; if (Explode4.count == 0) Explode4.Y = 0;
;
	lda     _Explode4+7
	bne     L07C1
	sta     _Explode4+2
;
; }
;
L07C1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Bullets: near

.segment	"CODE"

;
; enemy_bullet1.X = 0x10;
;
	lda     #$10
	sta     _enemy_bullet1+4
;
; enemy_bullet2.X = 0x30;
;
	lda     #$30
	sta     _enemy_bullet2+4
;
; enemy_bullet3.X = 0x50;
;
	lda     #$50
	sta     _enemy_bullet3+4
;
; enemy_bullet4.X = 0x70;
;
	lda     #$70
	sta     _enemy_bullet4+4
;
; enemy_bullet5.X = 0x90;
;
	lda     #$90
	sta     _enemy_bullet5+4
;
; enemy_bullet6.X = 0xb0;
;
	lda     #$B0
	sta     _enemy_bullet6+4
;
; enemy_bullet7.X = 0xd0;
;
	lda     #$D0
	sta     _enemy_bullet7+4
;
; enemy_bullet8.X = 0x30;
;
	lda     #$30
	sta     _enemy_bullet8+4
;
; enemy_bullet1.Y = 0x30;
;
	sta     _enemy_bullet1
;
; enemy_bullet2.Y = 0x30;
;
	sta     _enemy_bullet2
;
; enemy_bullet3.Y = 0x30;
;
	sta     _enemy_bullet3
;
; enemy_bullet4.Y = 0x30;
;
	sta     _enemy_bullet4
;
; enemy_bullet5.Y = 0x30;
;
	sta     _enemy_bullet5
;
; enemy_bullet6.Y = 0x30;
;
	sta     _enemy_bullet6
;
; enemy_bullet7.Y = 0x30;
;
	sta     _enemy_bullet7
;
; enemy_bullet8.Y = 0x50;
;
	lda     #$50
	sta     _enemy_bullet8
;
; enemy_bullet1.X_speed = 0x0;
;
	lda     #$00
	sta     _enemy_bullet1+7
;
; enemy_bullet2.X_speed = 0x0;
;
	sta     _enemy_bullet2+7
;
; enemy_bullet3.X_speed = 0xf0;
;
	lda     #$F0
	sta     _enemy_bullet3+7
;
; enemy_bullet4.X_speed = 0xfc;
;
	lda     #$FC
	sta     _enemy_bullet4+7
;
; enemy_bullet5.X_speed = 0x0;
;
	lda     #$00
	sta     _enemy_bullet5+7
;
; enemy_bullet6.X_speed = 0x0;
;
	sta     _enemy_bullet6+7
;
; enemy_bullet7.X_speed = 0x10;
;
	lda     #$10
	sta     _enemy_bullet7+7
;
; enemy_bullet8.X_speed = 0x04;
;
	lda     #$04
	sta     _enemy_bullet8+7
;
; enemy_bullet1.Y_speed = 0x10;
;
	lda     #$10
	sta     _enemy_bullet1+6
;
; enemy_bullet2.Y_speed = 0x04;
;
	lda     #$04
	sta     _enemy_bullet2+6
;
; enemy_bullet3.Y_speed = 0;
;
	lda     #$00
	sta     _enemy_bullet3+6
;
; enemy_bullet4.Y_speed = 0;
;
	sta     _enemy_bullet4+6
;
; enemy_bullet5.Y_speed = 0xf0;
;
	lda     #$F0
	sta     _enemy_bullet5+6
;
; enemy_bullet6.Y_speed = 0xfc;
;
	lda     #$FC
	sta     _enemy_bullet6+6
;
; enemy_bullet7.Y_speed = 0;
;
	lda     #$00
	sta     _enemy_bullet7+6
;
; enemy_bullet8.Y_speed = 0;
;
	sta     _enemy_bullet8+6
;
; enemy_bullet1.tile = 0xe1;
;
	lda     #$E1
	sta     _enemy_bullet1+2
;
; enemy_bullet2.tile = 0xe1;
;
	sta     _enemy_bullet2+2
;
; enemy_bullet3.tile = 0xe2;
;
	lda     #$E2
	sta     _enemy_bullet3+2
;
; enemy_bullet4.tile = 0xe2;
;
	sta     _enemy_bullet4+2
;
; enemy_bullet5.tile = 0xe3;
;
	lda     #$E3
	sta     _enemy_bullet5+2
;
; enemy_bullet6.tile = 0xe3;
;
	sta     _enemy_bullet6+2
;
; enemy_bullet7.tile = 0xe4;
;
	lda     #$E4
	sta     _enemy_bullet7+2
;
; enemy_bullet8.tile = 0xe4;
;
	sta     _enemy_bullet8+2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; joypad1 = 0xff; // fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Reset_Music(); // note, this is famitone init, and I added the music data address. see famitone2.s
;
	jsr     _Reset_Music
;
; Play_Music(song);
;
	lda     _song
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
	jmp     L0835
;
; while (NMI_flag == 0); // wait till v-blank
;
L0831:	lda     _NMI_flag
	beq     L0831
;
; Rotate_Palette();
;
	jsr     _Rotate_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Get_Input();
;
	jsr     _Get_Input
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L01B5
	lda     _joypad1
	and     #$10
	beq     L01B5
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (NMI_flag == 0); // wait till v-blank
;
L0834:	lda     _NMI_flag
	beq     L0834
;
; All_Off();
;
	jsr     _All_Off
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; hero_ship.X = 0x78; // starting point
;
	lda     #$78
	sta     _hero_ship+3
;
; hero_ship.Y = 0xd0; // bottom of screen
;
	lda     #$D0
	sta     _hero_ship+2
;
; Lives = 3;
;
	lda     #$03
	sta     _Lives
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; PPU_CTRL = 0x91;
;
	lda     #$91
	sta     $2000
;
; Music_Update();
;
L01B5:	jsr     _Music_Update
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == TITLE_MODE){ // Title Screen
;
L0835:	lda     _Game_Mode
	beq     L0831
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
	jmp     L084A
;
; while (NMI_flag == 0); // wait till v-blank
;
L0836:	lda     _NMI_flag
	beq     L0836
;
; Get_Input();
;
	jsr     _Get_Input
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; if (((joypad1old & SELECT) == 0)&&((joypad1 & SELECT) != 0)){ // select = spawn 8 enemies
;
	lda     _joypad1old
	and     #$20
	bne     L0839
	lda     _joypad1
	and     #$20
	beq     L0839
;
; Spawn_Enemies();
;
	jsr     _Spawn_Enemies
;
; if (((joypad1old & DOWN) == 0)&&((joypad1 & DOWN) != 0)){ // select = spawn 8 enemies bullets
;
L0839:	lda     _joypad1old
	and     #$04
	bne     L083C
	lda     _joypad1
	and     #$04
	beq     L083C
;
; Spawn_Bullets();
;
	jsr     _Spawn_Bullets
;
; if (injury_Timer == 0){
;
L083C:	lda     _injury_Timer
	bne     L083D
;
; if (invincible == 0){
;
	lda     _invincible
	bne     L0841
;
; collision_Test2(); // get injured
;
	jsr     _collision_Test2
;
; else {
;
	jmp     L0841
;
; joypad1 = 0;
;
L083D:	lda     #$00
	sta     _joypad1
;
; ++injury_Timer;
;
	inc     _injury_Timer
;
; if (injury_Timer == 120) {
;
	lda     _injury_Timer
	cmp     #$78
	bne     L083E
;
; injury_Timer = 0;
;
	lda     #$00
	sta     _injury_Timer
;
; invincible = 30;
;
	lda     #$1E
	sta     _invincible
;
; hero_ship.X += 4;
;
	lda     #$04
	clc
	adc     _hero_ship+3
	sta     _hero_ship+3
;
; if ((injury_Timer == 40)&&(hero_ship.X >= 4)) hero_ship.X -= 4; // shift left for larger explosion
;
L083E:	lda     _injury_Timer
	cmp     #$28
	bne     L0841
	lda     _hero_ship+3
	cmp     #$04
	bcc     L0841
	sec
	sbc     #$04
	sta     _hero_ship+3
;
; if (invincible != 0)
;
L0841:	lda     _invincible
	beq     L0842
;
; --invincible;
;
	dec     _invincible
;
; if (Lives == 0xff){
;
L0842:	lda     _Lives
	cmp     #$FF
	bne     L0219
;
; ++Death_Flag; // wait a little before entering death mode
;
	inc     _Death_Flag
;
; Lives = 0;
;
	lda     #$00
	sta     _Lives
;
; move_logic();
;
L0219:	jsr     _move_logic
;
; shooting();
;
	jsr     _shooting
;
; collision_Test(); // hit enemy
;
	jsr     _collision_Test
;
; Draw_Bullets(); // and move them
;
	jsr     _Draw_Bullets
;
; Draw_Hero();
;
	jsr     _Draw_Hero
;
; Draw_Enemies(); // and move them
;
	jsr     _Draw_Enemies
;
; Draw_Explosion(); // and animate
;
	jsr     _Draw_Explosion
;
; Set_Sprite_Zero(); // redundant...just double checking
;
	jsr     _Set_Sprite_Zero
;
; Music_Update();
;
	jsr     _Music_Update
;
; Adjust_Scoreboard();
;
	jsr     _Adjust_Scoreboard
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // start Pause Mode
;
	lda     _joypad1old
	and     #$10
	bne     L0845
	lda     _joypad1
	and     #$10
	beq     L0845
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_PAUSE;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if ((injury_Timer == 119)&&(Death_Flag !=0)) { // init game over
;
L0845:	lda     _injury_Timer
	cmp     #$77
	bne     L085D
	lda     _Death_Flag
	beq     L085F
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME_OVER;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L085D:	lda     #$00
L085F:	sta     _NMI_flag
;
; while (Game_Mode == RUN_GAME_MODE){ // Game Mode
;
L084A:	lda     _Game_Mode
	cmp     #$01
	jeq     L0836
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
	jmp     L0850
;
; while (NMI_flag == 0); // wait till v-blank
;
L084B:	lda     _NMI_flag
	beq     L084B
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){ // Go back to Game Mode
;
	lda     _joypad1old
	and     #$10
	bne     L085E
	lda     _joypad1
	and     #$10
	beq     L0860
;
; Blank_sprite();
;
	jsr     _Blank_sprite
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = SONG_GAME;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; NMI_flag = 0;
;
L085E:	lda     #$00
L0860:	sta     _NMI_flag
;
; while (Game_Mode == PAUSE_MODE){ // Pause Mode
;
L0850:	lda     _Game_Mode
	cmp     #$02
	beq     L084B
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
	jmp     L0854
;
; while (NMI_flag == 0); // wait till v-blank
;
L0851:	lda     _NMI_flag
	beq     L0851
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; ++Wait;
;
	inc     _Wait
;
; if (Wait == 0)
;
	bne     L0852
;
; ++Wait2;
;
	inc     _Wait2
;
; if (Wait2 == 2){ // about 8 seconds
;
L0852:	lda     _Wait2
	cmp     #$02
	bne     L0853
;
; All_Off();
;
	jsr     _All_Off
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
	jsr     _Reset
;
; NMI_flag = 0;
;
L0853:	lda     #$00
	sta     _NMI_flag
;
; while (Game_Mode == GAME_OVER_MODE){ // Game Over
;
L0854:	lda     _Game_Mode
	cmp     #$03
	beq     L0851
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
	jmp     L085C
;
; while (NMI_flag == 0); // wait till NMI
;
L0855:	lda     _NMI_flag
	beq     L0855
;
; Get_Input();
;
	jsr     _Get_Input
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (Wait2 < 2) // about 8 seconds
;
	lda     _Wait2
	cmp     #$02
	bcs     L0856
;
; ++Wait;
;
	inc     _Wait
;
; if (Wait == 0)
;
L0856:	lda     _Wait
	bne     L0857
;
; ++Wait2;
;
	inc     _Wait2
;
; if (Wait2 == 2){ // after waiting 8 seconds, we can skip back to start
;
L0857:	lda     _Wait2
	cmp     #$02
	bne     L085A
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L085A
	lda     _joypad1
	and     #$10
	beq     L0861
;
; All_Off();
;
	jsr     _All_Off
;
; Reset(); // go back to title, by resetting the game see reset.s _Reset
;
	jsr     _Reset
;
; NMI_flag = 0;
;
L085A:	lda     #$00
L0861:	sta     _NMI_flag
;
; while (Game_Mode == VICTORY_MODE){ // Victory
;
L085C:	lda     _Game_Mode
	cmp     #$04
	beq     L0855
;
; while (1){ // infinite loop
;
	jmp     L0835

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Explosion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Explosion: near

.segment	"CODE"

;
; if (Explode1.Y == 0){
;
	lda     _Explode1+2
	bne     L0862
;
; Explode1.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode1+2
;
; Explode1.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode1+3
;
; Explode1.anime = enemy_expl;
;
	lda     #$0A
	sta     _Explode1
;
; Explode1.count = 20; // count down
;
	lda     #$14
	sta     _Explode1+7
;
; else if (Explode2.Y == 0){
;
	rts
L0862:	lda     _Explode2+2
	bne     L0863
;
; Explode2.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode2+2
;
; Explode2.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode2+3
;
; Explode2.anime = enemy_expl;
;
	lda     #$0A
	sta     _Explode2
;
; Explode2.count = 20; // count down
;
	lda     #$14
	sta     _Explode2+7
;
; else if (Explode3.Y == 0){
;
	rts
L0863:	lda     _Explode3+2
	bne     L0864
;
; Explode3.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode3+2
;
; Explode3.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode3+3
;
; Explode3.anime = enemy_expl;
;
	lda     #$0A
	sta     _Explode3
;
; Explode3.count = 20; // count down
;
	lda     #$14
	sta     _Explode3+7
;
; else if (Explode4.Y == 0){
;
	rts
L0864:	lda     _Explode4+2
	bne     L05C3
;
; Explode4.Y = objectB_y;
;
	lda     _objectB_y
	sta     _Explode4+2
;
; Explode4.X = objectB_x;
;
	lda     _objectB_x
	sta     _Explode4+3
;
; Explode4.anime = enemy_expl;
;
	lda     #$0A
	sta     _Explode4
;
; Explode4.count = 20; // count down
;
	lda     #$14
	sta     _Explode4+7
;
; }
;
L05C3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Enemies: near

.segment	"CODE"

;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; if (ENEMY1.Y != 0){
;
	lda     _ENEMY1+2
	beq     L0866
;
; objectB_y = ENEMY1.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY1.X;
;
	lda     _ENEMY1+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0866
;
; ENEMY1.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY1+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY2.Y != 0){
;
L0866:	lda     _ENEMY2+2
	beq     L0867
;
; objectB_y = ENEMY2.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY2.X;
;
	lda     _ENEMY2+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0867
;
; ENEMY2.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY2+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY3.Y != 0){
;
L0867:	lda     _ENEMY3+2
	beq     L0868
;
; objectB_y = ENEMY3.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY3.X;
;
	lda     _ENEMY3+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0868
;
; ENEMY3.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY3+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY4.Y != 0){
;
L0868:	lda     _ENEMY4+2
	beq     L0869
;
; objectB_y = ENEMY4.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY4.X;
;
	lda     _ENEMY4+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0869
;
; ENEMY4.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY4+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY5.Y != 0){
;
L0869:	lda     _ENEMY5+2
	beq     L086A
;
; objectB_y = ENEMY5.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY5.X;
;
	lda     _ENEMY5+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L086A
;
; ENEMY5.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY5+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY6.Y != 0){
;
L086A:	lda     _ENEMY6+2
	beq     L086B
;
; objectB_y = ENEMY6.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY6.X;
;
	lda     _ENEMY6+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L086B
;
; ENEMY6.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY6+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY7.Y != 0){
;
L086B:	lda     _ENEMY7+2
	beq     L086C
;
; objectB_y = ENEMY7.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY7.X;
;
	lda     _ENEMY7+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L086C
;
; ENEMY7.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY7+2
;
; return;
;
	jmp     L0870
;
; if (ENEMY8.Y != 0){
;
L086C:	lda     _ENEMY8+2
	beq     L0639
;
; objectB_y = ENEMY8.Y;
;
	sta     _objectB_y
;
; objectB_x = ENEMY8.X;
;
	lda     _ENEMY8+3
	sta     _objectB_x
;
; Hitbox();
;
	jsr     _Hitbox
;
; if (collision != 0){
;
	lda     _collision
	beq     L0639
;
; ENEMY8.Y = 0; // turn off
;
	lda     #$00
	sta     _ENEMY8+2
;
; Spawn_Explosion();
;
L0870:	jsr     _Spawn_Explosion
;
; Score4 += 5;
;
	lda     #$05
	clc
	adc     _Score4
	sta     _Score4
;
; }
;
L0639:	rts

.endproc

